<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>二进制 on Y4ph3tS blog</title>
    <link>https://yaphetszz.github.io/categories/%E4%BA%8C%E8%BF%9B%E5%88%B6/</link>
    <description>Recent content in 二进制 on Y4ph3tS blog</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Sat, 21 Nov 2020 02:01:32 +0800</lastBuildDate>
    <atom:link href="https://yaphetszz.github.io/categories/%E4%BA%8C%E8%BF%9B%E5%88%B6/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>初窥AMSI攻防对抗</title>
      <link>https://yaphetszz.github.io/posts/asmi/</link>
      <pubDate>Sat, 21 Nov 2020 02:01:32 +0800</pubDate>
      <guid>https://yaphetszz.github.io/posts/asmi/</guid>
      <description>&lt;h2 id=&#34;什么是amsi&#34;&gt;什么是AMSI&lt;/h2&gt;&#xA;&lt;p&gt;AMSI（Antimalware Scan Interface）全称反恶意软件扫描接口，是微软提供的一个接口，官方文档地址如下：&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/windows/win32/amsi/antimalware-scan-interface-portal&#34;&gt;https://docs.microsoft.com/en-us/windows/win32/amsi/antimalware-scan-interface-portal&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;ASMI允许应用程序和服务与计算机上存在的任何反恶意软件产品集成。AMSI为终端用户及其数据，应用程序和工作负载提供了增强型的恶意软件防护。&lt;/p&gt;&#xA;&lt;p&gt;ASMI已集成到下列组件中：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;用户帐户控制或UAC（EXE，COM，MSI或ActiveX安装的高度）&lt;/li&gt;&#xA;&lt;li&gt;PowerShell（脚本，交互使用和动态代码评估）&lt;/li&gt;&#xA;&lt;li&gt;Windows脚本主机（wscript.exe和cscript.exe）&lt;/li&gt;&#xA;&lt;li&gt;JavaScript和VBScript&lt;/li&gt;&#xA;&lt;li&gt;Office VBA宏&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;amsi的工作原理&#34;&gt;AMSI的工作原理&lt;/h2&gt;&#xA;&lt;p&gt;官方给出的框架如下：&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../amsi/1.png&#34; alt=&#34;AMSI体系结构&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;当ASMI打开时，其他任何程序都可以调用它，同时任何经过注册的防护软件都可以让它执行任务。&lt;/p&gt;&#xA;&lt;p&gt;在实际工作过程中，举个例子，这个例子通过异或加密，用来下载互联网上的资源，&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../amsi/2.png&#34; alt=&#34;sample script encoded in Base64&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;我们可以通过直接在PS中进行输入来确保没有通过文件执行（这可能可以绕过部分防护软件的检测）这也时我们通常说的无文件攻击，因为以这种形式产生的攻击通常驻留在内存中，常规的查杀方法难以检测。&lt;/p&gt;&#xA;&lt;p&gt;微软给出了一个例子，通过PS执行了一个脚本，被ASMI拦截&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../amsi/3.png&#34; alt=&#34;Windows Defender detecting the AMSI test sample&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;同时，AMSI还能应用到宏中，用于检测VBA和宏中是否携带有恶意操作&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../amsi/4.png&#34; alt=&#34;AMSI integration with JavaScript/VBA&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;上图经过了如下步骤：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;用户收到包含（恶意）宏的文档，该宏通过采用混淆，受密码保护的文件等技术来规避静态防病毒软件的扫描。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;然后，用户打开包含（恶意）宏的文档。如果文档在“受保护的视图”中打开，则用户单击“启用编辑”以退出“受保护的视图”。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;用户单击“启用宏”以允许宏运行。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;在运行宏时，VBA运行时使用循环缓冲区记录[1]数据和与Win32，COM和VBA API调用有关的参数。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;当观察到被认为具有高风险的特定Win32或COM API（也称为&lt;em&gt;触发器&lt;/em&gt;）[2]时，宏执行将暂停，并将循环缓冲区的内容传递给AMSI。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;注册的AMSI反恶意软件服务提供者做出判决，以指示该宏行为是否是恶意的。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;如果该行为是非恶意的，则继续执行宏。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;否则，如果该行为是恶意的，则Microsoft Office将关闭该会话以响应警报[3]，并且AV可以隔离该文件。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;对抗方式的进化过程&#34;&gt;对抗方式的进化过程&lt;/h2&gt;&#xA;&lt;p&gt;了解了ASMI的原理，我们可以知道它的大致工作方式，同时也知道了作用原理&lt;/p&gt;&#xA;&lt;h3 id=&#34;特定字符匹配&#34;&gt;特定字符匹配&lt;/h3&gt;&#xA;&lt;p&gt;以下为一段PS示例代码，现在是正常的代码，通常在攻防对抗的过程中会变得更为复杂：&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../amsi/5.png&#34; alt=&#34;an example of a malicious PowerShell script&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;安全人员可以编写规则来检测其中的代码，例如对字符串的匹配，规则为匹配&lt;code&gt;Write-Host&#39;pwnd！&#39;&lt;/code&gt;,这时运行这段代码就会被ASMI拦截。这时候基础的对抗就应运而生，如果目标使用的是上述的全字符匹配，黑客通过拆分的方式即可绕过&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../amsi/6.png&#34; alt=&#34;an example of a dynamic script&#34;&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;代码仿真&#34;&gt;代码仿真&lt;/h3&gt;&#xA;&lt;p&gt;这时候的简单规则被方便绕过，因此安全人员转而进行代码仿真，即执行语句的方式来判断是否有恶意行为，然而，由于拼接字符串的方法过于多样，黑客们又可以轻松绕过，例如非常常见的Base64编码，这种形式的简单加密手段在蚁剑中也很常见&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../amsi/7.png&#34; alt=&#34;an example of script content in Base64&#34;&gt;&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
