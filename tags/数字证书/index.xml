<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>数字证书 on Y4ph3tS blog</title>
    <link>https://yaphetszz.github.io/tags/%E6%95%B0%E5%AD%97%E8%AF%81%E4%B9%A6/</link>
    <description>Recent content in 数字证书 on Y4ph3tS blog</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Tue, 14 Feb 2023 01:21:09 +0800</lastBuildDate>
    <atom:link href="https://yaphetszz.github.io/tags/%E6%95%B0%E5%AD%97%E8%AF%81%E4%B9%A6/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>keytool 生成证书链</title>
      <link>https://yaphetszz.github.io/posts/keytool%E7%94%9F%E6%88%90%E8%AF%81%E4%B9%A6%E9%93%BE/</link>
      <pubDate>Tue, 14 Feb 2023 01:21:09 +0800</pubDate>
      <guid>https://yaphetszz.github.io/posts/keytool%E7%94%9F%E6%88%90%E8%AF%81%E4%B9%A6%E9%93%BE/</guid>
      <description>&lt;h2 id=&#34;数字证书基本概念&#34;&gt;数字证书基本概念&lt;/h2&gt;&#xA;&lt;p&gt;数字证书‌是一种由受信任的第三方机构（称为证书颁发机构，CA）颁发的电子文档，用于证明公钥的所有权。数字证书包含了证书持有者的信息（如名称和电子邮件地址）、证书持有者的公钥、证书有效期以及CA的签名等信息。其主要作用包括：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;‌&lt;strong&gt;身份验证&lt;/strong&gt;‌：帮助用户验证对方的身份，确保通信双方是合法的。&lt;/li&gt;&#xA;&lt;li&gt;‌&lt;strong&gt;数据加密&lt;/strong&gt;‌：通过公钥和私钥配对，保证数据传输的安全性。&lt;/li&gt;&#xA;&lt;li&gt;‌&lt;strong&gt;数据完整性&lt;/strong&gt;‌：通过数字签名确认数据在传输过程中未被篡改‌。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;‌证书链‌是一系列数字证书的集合，用于建立一个信任路径，从而验证证书的有效性。证书链从一个受信任的根证书颁发机构（Root CA）开始，经过一个或多个中间证书颁发机构（Intermediate  CAs），最终到达目标证书（如服务器或个人证书）。每个中间CA的证书都由上一级CA签名。证书链的工作原理基于信任传递机制，即如果你信任根证书颁发机构，那么你也可以信任它所签发的所有证书，包括中间CA证书和最终的服务器或个人证书。这种机制确保了数字证书体系的安全性和可扩展性‌。&lt;/p&gt;&#xA;&lt;h3 id=&#34;数字证书和证书链的重要性&#34;&gt;数字证书和证书链的重要性&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;‌&lt;strong&gt;建立信任关系&lt;/strong&gt;‌：通过验证证书链，用户可以确认一个网站的真实性和安全性，防止钓鱼攻击和确保网站身份的真实性‌。&lt;/li&gt;&#xA;&lt;li&gt;‌&lt;strong&gt;加强数据安全&lt;/strong&gt;‌：数字证书链确保了公钥的真实来源，使得数据加密和数字签名过程更加安全可靠‌。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;生成根证书&#34;&gt;生成根证书&lt;/h2&gt;&#xA;&lt;p&gt;安装好java，确保keytool可以正常使用，开始配置证书链&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;keytool -genkeypair -validity 36500 -keyalg EC -keypass 12345678 -storepass 12345678 -dname &amp;#34;CN=y4,C=CN,OU=y4&amp;#34; -alias rootca -keystore root.jks&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;../index_files/image-20241207102750805.png&#34; alt=&#34;image-20241207102750805&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;此命令使用椭圆曲线secp256r1算法，产生一个256位的EC密钥对，并保存到njhx_root.jks中。使用以下命令查看密钥库的信息，会发现发布者与所有者都是y4&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt; keytool -list -keystore root.jks -keypass 12345678 -storepass 12345678 -v&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;../index_files/image-20241207103012129.png&#34; alt=&#34;image-20241207103012129&#34;&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;从根证书密钥库导出根证书&#34;&gt;从根证书密钥库导出根证书&lt;/h2&gt;&#xA;&lt;p&gt;使用keytool的导出功能，从密钥库中导出根证书，输入密钥库的密码，导出的证书文件为rootca.cer命令如下：&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;keytool -exportcert -validity 36500 -alias rootca -file root.cer -keystore root.jks -keypass 12345678 -storepass 12345678&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;../index_files/image-20241207103217902.png&#34; alt=&#34;image-20241207103217902&#34;&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;生成二级证书密钥库&#34;&gt;生成二级证书密钥库&lt;/h2&gt;&#xA;&lt;p&gt;二级证书需要由根证书签发。&lt;/p&gt;&#xA;&lt;p&gt;首先使用keytool生成二级证书的密钥库，但是此时还是自签的，我们需要从中生成一个二级证书请求（其中包含了二级证书的公钥）；&lt;/p&gt;&#xA;&lt;p&gt;然后将证书请求发送到rootca签发二级证书；&lt;/p&gt;&#xA;&lt;p&gt;最后，我们将rootca签发的二级证书导入到证书密钥库中，完成二级证书的生成。&lt;/p&gt;&#xA;&lt;p&gt;下面命令是生成二级证书密钥库，密钥库的名称为spky4，此时仍是自签的，证书颁发者和使用者都是自已：&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;keytool -genkeypair -validity 36500 -keyalg EC -keypass 12345678 -storepass 12345678 -dname &amp;#34;CN=y4.com,C=CN,OU=y4&amp;#34; -alias spky4 -keystore sub.jks&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;../index_files/image-20241207103421561.png&#34; alt=&#34;image-20241207103421561&#34;&gt;&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
