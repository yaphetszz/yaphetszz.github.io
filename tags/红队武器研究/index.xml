<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>红队武器研究 on Y4ph3tS blog</title>
    <link>https://yaphetszz.github.io/tags/%E7%BA%A2%E9%98%9F%E6%AD%A6%E5%99%A8%E7%A0%94%E7%A9%B6/</link>
    <description>Recent content in 红队武器研究 on Y4ph3tS blog</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Thu, 27 Mar 2025 23:40:18 +0800</lastBuildDate>
    <atom:link href="https://yaphetszz.github.io/tags/%E7%BA%A2%E9%98%9F%E6%AD%A6%E5%99%A8%E7%A0%94%E7%A9%B6/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>红队基础设施建设与改造（五）——Fscan从代码逻辑到二开</title>
      <link>https://yaphetszz.github.io/posts/%E7%BA%A2%E9%98%9F%E5%9F%BA%E7%A1%80%E8%AE%BE%E6%96%BD%E5%BB%BA%E8%AE%BE%E4%B8%8E%E6%94%B9%E9%80%A0%E4%BA%94fscan%E4%BB%8E%E4%BB%A3%E7%A0%81%E9%80%BB%E8%BE%91%E5%88%B0%E4%BA%8C%E5%BC%80/</link>
      <pubDate>Thu, 27 Mar 2025 23:40:18 +0800</pubDate>
      <guid>https://yaphetszz.github.io/posts/%E7%BA%A2%E9%98%9F%E5%9F%BA%E7%A1%80%E8%AE%BE%E6%96%BD%E5%BB%BA%E8%AE%BE%E4%B8%8E%E6%94%B9%E9%80%A0%E4%BA%94fscan%E4%BB%8E%E4%BB%A3%E7%A0%81%E9%80%BB%E8%BE%91%E5%88%B0%E4%BA%8C%E5%BC%80/</guid>
      <description>&lt;h2 id=&#34;fscan简介和基础结构&#34;&gt;Fscan简介和基础结构&lt;/h2&gt;&#xA;&lt;p&gt;fscan是用Go语言编写的端口扫描工具，它具有高效、快速的特点，能够对目标主机的端口进行扫描，并识别开放的服务等信息。在内网探测的时候效果挺好，很多攻击队在打点突破拿到边界机之后都会喜欢上传fscan、frp等工具来进行内网探测，辅助横向移动进行下一步攻击&lt;/p&gt;&#xA;&lt;p&gt;现在fscan已经重构生成了2.0版本，但是因为文章写慢了，刚开始 写的时候用的是1.x的版本，2.0也没细看，所以先分析1.x版本，后面有时间在写2.0（都鸽们，怎么会骗你呢），本文主要从fscan的源码入手，分析fscan的原理，并简单介绍如何进行fscan的免杀和魔改，如果没有go语言基础的同学建议学习一下&lt;/p&gt;&#xA;&lt;p&gt;1代的最新版本是1.8.4，可在以下链接下载&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/shadow1ng/fscan/archive/refs/tags/1.8.4.zip&#34;&gt;https://github.com/shadow1ng/fscan/archive/refs/tags/1.8.4.zip&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;基本目录结构如下&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../fscan/image-20250309150606982.png&#34; alt=&#34;image-20250309150606982&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;Fscan&#xA;├─common&#xA;├─image&#xA;├─Plugins&#xA;├─WebScan&#xA;├─go.mod&#xA;├─go.sum&#xA;├─main.go&#xA;├─README.md&#xA;└─LICENSE.txt&lt;/p&gt;&#xA;&lt;p&gt;common是基础模块，包含了如启动参数解析、地址解析、日志记录、代理、基础配置等功能的实现源码&lt;/p&gt;&#xA;&lt;p&gt;image是readme的图片存储目录&lt;/p&gt;&#xA;&lt;p&gt;Plugins是插件目录，主要功能为实现ftp、rdp、mysql等服务的探测以及弱口令的检测&lt;/p&gt;&#xA;&lt;p&gt;webscan是web扫描实现部分，用于使用内置的poc进行漏洞扫描&lt;/p&gt;&#xA;&lt;p&gt;gomd和gosum就不说了&lt;/p&gt;&#xA;&lt;p&gt;main.go是主方法，程序入口点&lt;/p&gt;&#xA;&lt;h2 id=&#34;代码分析&#34;&gt;代码分析&lt;/h2&gt;&#xA;&lt;p&gt;从main.go入手分析&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../fscan/image-20250309164635838.png&#34; alt=&#34;image-20250309164635838&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;start := time.Now()记录了程序开始的时间，用于后续计算程序运行的总耗时&lt;/p&gt;&#xA;&lt;p&gt;flag是打印logo和参数的模块，从common中能直接看到相关代码&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../fscan/image-20250309165131907.png&#34; alt=&#34;image-20250309165131907&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;顺便介绍一下参数&lt;/p&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;参数名&lt;/th&gt;&#xA;          &lt;th&gt;参数类型&lt;/th&gt;&#xA;          &lt;th&gt;默认值&lt;/th&gt;&#xA;          &lt;th&gt;描述&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;-h&lt;/td&gt;&#xA;          &lt;td&gt;string&lt;/td&gt;&#xA;          &lt;td&gt;&amp;quot;&amp;quot;&lt;/td&gt;&#xA;          &lt;td&gt;要扫描的主机IP地址，例如: 192.168.11.11&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;-hn&lt;/td&gt;&#xA;          &lt;td&gt;string&lt;/td&gt;&#xA;          &lt;td&gt;&amp;quot;&amp;quot;&lt;/td&gt;&#xA;          &lt;td&gt;不扫描的主机，例如: -hn 192.168.1.1/24&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;-p&lt;/td&gt;&#xA;          &lt;td&gt;string&lt;/td&gt;&#xA;          &lt;td&gt;默认端口&lt;/td&gt;&#xA;          &lt;td&gt;指定端口，例如: 22&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;-pa&lt;/td&gt;&#xA;          &lt;td&gt;string&lt;/td&gt;&#xA;          &lt;td&gt;&amp;quot;&amp;quot;&lt;/td&gt;&#xA;          &lt;td&gt;基于DefaultPorts添加端口，-pa 3389&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;-usera&lt;/td&gt;&#xA;          &lt;td&gt;string&lt;/td&gt;&#xA;          &lt;td&gt;&amp;quot;&amp;quot;&lt;/td&gt;&#xA;          &lt;td&gt;基于DefaultUsers添加用户，-usera user&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;-pwda&lt;/td&gt;&#xA;          &lt;td&gt;string&lt;/td&gt;&#xA;          &lt;td&gt;&amp;quot;&amp;quot;&lt;/td&gt;&#xA;          &lt;td&gt;基于DefaultPasses添加密码，-pwda password&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;-pn&lt;/td&gt;&#xA;          &lt;td&gt;string&lt;/td&gt;&#xA;          &lt;td&gt;&amp;quot;&amp;quot;&lt;/td&gt;&#xA;          &lt;td&gt;不扫描的端口，例如: -pn 445&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;-c&lt;/td&gt;&#xA;          &lt;td&gt;string&lt;/td&gt;&#xA;          &lt;td&gt;&amp;quot;&amp;quot;&lt;/td&gt;&#xA;          &lt;td&gt;执行命令 (ssh和wmi)&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;-sshkey&lt;/td&gt;&#xA;          &lt;td&gt;string&lt;/td&gt;&#xA;          &lt;td&gt;&amp;quot;&amp;quot;&lt;/td&gt;&#xA;          &lt;td&gt;ssh密钥文件 (id_rsa)&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;-domain&lt;/td&gt;&#xA;          &lt;td&gt;string&lt;/td&gt;&#xA;          &lt;td&gt;&amp;quot;&amp;quot;&lt;/td&gt;&#xA;          &lt;td&gt;smb域&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;-user&lt;/td&gt;&#xA;          &lt;td&gt;string&lt;/td&gt;&#xA;          &lt;td&gt;&amp;quot;&amp;quot;&lt;/td&gt;&#xA;          &lt;td&gt;用户名&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;-pwd&lt;/td&gt;&#xA;          &lt;td&gt;string&lt;/td&gt;&#xA;          &lt;td&gt;&amp;quot;&amp;quot;&lt;/td&gt;&#xA;          &lt;td&gt;密码&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;-time&lt;/td&gt;&#xA;          &lt;td&gt;int64&lt;/td&gt;&#xA;          &lt;td&gt;3&lt;/td&gt;&#xA;          &lt;td&gt;设置超时时间&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;-m&lt;/td&gt;&#xA;          &lt;td&gt;string&lt;/td&gt;&#xA;          &lt;td&gt;&amp;ldquo;all&amp;rdquo;&lt;/td&gt;&#xA;          &lt;td&gt;选择扫描类型，例如: -m ssh&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;-path&lt;/td&gt;&#xA;          &lt;td&gt;string&lt;/td&gt;&#xA;          &lt;td&gt;&amp;quot;&amp;quot;&lt;/td&gt;&#xA;          &lt;td&gt;fcgi、smb远程文件路径&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;-t&lt;/td&gt;&#xA;          &lt;td&gt;int&lt;/td&gt;&#xA;          &lt;td&gt;600&lt;/td&gt;&#xA;          &lt;td&gt;线程数&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;-top&lt;/td&gt;&#xA;          &lt;td&gt;int&lt;/td&gt;&#xA;          &lt;td&gt;10&lt;/td&gt;&#xA;          &lt;td&gt;显示存活数量前几位&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;-hf&lt;/td&gt;&#xA;          &lt;td&gt;string&lt;/td&gt;&#xA;          &lt;td&gt;&amp;quot;&amp;quot;&lt;/td&gt;&#xA;          &lt;td&gt;主机文件，-hf ip.txt&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;-userf&lt;/td&gt;&#xA;          &lt;td&gt;string&lt;/td&gt;&#xA;          &lt;td&gt;&amp;quot;&amp;quot;&lt;/td&gt;&#xA;          &lt;td&gt;用户名文件&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;-pwdf&lt;/td&gt;&#xA;          &lt;td&gt;string&lt;/td&gt;&#xA;          &lt;td&gt;&amp;quot;&amp;quot;&lt;/td&gt;&#xA;          &lt;td&gt;密码文件&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;-portf&lt;/td&gt;&#xA;          &lt;td&gt;string&lt;/td&gt;&#xA;          &lt;td&gt;&amp;quot;&amp;quot;&lt;/td&gt;&#xA;          &lt;td&gt;端口文件&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;-pocpath&lt;/td&gt;&#xA;          &lt;td&gt;string&lt;/td&gt;&#xA;          &lt;td&gt;&amp;quot;&amp;quot;&lt;/td&gt;&#xA;          &lt;td&gt;poc文件路径&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;-rf&lt;/td&gt;&#xA;          &lt;td&gt;string&lt;/td&gt;&#xA;          &lt;td&gt;&amp;quot;&amp;quot;&lt;/td&gt;&#xA;          &lt;td&gt;写入sshkey文件的redis文件 (例如: -rf id_rsa.pub)&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;-rs&lt;/td&gt;&#xA;          &lt;td&gt;string&lt;/td&gt;&#xA;          &lt;td&gt;&amp;quot;&amp;quot;&lt;/td&gt;&#xA;          &lt;td&gt;写入计划任务文件的redis shell (例如: -rs 192.168.1.1:6666)&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;-nopoc&lt;/td&gt;&#xA;          &lt;td&gt;bool&lt;/td&gt;&#xA;          &lt;td&gt;false&lt;/td&gt;&#xA;          &lt;td&gt;不扫描web漏洞&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;-nobr&lt;/td&gt;&#xA;          &lt;td&gt;bool&lt;/td&gt;&#xA;          &lt;td&gt;false&lt;/td&gt;&#xA;          &lt;td&gt;不暴力破解密码&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;-br&lt;/td&gt;&#xA;          &lt;td&gt;int&lt;/td&gt;&#xA;          &lt;td&gt;1&lt;/td&gt;&#xA;          &lt;td&gt;暴力破解线程数&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;-np&lt;/td&gt;&#xA;          &lt;td&gt;bool&lt;/td&gt;&#xA;          &lt;td&gt;false&lt;/td&gt;&#xA;          &lt;td&gt;不进行ping扫描&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;-ping&lt;/td&gt;&#xA;          &lt;td&gt;bool&lt;/td&gt;&#xA;          &lt;td&gt;false&lt;/td&gt;&#xA;          &lt;td&gt;使用ping替代icmp&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;-o&lt;/td&gt;&#xA;          &lt;td&gt;string&lt;/td&gt;&#xA;          &lt;td&gt;&amp;ldquo;result.txt&amp;rdquo;&lt;/td&gt;&#xA;          &lt;td&gt;输出文件&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;-no&lt;/td&gt;&#xA;          &lt;td&gt;bool&lt;/td&gt;&#xA;          &lt;td&gt;false&lt;/td&gt;&#xA;          &lt;td&gt;不保存输出日志&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;-debug&lt;/td&gt;&#xA;          &lt;td&gt;int64&lt;/td&gt;&#xA;          &lt;td&gt;60&lt;/td&gt;&#xA;          &lt;td&gt;每次记录错误日志的时间间隔&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;-silent&lt;/td&gt;&#xA;          &lt;td&gt;bool&lt;/td&gt;&#xA;          &lt;td&gt;false&lt;/td&gt;&#xA;          &lt;td&gt;静默扫描&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;-nocolor&lt;/td&gt;&#xA;          &lt;td&gt;bool&lt;/td&gt;&#xA;          &lt;td&gt;false&lt;/td&gt;&#xA;          &lt;td&gt;不使用颜色输出&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;-full&lt;/td&gt;&#xA;          &lt;td&gt;bool&lt;/td&gt;&#xA;          &lt;td&gt;false&lt;/td&gt;&#xA;          &lt;td&gt;poc全面扫描，例如: shiro 100 key&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;-u&lt;/td&gt;&#xA;          &lt;td&gt;string&lt;/td&gt;&#xA;          &lt;td&gt;&amp;quot;&amp;quot;&lt;/td&gt;&#xA;          &lt;td&gt;url&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;-uf&lt;/td&gt;&#xA;          &lt;td&gt;string&lt;/td&gt;&#xA;          &lt;td&gt;&amp;quot;&amp;quot;&lt;/td&gt;&#xA;          &lt;td&gt;url文件&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;-pocname&lt;/td&gt;&#xA;          &lt;td&gt;string&lt;/td&gt;&#xA;          &lt;td&gt;&amp;quot;&amp;quot;&lt;/td&gt;&#xA;          &lt;td&gt;使用包含pocname的poc，-pocname weblogic&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;-proxy&lt;/td&gt;&#xA;          &lt;td&gt;string&lt;/td&gt;&#xA;          &lt;td&gt;&amp;quot;&amp;quot;&lt;/td&gt;&#xA;          &lt;td&gt;设置poc代理，-proxy http://127.0.0.1:8080&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;-socks5&lt;/td&gt;&#xA;          &lt;td&gt;string&lt;/td&gt;&#xA;          &lt;td&gt;&amp;quot;&amp;quot;&lt;/td&gt;&#xA;          &lt;td&gt;设置socks5代理，将在tcp连接中使用，超时设置将不生效&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;-cookie&lt;/td&gt;&#xA;          &lt;td&gt;string&lt;/td&gt;&#xA;          &lt;td&gt;&amp;quot;&amp;quot;&lt;/td&gt;&#xA;          &lt;td&gt;设置poc cookie，-cookie rememberMe=login&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;-wt&lt;/td&gt;&#xA;          &lt;td&gt;int64&lt;/td&gt;&#xA;          &lt;td&gt;5&lt;/td&gt;&#xA;          &lt;td&gt;设置web超时时间&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;-dns&lt;/td&gt;&#xA;          &lt;td&gt;bool&lt;/td&gt;&#xA;          &lt;td&gt;false&lt;/td&gt;&#xA;          &lt;td&gt;使用dnslog poc&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;-num&lt;/td&gt;&#xA;          &lt;td&gt;int&lt;/td&gt;&#xA;          &lt;td&gt;20&lt;/td&gt;&#xA;          &lt;td&gt;poc速率&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;-sc&lt;/td&gt;&#xA;          &lt;td&gt;string&lt;/td&gt;&#xA;          &lt;td&gt;&amp;quot;&amp;quot;&lt;/td&gt;&#xA;          &lt;td&gt;ms17 shellcode，例如 -sc add&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;-wmi&lt;/td&gt;&#xA;          &lt;td&gt;bool&lt;/td&gt;&#xA;          &lt;td&gt;false&lt;/td&gt;&#xA;          &lt;td&gt;开启wmi&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;-hash&lt;/td&gt;&#xA;          &lt;td&gt;string&lt;/td&gt;&#xA;          &lt;td&gt;&amp;quot;&amp;quot;&lt;/td&gt;&#xA;          &lt;td&gt;hash&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;-noredis&lt;/td&gt;&#xA;          &lt;td&gt;bool&lt;/td&gt;&#xA;          &lt;td&gt;false&lt;/td&gt;&#xA;          &lt;td&gt;不进行redis安全测试&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;-json&lt;/td&gt;&#xA;          &lt;td&gt;bool&lt;/td&gt;&#xA;          &lt;td&gt;false&lt;/td&gt;&#xA;          &lt;td&gt;json格式输出&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h3 id=&#34;scanner实现&#34;&gt;Scanner实现&lt;/h3&gt;&#xA;&lt;p&gt;Parse.go文件用于解析url、密码字典路径、指定用户名等等参数的相关内容，不展开了，感兴趣的可以自己去看一下&lt;/p&gt;</description>
    </item>
    <item>
      <title>红队基础设施建设与改造（四）——深入解析Cobaltstrike（二开环境与认证过程分析）</title>
      <link>https://yaphetszz.github.io/posts/%E7%BA%A2%E9%98%9F%E5%9F%BA%E7%A1%80%E8%AE%BE%E6%96%BD%E5%BB%BA%E8%AE%BE%E4%B8%8E%E6%94%B9%E9%80%A0%E5%9B%9B%E6%B7%B1%E5%85%A5%E8%A7%A3%E6%9E%90cobaltstrike%E4%BA%8C%E5%BC%80%E7%8E%AF%E5%A2%83%E4%B8%8E%E8%AE%A4%E8%AF%81%E8%BF%87%E7%A8%8B%E5%88%86%E6%9E%90/</link>
      <pubDate>Sat, 06 Aug 2022 19:47:18 +0800</pubDate>
      <guid>https://yaphetszz.github.io/posts/%E7%BA%A2%E9%98%9F%E5%9F%BA%E7%A1%80%E8%AE%BE%E6%96%BD%E5%BB%BA%E8%AE%BE%E4%B8%8E%E6%94%B9%E9%80%A0%E5%9B%9B%E6%B7%B1%E5%85%A5%E8%A7%A3%E6%9E%90cobaltstrike%E4%BA%8C%E5%BC%80%E7%8E%AF%E5%A2%83%E4%B8%8E%E8%AE%A4%E8%AF%81%E8%BF%87%E7%A8%8B%E5%88%86%E6%9E%90/</guid>
      <description>&lt;p&gt;文章其实22年就写了，因为一些原因没有发，本来是笔记，删删改改处理了一些东西后发布&lt;/p&gt;&#xA;&lt;p&gt;之前研究的版本太老了，找个稍微新一点的版本，选用CS4.5进行研究，另外，刚好官方文档描述CS4.5更新了license验证机制，官网链接https://www.cobaltstrike.com/blog/cobalt-strike-4-5-fork-run-youre-history&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../C2reborn/image-20241215153237060.png&#34; alt=&#34;image-20241215153237060&#34;&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;二开环境配置&#34;&gt;二开环境配置&lt;/h2&gt;&#xA;&lt;p&gt;下载完先和官网对比一下hash值避免被加料&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../C2reborn/image-20241211000754709.png&#34; alt=&#34;image-20241211000754709&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;反编译的方法很多就不赘述了，百度一下能搜到一堆（jd、java-decompiler&amp;hellip;）但是由于有些工具无法识别lambda表达式，因此选择的时候建议找个合适的&lt;/p&gt;&#xA;&lt;p&gt;并在dependencies中加入依赖，直接添加library或从jar包添加都行&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../C2reborn/image-20241215112215268.png&#34; alt=&#34;image-20241215112215268&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;CS的启动类为aggressor.Aggressor，将该文件复制到src目录下，配置Artifact选项，以生成jar包，其中Manifest文件复制lib中的Manifest即可，之后编译Artifact包&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../C2reborn/image-20241215113422438.png&#34; alt=&#34;image-20241215113422438&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;启动前添加配置，其中JAR地址为刚刚编译的jar包，VM选项为&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;-XX:ParallelGCThreads=4 -XX:+AggressiveHeap -XX:+UseParallelGC&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;../C2reborn/image-20241215113528425.png&#34; alt=&#34;image-20241215113528425&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;在代码中加入一个弹窗显示消息，并测试是否能够成功执行&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;JOptionPane.showMessageDialog(null,&amp;#34;CS4.5 Modified BY:Y4ph3tS&amp;#34;);&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;../C2reborn/image-20241215113740524.png&#34; alt=&#34;image-20241215113740524&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;通过刚刚配置好的模板运行，弹出窗口即成功&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../C2reborn/image-20241215113856301.png&#34; alt=&#34;image-20241215113856301&#34;&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;认证流程简析与去暗桩&#34;&gt;认证流程简析与去暗桩&lt;/h2&gt;&#xA;&lt;p&gt;由于是原版没有进行破解，所以之后会报错退出，接下来研究一下验证的逻辑，并且进行暗桩的去除&lt;/p&gt;&#xA;&lt;p&gt;beacon/BeaconData.java&lt;/p&gt;&#xA;&lt;p&gt;shouldPad设置为false&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../C2reborn/image-20241215115314402.png&#34; alt=&#34;image-20241215115314402&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;beacon/CommandBuilder.java&lt;/p&gt;&#xA;&lt;p&gt;在文件最后的static方法中，有大量对变量var1的修改，分析后发现是校验逻辑之一，如果var1为false则程序退出，因此只需保证var1永真&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../C2reborn/image-20241215120926725.png&#34; alt=&#34;image-20241215120926725&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;接下来分析核心部分common/Authorization.java，其中主要步骤是校验cobaltstrike.auth，其中对auth文件进行了校验，读取到auth文件并经过格式校验后，调用AuthCrypto的decrypt进行解密&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../C2reborn/image-20241215141215124.png&#34; alt=&#34;image-20241215141215124&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;跟进AuthCrypto，可见其中有一个RSA Key验证操作，先读取authkey.pub公钥文件的md5值，如果通过验证就获取其中的公钥值，生成的操作，&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../C2reborn/image-20241215141457879.png&#34; alt=&#34;image-20241215141457879&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;完整代码如下：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;AuthCrypto&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;A&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Cipher.&lt;span style=&#34;color:#a6e22e&#34;&gt;getInstance&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;RSA/ECB/PKCS1Padding&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;A&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      } &lt;span style=&#34;color:#66d9ef&#34;&gt;catch&lt;/span&gt; (Exception var2) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;B&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Could not initialize crypto&amp;#34;&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         MudgeSanity.&lt;span style=&#34;color:#a6e22e&#34;&gt;logException&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;AuthCrypto init&amp;#34;&lt;/span&gt;, var2, &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;A&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         &lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; var1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; CommonUtils.&lt;span style=&#34;color:#a6e22e&#34;&gt;readAll&lt;/span&gt;(CommonUtils.&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;getClassLoader&lt;/span&gt;().&lt;span style=&#34;color:#a6e22e&#34;&gt;getResourceAsStream&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;resources/authkey.pub&amp;#34;&lt;/span&gt;));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         &lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; var2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; CommonUtils.&lt;span style=&#34;color:#a6e22e&#34;&gt;MD5&lt;/span&gt;(var1);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;8bb4df00c120881a1945a43e2bb2379e&amp;#34;&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;equals&lt;/span&gt;(CommonUtils.&lt;span style=&#34;color:#a6e22e&#34;&gt;toHex&lt;/span&gt;(var2))) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            CommonUtils.&lt;span style=&#34;color:#a6e22e&#34;&gt;print_error&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Invalid authorization file&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            System.&lt;span style=&#34;color:#a6e22e&#34;&gt;exit&lt;/span&gt;(0);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         X509EncodedKeySpec var3 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; X509EncodedKeySpec(var1);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         KeyFactory var4 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; KeyFactory.&lt;span style=&#34;color:#a6e22e&#34;&gt;getInstance&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;RSA&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;C&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; var4.&lt;span style=&#34;color:#a6e22e&#34;&gt;generatePublic&lt;/span&gt;(var3);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      } &lt;span style=&#34;color:#66d9ef&#34;&gt;catch&lt;/span&gt; (Exception var5) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;B&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Could not deserialize authpub.key&amp;#34;&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         MudgeSanity.&lt;span style=&#34;color:#a6e22e&#34;&gt;logException&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;authpub.key deserialization&amp;#34;&lt;/span&gt;, var5, &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; String &lt;span style=&#34;color:#a6e22e&#34;&gt;error&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;B&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;protected&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;decrypt&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; var1) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; var2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;A&lt;/span&gt;(var1);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (var2.&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; 0) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; var2;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         } &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            DataParser var3 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; DataParser(var2);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            var3.&lt;span style=&#34;color:#a6e22e&#34;&gt;big&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; var4 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; var3.&lt;span style=&#34;color:#a6e22e&#34;&gt;readInt&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (var4 &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;889274181) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;B&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pre-4.0 authorization file. Run update to get new file&amp;#34;&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;0&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            } &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (var4 &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;889274157) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;B&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;bad header&amp;#34;&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;0&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            } &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; var5 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; var3.&lt;span style=&#34;color:#a6e22e&#34;&gt;readShort&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               &lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; var6 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; var3.&lt;span style=&#34;color:#a6e22e&#34;&gt;readBytes&lt;/span&gt;(var5);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; var6;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      } &lt;span style=&#34;color:#66d9ef&#34;&gt;catch&lt;/span&gt; (Exception var7) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;B&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; var7.&lt;span style=&#34;color:#a6e22e&#34;&gt;getMessage&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;0&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;A&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; var1) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; var2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;0&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;C&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;0&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         } &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;synchronized&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;A&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;A&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;init&lt;/span&gt;(2, &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;C&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               var2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;A&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;doFinal&lt;/span&gt;(var1);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; var2;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      } &lt;span style=&#34;color:#66d9ef&#34;&gt;catch&lt;/span&gt; (Exception var6) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;B&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; var6.&lt;span style=&#34;color:#a6e22e&#34;&gt;getMessage&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;0&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;authkey.pub在反编译出的resources目录下，可以通过ASN1editor去看看公钥&lt;/p&gt;</description>
    </item>
    <item>
      <title>红队基础设施建设与改造（三）——武装你的Burpsuite（下）</title>
      <link>https://yaphetszz.github.io/posts/%E7%BA%A2%E9%98%9F%E5%9F%BA%E7%A1%80%E8%AE%BE%E6%96%BD%E5%BB%BA%E8%AE%BE%E4%B8%8E%E6%94%B9%E9%80%A0%E4%B8%89%E4%BC%AA%E8%A3%85%E4%BD%A0%E7%9A%84burpsuite%E4%B8%8B/</link>
      <pubDate>Tue, 12 Jan 2021 04:09:28 +0800</pubDate>
      <guid>https://yaphetszz.github.io/posts/%E7%BA%A2%E9%98%9F%E5%9F%BA%E7%A1%80%E8%AE%BE%E6%96%BD%E5%BB%BA%E8%AE%BE%E4%B8%8E%E6%94%B9%E9%80%A0%E4%B8%89%E4%BC%AA%E8%A3%85%E4%BD%A0%E7%9A%84burpsuite%E4%B8%8B/</guid>
      <description>&lt;p&gt;前两篇文章主要讲了一下Burpsuite的插件，并且介绍了Burpsuite的API，本篇文章主要内容为高级插件的开发。&lt;/p&gt;&#xA;&lt;p&gt;首先在上节内容最后留了一个坑，就是有个报错的问题，其实呢这个问题是我们自己造成的，因为在最后一句写了一个抛出异常的语句，该语句会导致即使没有错误也会报错误，在我们换成如下写法后再编译就不报错了。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml22384/wps1.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml22384/wps2.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml22384/wps3.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;我们接着来写一个带有图形化选项卡的小插件。带有UI的插件在查阅了一些资料后发现需要Java中AWT和Swing的支持，对Java开发较为熟悉的同学开发起来还是很友好的，这里简单科普一下AWT和Swing。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;AWT(Abstract Window Toolkit)，中文译为抽象窗口工具包，该包提供了一套与本地图形界面进行交互的接口，是Java提供的用来建立和设置Java的图形用户界面的基本工具。AWT中的图形函数与操作系统所提供的图形函数之间有着一一对应的关系，称之为peers，当利用AWT编写图形用户界面时，实际上是在利用本地操作系统所提供的图形库。由于不同操作系统的图形库所提供的样式和功能是不一样的，在一个平台上存在的功能在另一个平台上则可能不存在。为了实现Java语言所宣称的“一次编写，到处运行(write once, run anywhere)”的概念，AWT不得不通过牺牲功能来实现平台无关性，也即AWT所提供的图形功能是各种操作系统所提供的图形功能的交集。&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Swing 是一个为Java设计的GUI工具包。Swing是JAVA基础类的一部分。Swing包括了图形用户界面（GUI）器件如：文本框，按钮，分隔窗格和表。&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Swing提供许多比AWT更好的屏幕显示元素。它们用纯Java写成，所以同Java本身一样可以跨平台运行，这一点不像AWT。它们是JFC的一部分。它们支持可更换的面板和主题（各种操作系统默认的特有主题），然而不是真的使用原生平台提供的设备，而是仅仅在表面上模仿它们。这意味着你可以在任意平台上使用JAVA支持的任意面板。轻量级组件的缺点则是执行速度较慢，优点就是可以在所有平台上采用统一的行为。&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;画图的时候我用了Jpanel和Jbutton，用AWT来捕获鼠标事件，实现点击按钮触发事件。通过getTabCaption和getUiComponent给选项卡命名，&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml22384/wps4.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;然后创建界面和按钮jPanelMain = new JPanel();JButton jButton = new JButton(&amp;ldquo;Test Button&amp;rdquo;);&lt;/p&gt;&#xA;&lt;p&gt;加载成功后可以看到上了一个标签&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml22384/wps5.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;以及一个居中的按钮&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml22384/wps6.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;每按一次会输出一个Clicked&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml22384/wps7.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;大致了解了各个API的方法后，我们可以尝试来写一些能够提升我们工作效率的事，首先实现捕获其他模块的消息，以便对消息进行处理。根据官方文档调用以下方法：&lt;/p&gt;&#xA;&lt;p&gt;callbacks.registerHttpListener()&lt;/p&gt;&#xA;&lt;p&gt;注册HTTP监听器&lt;/p&gt;&#xA;&lt;p&gt;callbacks.registerProxyListener()&lt;/p&gt;&#xA;&lt;p&gt;注册Proxy监听器&lt;/p&gt;&#xA;&lt;p&gt;callbacks.registerScannerListener()&lt;/p&gt;&#xA;&lt;p&gt;注册Scanner监听器&lt;/p&gt;&#xA;&lt;p&gt;callbacks.registerExtensionStateListener()&lt;/p&gt;&#xA;&lt;p&gt;注册ExtensionState监听器&lt;/p&gt;&#xA;&lt;p&gt;callbacks.registerScopeChangeListener()&lt;/p&gt;&#xA;&lt;p&gt;注册ScopeChangeListener监听器&lt;/p&gt;&#xA;&lt;p&gt;首先还是框架的搭建，在公共类BurpExtender中implements所需要调用的接口IBurpExtender, IHttpListener, IProxyListener, IScannerListener, IExtensionStateListener, IScopeChangeListener，引入接口后需要再进行方法重写，不然会报错&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml22384/wps8.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;根据文档补全接口内容，写上对应的输出&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml22384/wps9.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;编译后加载插件，此时可以看到输出是空白的，因为该插件用于捕获数据，&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml22384/wps10.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;我们打开Proxy拦截后访问几个网页，在历史中已经记录了很多数据&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml22384/wps11.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;再来看我们的插件输出窗口，输出了大量的日志&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml22384/wps12.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;如果觉得Burpsuite自带的分析工具不好用的话可以直接通过这个插件将捕获到的事件进行输出，只需要在插件控制的输出页面选择保存到文件即可&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml22384/wps13.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;该插件的完整代码如下：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;package&lt;/span&gt; burp;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; java.io.PrintWriter;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;BurpExtender&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;implements&lt;/span&gt; IBurpExtender, IHttpListener, &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;​&lt;/span&gt;    IProxyListener, IScannerListener, IExtensionStateListener, IScopeChangeListener&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; IBurpExtenderCallbacks callbacks;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; PrintWriter stdout;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;registerExtenderCallbacks&lt;/span&gt;(IBurpExtenderCallbacks callbacks)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;​&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;callbacks&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; callbacks;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;​&lt;/span&gt;    callbacks.&lt;span style=&#34;color:#a6e22e&#34;&gt;setExtensionName&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Advanced Event Listener&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;​&lt;/span&gt;    stdout &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; PrintWriter(callbacks.&lt;span style=&#34;color:#a6e22e&#34;&gt;getStdout&lt;/span&gt;(), &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;​&lt;/span&gt;    callbacks.&lt;span style=&#34;color:#a6e22e&#34;&gt;registerHttpListener&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;​&lt;/span&gt;    callbacks.&lt;span style=&#34;color:#a6e22e&#34;&gt;registerProxyListener&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;​&lt;/span&gt;    callbacks.&lt;span style=&#34;color:#a6e22e&#34;&gt;registerScannerListener&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;​&lt;/span&gt;    callbacks.&lt;span style=&#34;color:#a6e22e&#34;&gt;registerScopeChangeListener&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;​&lt;/span&gt;    callbacks.&lt;span style=&#34;color:#a6e22e&#34;&gt;registerExtensionStateListener&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;processHttpMessage&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; toolFlag, &lt;span style=&#34;color:#66d9ef&#34;&gt;boolean&lt;/span&gt; messageIsRequest, IHttpRequestResponse messageInfo)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;​&lt;/span&gt;    stdout.&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;(&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;​&lt;/span&gt;        (messageIsRequest &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;HTTP request to &amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;HTTP response from &amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;​&lt;/span&gt;        messageInfo.&lt;span style=&#34;color:#a6e22e&#34;&gt;getHttpService&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;​&lt;/span&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; [&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; callbacks.&lt;span style=&#34;color:#a6e22e&#34;&gt;getToolName&lt;/span&gt;(toolFlag) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;]&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;processProxyMessage&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;boolean&lt;/span&gt; messageIsRequest, IInterceptedProxyMessage message)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;​&lt;/span&gt;    stdout.&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;(&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;​&lt;/span&gt;        (messageIsRequest &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Proxy request to &amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Proxy response from &amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;​&lt;/span&gt;        message.&lt;span style=&#34;color:#a6e22e&#34;&gt;getMessageInfo&lt;/span&gt;().&lt;span style=&#34;color:#a6e22e&#34;&gt;getHttpService&lt;/span&gt;());&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;newScanIssue&lt;/span&gt;(IScanIssue issue)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;​&lt;/span&gt;    stdout.&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;New scan issue: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; issue.&lt;span style=&#34;color:#a6e22e&#34;&gt;getIssueName&lt;/span&gt;());&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;extensionUnloaded&lt;/span&gt;()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;​&lt;/span&gt;    stdout.&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Extension was unloaded&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;scopeChanged&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;​&lt;/span&gt;    stdout.&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ScopeChanged!&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;其实带有图形化的插件和正常的Java程序差不多，开发过程也就和Java差不多，我们再来看看添加右键菜单。效果如下图所示：&lt;/p&gt;</description>
    </item>
    <item>
      <title>红队基础设施建设与改造（三）——武装你的Burpsuite（中）</title>
      <link>https://yaphetszz.github.io/posts/%E7%BA%A2%E9%98%9F%E5%9F%BA%E7%A1%80%E8%AE%BE%E6%96%BD%E5%BB%BA%E8%AE%BE%E4%B8%8E%E6%94%B9%E9%80%A0%E4%B8%89%E6%AD%A6%E8%A3%85%E4%BD%A0%E7%9A%84burpsuite%E4%B8%AD/</link>
      <pubDate>Fri, 08 Jan 2021 11:25:18 +0800</pubDate>
      <guid>https://yaphetszz.github.io/posts/%E7%BA%A2%E9%98%9F%E5%9F%BA%E7%A1%80%E8%AE%BE%E6%96%BD%E5%BB%BA%E8%AE%BE%E4%B8%8E%E6%94%B9%E9%80%A0%E4%B8%89%E6%AD%A6%E8%A3%85%E4%BD%A0%E7%9A%84burpsuite%E4%B8%AD/</guid>
      <description>&lt;p&gt;&lt;strong&gt;本文所述的一切技术仅供网络安全研究学习之用，请勿用于任何的违法用途，否则由此所产生的一切后果自负！&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;Burp的基础插件安装已经在上一篇文章中讲了，本篇主要讲BP插件的开发，毕竟别人的东西用起来还是自己写的香。本来这篇文章是准备全写完再发出来，但是发现内容真的有亿点点多还是决定拆一下。&lt;/p&gt;&#xA;&lt;p&gt;BP插件的开发语言支持Java和Python，由于BP本来就是Java开发的所以对Java的插件支持也更好，我们在后面的文章中JAVA开发和Python开发都会讲到。在找了半天资料后发现官方给出了一个&lt;a href=&#34;https://portswigger.net/burp/extender/api/index.html&#34;&gt;链接&lt;/a&gt;,这个连接中的文档描述了各种编写规则&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml20628/wps86.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;还给出了一些&lt;a href=&#34;https://portswigger.net/burp/extender/&#34;&gt;实例&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;首先来讲讲BP开发的基础，了解一下API，来解读一下官方文档&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml20628/wps87.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;第一个Interface IBurpCollaboratorClientContext&lt;/p&gt;&#xA;&lt;p&gt;这个接口用于生成payload并与collaborator服务器交互，通过轮询来得到网络交互的数据包。该类接口包含有以下方法，可以接收返回，生成payload，得到collaborator服务器地址等&lt;/p&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;Modifier and Type&lt;/th&gt;&#xA;          &lt;th&gt;Method and Description&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;java.util.List&amp;lt;&lt;a href=&#34;https://portswigger.net/burp/extender/api/burp/IBurpCollaboratorInteraction.html&#34;&gt;IBurpCollaboratorInteraction&lt;/a&gt;&amp;gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;a href=&#34;#fetchAllCollaboratorInteractions()&#34;&gt;fetchAllCollaboratorInteractions&lt;/a&gt;() This method is used to retrieve all interactions received by the Collaborator server resulting from payloads that were generated for this context.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;java.util.List&amp;lt;&lt;a href=&#34;https://portswigger.net/burp/extender/api/burp/IBurpCollaboratorInteraction.html&#34;&gt;IBurpCollaboratorInteraction&lt;/a&gt;&amp;gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;a href=&#34;#fetchAllInfiltratorInteractions()&#34;&gt;fetchAllInfiltratorInteractions&lt;/a&gt;() This method is used to retrieve all interactions made by Burp Infiltrator instrumentation resulting from payloads that were generated for this context.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;java.util.List&amp;lt;&lt;a href=&#34;https://portswigger.net/burp/extender/api/burp/IBurpCollaboratorInteraction.html&#34;&gt;IBurpCollaboratorInteraction&lt;/a&gt;&amp;gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;a href=&#34;#fetchCollaboratorInteractionsFor(java.lang.String)&#34;&gt;fetchCollaboratorInteractionsFor&lt;/a&gt;(java.lang.String payload) This method is used to retrieve interactions received by the Collaborator server resulting from a single payload that was generated for this context.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;java.util.List&amp;lt;&lt;a href=&#34;https://portswigger.net/burp/extender/api/burp/IBurpCollaboratorInteraction.html&#34;&gt;IBurpCollaboratorInteraction&lt;/a&gt;&amp;gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;a href=&#34;#fetchInfiltratorInteractionsFor(java.lang.String)&#34;&gt;fetchInfiltratorInteractionsFor&lt;/a&gt;(java.lang.String payload) This method is used to retrieve interactions made by Burp Infiltrator instrumentation resulting from a single payload that was generated for this context.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;java.lang.String&lt;/td&gt;&#xA;          &lt;td&gt;&lt;a href=&#34;#generatePayload(boolean)&#34;&gt;generatePayload&lt;/a&gt;(boolean includeCollaboratorServerLocation) This method is used to generate new Burp Collaborator payloads.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;java.lang.String&lt;/td&gt;&#xA;          &lt;td&gt;&lt;a href=&#34;#getCollaboratorServerLocation()&#34;&gt;getCollaboratorServerLocation&lt;/a&gt;() This method is used to retrieve the network location of the Collaborator server.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml20628/wps88.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>红队基础设施建设与改造（三）——武装你的Burpsuite（上）</title>
      <link>https://yaphetszz.github.io/posts/%E7%BA%A2%E9%98%9F%E5%9F%BA%E7%A1%80%E8%AE%BE%E6%96%BD%E5%BB%BA%E8%AE%BE%E4%B8%8E%E6%94%B9%E9%80%A0%E4%B8%89%E6%AD%A6%E8%A3%85%E4%BD%A0%E7%9A%84burpsuite%E4%B8%8A/</link>
      <pubDate>Wed, 16 Dec 2020 11:04:32 +0800</pubDate>
      <guid>https://yaphetszz.github.io/posts/%E7%BA%A2%E9%98%9F%E5%9F%BA%E7%A1%80%E8%AE%BE%E6%96%BD%E5%BB%BA%E8%AE%BE%E4%B8%8E%E6%94%B9%E9%80%A0%E4%B8%89%E6%AD%A6%E8%A3%85%E4%BD%A0%E7%9A%84burpsuite%E4%B8%8A/</guid>
      <description>&lt;p&gt;&lt;strong&gt;本文所述的一切技术仅供网络安全研究学习之用，请勿用于任何的违法用途，否则由此所产生的一切后果自负！&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;Burpsuite作为抓包利器，深受安全人员的喜爱。免费的community版本只有非常少的一些功能，而很多功能都在Pro版中，虽然基础功能都能实现，但是Burpsuite就是以强大的模块化拓展功能著称，就像常见的Goby, CS 和蚁剑等工具都非常适合模块化的拓展开发。如此强大的神器在不同版本究竟有什么差异呢，我们先来官网看一看。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml20628/wps38.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;可以看到企业版卖到了3999刀一年，而正常情况下的专业版也是399刀一年。其中专业版的功能支持多了Web vulnerability scanner、Advanced manual tools和Essential manual tools。&lt;/p&gt;&#xA;&lt;p&gt;下面是官网给出的功能解释截图，大家自己看一下就好，我懒得翻译了，顺便说一句：一定要好好学英语。我是不会告诉你们我是好几个技术项目的翻译支持的（有合作意向的大佬除外，兼职翻译欢迎小窗。）&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml20628/wps39.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml20628/wps40.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml20628/wps41.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;破解方法网上一搜一大堆，在这里就不多BB了，当然你也可以选择支持正版。下面我们进入正题，开始本篇的重点部分：武装Burpsuite。&lt;/p&gt;&#xA;&lt;p&gt;本篇的介绍环境如下：&lt;/p&gt;&#xA;&lt;p&gt;Burpsuite Pro 2020.7&lt;/p&gt;&#xA;&lt;p&gt;Java 14.0.2 2020-07-14&lt;/p&gt;&#xA;&lt;p&gt;因为新版的Burp好像不支持Java8了，之前用的BP1.7版本还是用的Java8。新版本的Burpsuite反正我觉得界面长的还可以。主界面如下：&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml20628/wps42.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;新增的功能是内置的浏览器，不用再像以前一样测试的时候浏览器和Burp疯狂切换了。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml20628/wps43.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;Burpsuite的武装主要是支持拓展的部分也就是模块化的拓展，在Extender模块部分可以看到当前已安装的拓展，为了演示需要我这边找了一个白板Burp&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml20628/wps44.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;Burp的插件支持本地加载和商店直接下载，我们先来看看商店中的实用拓展：&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml20628/wps45.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;以第一个插件为例，讲讲如何从商店中安装插件，首先选中插件，将右侧栏的滚动条拖到底可以看到install按钮&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml20628/wps46.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;点击install后就开始了安装&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml20628/wps47.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;安装成功后可看到installed栏下勾上了&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml20628/wps48.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;不过这玩意的效果好像比较难演示，效果演示我们就放到后面的内容中去。知道了插件的基础安装过程，接下来就是武装的过程了。&lt;/p&gt;&#xA;&lt;p&gt;以下介绍的插件为我自己Burp中安装的一些常用插件，在渗透测试或挖洞时能让工作方便不少。&lt;/p&gt;&#xA;&lt;h2 id=&#34;hae&#34;&gt;&lt;em&gt;HaE&lt;/em&gt;&lt;/h2&gt;&#xA;&lt;p&gt;2024补充，Key师傅开发的插件，&lt;del&gt;有非常多的策略可以用于各种测试&lt;/del&gt;，总之就是非常牛逼！！！牛逼！！还有不断更新的&lt;a href=&#34;https://raw.githubusercontent.com/gh0stkey/HaE/gh-pages/Rules.yml&#34;&gt;规则库&lt;/a&gt;，&#xA;使用效果如下（图是网上偷的，自己挖的洞太牛逼了就不放了）：&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml20628/1362876-20240520150051446-910956326.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;autorize&#34;&gt;&lt;em&gt;Autorize&lt;/em&gt;&lt;/h2&gt;&#xA;&lt;p&gt;这是一款强大的自动化越权测试工具，在商店中就可以下载。但是这款工具在安装过程中就要开始踩坑了，并不是直接安装就可以的，为了演示还特地起了一台没环境的虚拟机。&lt;/p&gt;&#xA;&lt;p&gt;在这款工具的安装中我们可以看到需要安装Jython，因为该插件通过Python来进行支持，&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml20628/wps49.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;首先去https://www.jython.org/download.html下载jython并安装&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml20628/wps50.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;然后在Option选项中选择刚刚安装的jython路径&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml20628/wps51.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;这时候在进入商店。刷新列表后即可进行安装&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml20628/wps52.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;安装成功后即可在选项卡中看到Autorize&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml20628/wps53.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;在拦截数据包部分可以看到右键选项多了发送到Autorize&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml20628/wps54.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;测试成功的项会变绿，即存在越权&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml20628/wps55.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;autorepeater&#34;&gt;&lt;em&gt;AutoRepeater&lt;/em&gt;&lt;/h2&gt;&#xA;&lt;p&gt;这款工具和上述的差不多，都可以直接在Burp的插件商店里找到。安装完成后的效果和之前的差不多，会多一个选项卡&lt;/p&gt;&#xA;&lt;p&gt;可以把这个插件当做高级版的Repeater&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml20628/wps56.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;同样通过右键发送到插件&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml20628/wps57.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;可以在右边自定义一些过滤规则，在大批量发包的时候就不用一个个手工替换会方便很多。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml20628/wps58.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;并且在多样化的规则中，这个工具同样可以测试越权，支持替换的cookie部分很多&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml20628/wps59.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>红队基础设施建设与改造（二）——深入理解sqlmap(下)</title>
      <link>https://yaphetszz.github.io/posts/%E7%BA%A2%E9%98%9F%E5%9F%BA%E7%A1%80%E8%AE%BE%E6%96%BD%E5%BB%BA%E8%AE%BE%E4%B8%8E%E6%94%B9%E9%80%A0%E4%BA%8C%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3sqlmap%E4%B8%8B/</link>
      <pubDate>Thu, 10 Dec 2020 02:11:09 +0800</pubDate>
      <guid>https://yaphetszz.github.io/posts/%E7%BA%A2%E9%98%9F%E5%9F%BA%E7%A1%80%E8%AE%BE%E6%96%BD%E5%BB%BA%E8%AE%BE%E4%B8%8E%E6%94%B9%E9%80%A0%E4%BA%8C%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3sqlmap%E4%B8%8B/</guid>
      <description>&lt;p&gt;&lt;strong&gt;本文所述的一切技术仅供网络安全研究学习之用，请勿用于任何的违法用途，否则由此所产生的一切后果自负！&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;在上篇中我们分析了sqlmap的部分检测逻辑，接下来介绍之前没讲完的部分，并且填上tamper这个坑。&lt;/p&gt;&#xA;&lt;p&gt;我们继续来分析盲注的逻辑，上篇分析的布尔型盲注，本篇分析时间盲注。&lt;/p&gt;&#xA;&lt;p&gt;还是拿靶场说事，先进行正常输入，可以看到相应时间，并且返回为I don’t care who you are.&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml20628/wps1.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;再来随便测试几个其他的输入，返回均为I don’t care who you are.即使输入特殊字符产生了错误也不会改变，在靶场中我们知道这是一个时间型盲注，但是在实战中可能往往想不到，那如何来验证是时间型盲注呢，这就需要用到sleep函数，sleep函数用于使查询延迟执行，我们可以在navicat中做样例演示，可以看到同样的一条select 123;语句执行时间不同&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml20628/wps2.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;所以针对时间型盲注，要判断我们的输入是否执行，只需要加上sleep函数即可，在浏览器的开发人员工具的网络选项卡中，通过瀑布流的形式我们可以看到请求的时间，以下为输入lucy’and sleep (5)#的执行结果，可以看到执行时间超过了五秒&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml20628/wps3.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;那是否所有的操作都会延迟呢，我们来试试输入一串明显报错的payload，在跟上了一串的单引号后可以看到请求时间明显缩短，说明payload未执行。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml20628/wps4.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;根据之前布尔盲注的经验，我们同样可以进行判断，通过if语句判断为真才执行sleep语句，效果如下：&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml20628/wps5.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;我们所使用的payload为lucy&amp;rsquo; and if ((substr(version(),1,1))=&amp;lsquo;5&amp;rsquo;,sleep(5),null)#&lt;/p&gt;&#xA;&lt;p&gt;sqlmap中的时间盲注就比较简单了，代码如下：&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml20628/wps6.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;这边看似简单是因为sqlmap使用了响应延迟判断技术，该种技术使用了前文提到的高斯分布，高斯分布可以识别一个响应是否与普通响应产生于一种机制。在sqlmap的xml文件中包含了各种攻击向量，其中常见的向量为&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml20628/wps7.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;我们在案例中的测试也使用了其中一个向量，成功的向量如下图所示&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml20628/wps8.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;接下来我们具体分析一下数据包，以下为攻击完整过程的截图&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml20628/wps9.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;接下来就是紧张刺激的payload分析了，看看wireshark抓到的数据包，由于之前进行了大量其他测试，我们只需要分析time-based Injection即可。追踪到的第一个包是eq50分片&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml20628/wps10.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;url经过转码后如下：&lt;/p&gt;&#xA;&lt;p&gt;/pikachu/vul/sqli/sqli_blind_t.php?name=123&amp;rsquo; AND (SELECT 1671 FROM (SELECT(SLEEP(5)))GSuc) AND &amp;lsquo;sRRR&amp;rsquo;=&amp;lsquo;sRRR&amp;amp;submit=查询&lt;/p&gt;&#xA;&lt;p&gt;此时控制台输出进行了两次询问，因为sqlmap疑似发现存在注入&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml20628/wps11.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;在这之前还有两次和上述相同的发包，应该是用于响应检测。之后就是一系列UNION select的探测，对应的是包含了orderby等参数，与控制台对应输出相同，即1-20列探测。&lt;/p&gt;&#xA;&lt;p&gt;从77组开始请求地址改变，根据之前的分析此时应该进入了误报检测&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml20628/wps12.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;以下记录为77开始的payload&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;name&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;123&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; AND (SELECT 3753 FROM (SELECT(SLEEP(5-(IF(57=57,0,5)))))Ndjp) AND &amp;#39;&lt;/span&gt;HxIh&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;=&amp;#39;&lt;/span&gt;HxIh&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;name&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;123&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; AND (SELECT 5365 FROM (SELECT(SLEEP(5-(IF(57=65,0,5)))))irpj) AND &amp;#39;&lt;/span&gt;YVSA&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;=&amp;#39;&lt;/span&gt;YVSA&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;name&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;123&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; AND (SELECT 7844 FROM (SELECT(SLEEP(5-(IF(57=98,0,5)))))lPgR) AND &amp;#39;&lt;/span&gt;YJgx&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;=&amp;#39;&lt;/span&gt;YJgx&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;name&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;123&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; AND (SELECT 9479 FROM (SELECT(SLEEP(5-(IF(98=65,0,5)))))ZaRe) AND &amp;#39;&lt;/span&gt;kXSW&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;=&amp;#39;&lt;/span&gt;kXSW&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;name&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;123&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; AND (SELECT 6042 FROM (SELECT(SLEEP(5-(IF(65=65,0,5)))))OReg) AND &amp;#39;&lt;/span&gt;EOyg&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;=&amp;#39;&lt;/span&gt;EOyg&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;name&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;123&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; AND (SELECT 9179 FROM (SELECT(SLEEP(5-(IF(98 65,0,5)))))GkMV) AND &amp;#39;&lt;/span&gt;vZOZ&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;=&amp;#39;&lt;/span&gt;vZOZ&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;而从85组开始又出现了新的变化&lt;/p&gt;</description>
    </item>
    <item>
      <title>红队基础设施建设与改造（二）——深入理解sqlmap(上)</title>
      <link>https://yaphetszz.github.io/posts/%E7%BA%A2%E9%98%9F%E5%9F%BA%E7%A1%80%E8%AE%BE%E6%96%BD%E5%BB%BA%E8%AE%BE%E4%B8%8E%E6%94%B9%E9%80%A0%E4%BA%8C%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3sqlmap%E4%B8%8A/</link>
      <pubDate>Wed, 02 Dec 2020 08:54:33 +0800</pubDate>
      <guid>https://yaphetszz.github.io/posts/%E7%BA%A2%E9%98%9F%E5%9F%BA%E7%A1%80%E8%AE%BE%E6%96%BD%E5%BB%BA%E8%AE%BE%E4%B8%8E%E6%94%B9%E9%80%A0%E4%BA%8C%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3sqlmap%E4%B8%8A/</guid>
      <description>&lt;p&gt;&lt;strong&gt;本文所述的一切技术仅供网络安全研究学习之用，请勿用于任何的违法用途，否则由此所产生的一切后果自负！&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;上一篇文章我们写了Nmap的分析与改造，本篇将继续分析炙手可热的工具sqlmap。这篇文章介绍的修改的东西不多，针对sqlmap的分析较多。剖析了sqlmap的大部分功能点和所有的检测逻辑，同时还会讲到tamper的分析以及tamper的编写。由于篇幅较长，为了避免大家看着难受，准备分为上下两篇来写。&lt;/p&gt;&#xA;&lt;p&gt;首先我们通过靶场环境构造漏洞场景，靶场为pikachu，github地址为：&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/zhuifengshaonianhanlu/pikachu&#34;&gt;https://github.com/zhuifengshaonianhanlu/pikachu&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;进入存在注入漏洞的页面&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml11944/wps1.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;进行抓包&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml11944/wps2.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;丢进sqlmap可以看到能跑出结果&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml11944/wps3.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;进行一次完整的过程时监听流量并筛选&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml11944/wps4.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;在流量中我们可以很明显地发现会产生一长串的请求，筛选一下POST请求就能看到发送的payload&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml11944/wps5.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;这是简单的sqlmap发包内容，我们继续深入。&lt;/p&gt;&#xA;&lt;p&gt;很多人可能只了解了sqlmap的用法，甚至都不了解用法，参数只会-u -r &amp;ndash;level –risk几个，偶尔看了大佬的文章知道了&amp;ndash;tamper但是并不了解原理。接下来就给大家从多个方面来解析一下sqlmap这款神器。&lt;/p&gt;&#xA;&lt;p&gt;首先来看看针对靶场进行测试时的输出&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml11944/wps6.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;第一行进行了包格式判断，如果无法识别将直接弹出错误并推出；接下来进行了连接测试，测试到目标的连接情况；然后进行WAF和IPS检测；再判断目标是否稳定；之后进行参数的动态性检测，启发式参数（xss等）测试；之后就开始了对包中可能存在的注入点的检测。&lt;/p&gt;&#xA;&lt;p&gt;我们对sqlmap的代码进行跟踪，首先第一环节为连接测试部分，对应代码在checks.py文件中&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml11944/wps7.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;判断目标连接存活后开始进入下一环节，IPS和WAF的探测，核心代码也位于checks.py中，可以看到其中参考了http://seclists.org/nmap-dev/2011/q2/att-1005/http-waf-detect.nse&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml11944/wps8.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;上面的参考链接是一个Nmap的脚本，也是我们上一篇文章中所说的，不过上一篇文章没有对NSE脚本的开发做深入介绍（下次一定补上。下次一定！）&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml11944/wps9.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;先来看一下脚本，我们发现主要是通过如下定义的两个攻击向量来进行检测的&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml11944/wps10.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;上述的攻击向量包含了大多数常见的攻击类型，可以看到有目录穿越，敏感文件读取，SQL注入，PHP代码执行，XSS等方式，通常这几种payload会触发几乎所有防护软件的策略。可以看到在sqlmap中，payload也做了定义，定义在/lib/core/settings.py文件中，跟踪变量后可以看到其中的payload，与NSE脚本中的攻击向量相差无几。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml11944/wps11.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;判断完WAF后就是对稳定性的检测，代码还是在checks.py中&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml11944/wps12.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;该方式主要通过请求时间判断，在开头的注释中写道两次请求页面，判断不同请求的时间，而这个时间变量在跟踪后得到DELAY值超过0.5时即返回不稳定&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml11944/wps13.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;启发式注入检测处于heuristicCheckSqlInjection方法中，启发式注入过程中，payload生成是由,&amp;rsquo;&amp;quot;().六种字符随机组成的长度为10的字符串，同时满足&amp;rsquo;和&amp;quot;都只有一个。启发式注入的目的就是让Web应用报错，如果Web应用开启了错误回显，就可以快速识别DBMS（正则匹配）。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml11944/wps14.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;接下来针对具体场景进行分析，我们在该案例之前的靶场中，具有如下显示，可以看到正常发包时正常回显，&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml11944/wps15.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;输入and 1=1以及and 1=2的测试判断是否存在注入&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml11944/wps16.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml11944/wps17.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;继续输入payload，进行列数判断&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml11944/wps18.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml11944/wps19.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;通过union select 1,2判断输出位置&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml11944/wps20.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;进一步获取数据（省略了爆表列名和字段名的操作）&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml11944/wps21.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;该种方式为union注入，是sqlmap中判断较为复杂的一种，因为脚本需要完成order by探测列数，select 判断列数，union select 1,2,&amp;hellip;判断输出位置，我们从代码来看sqlmap的UNION select检测逻辑，在checks.py中&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml11944/wps22.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;跟进函数后发现检测文件位于/lib/techniques/union中&lt;/p&gt;&#xA;&lt;p&gt;列数判断，即order by判断&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml11944/wps23.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;之后进行select null判断列数，&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml11944/wps24.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;在进行该判断时经查sqlmap使用了网页相似度对比技术和高斯分布&lt;/p&gt;&#xA;&lt;p&gt;select null列数探测技术在进行时，会首先指定列数猜测过程中的最大值与最小值（指定列数 最少/最小值 为1，最多/最大值 为10），sqlmap会同时发送10个数据包，包含1个NULL至10个NULL，取回10个包的响应后进行网页相似度分析，并获取网页相似度数值（共10个，非True/False）。在这10个数值中，如果select null列数探测成功，那么成功那个响应的网页相似度数值只可能是最大值或者最小值。对10个数值中去除最大值和最小值后，留下8个值，可以认为，这8个值都是列数猜测不成功返回的响应，对这个8个数据进行高斯分布建模，得出的模型就是列数猜测不成功的模型。现在使用最大值或者最小值来计算是否符合这个不成功的模型，如果符合，说明这个数据也是列数猜测不成功的响应，如果不符合，说明这个数据也是列数猜测成功的响应。&lt;/p&gt;</description>
    </item>
    <item>
      <title>红队基础设施建设与改造（一）——Nmap解析与改造</title>
      <link>https://yaphetszz.github.io/posts/%E7%BA%A2%E9%98%9F%E5%9F%BA%E7%A1%80%E8%AE%BE%E6%96%BD%E5%BB%BA%E8%AE%BE%E4%B8%8E%E6%94%B9%E9%80%A0%E4%B8%80nmap%E8%A7%A3%E6%9E%90%E4%B8%8E%E6%94%B9%E9%80%A0/</link>
      <pubDate>Fri, 27 Nov 2020 01:30:09 +0800</pubDate>
      <guid>https://yaphetszz.github.io/posts/%E7%BA%A2%E9%98%9F%E5%9F%BA%E7%A1%80%E8%AE%BE%E6%96%BD%E5%BB%BA%E8%AE%BE%E4%B8%8E%E6%94%B9%E9%80%A0%E4%B8%80nmap%E8%A7%A3%E6%9E%90%E4%B8%8E%E6%94%B9%E9%80%A0/</guid>
      <description>&lt;p&gt;&lt;strong&gt;本文所述的一切技术仅供网络安全研究学习之用，请勿用于任何的违法用途，否则由此所产生的一切后果自负！&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;所谓工欲善其事必先利其器，渗透过程同样如此，虽然大部分人的目标并不是想当一个脚本小子，甚至身边有不少朋友“不屑”用别人的工具非要自己写。然后就是各种抱怨：&lt;/p&gt;&#xA;&lt;p&gt;“我X，扫描器又挂了！”“这个注入为什么我这个工具跑不出来”“怎么TM又超时了”“日，我IP又被ban了”这时候就开始真香了，自己写的全丢了，简历开头阿D明小子样样精通，实际项目里上来就是nmap，sqlmap一把梭，上了shell就是菜刀蚁剑直接连。&lt;/p&gt;&#xA;&lt;p&gt;但是实际渗透过程当中，在针对大型目标的测试中可能并不一定好使，目标系统部署着IPS，IDS直接就可以识别常规扫描器，攻击工具的连接。&lt;/p&gt;&#xA;&lt;p&gt;今天的第一篇基础设施的改造，就是我们非常常见的Nmap，nmap是一款优秀的端口扫描工具，同时内部集成了非常多的NSE脚本，在全球开源贡献者和安全人员的努力下集成的脚本越来越多，可以实现的特定设备扫描方式也越来越多，支持的漏洞种类也越来越全面，甚至有的漏洞可以实现端口扫描-&amp;gt;服务探测-&amp;gt;漏洞验证-&amp;gt;漏洞利用-&amp;gt;提权一条龙的操作，是一款非常优秀的工具。在官方wiki中的解释如下：&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Nmap (Network Mapper) is a free and open-source network scanner created by Gordon Lyon (also known by his pseudonym Fyodor Vaskovich).[3] Nmap is used to discover hosts and services on a computer network by sending packets and analyzing the responses. &#xD;&#xA;Nmap provides a number of features for probing computer networks, including host discovery and service and operating system detection. These features are extensible by scripts that provide more advanced service detection,[4] vulnerability detection,[4] and other features. Nmap can adapt to network conditions including latency and congestion during a scan. &#xD;&#xA;Nmap started as a Linux utility[5] and was ported to other systems including Windows, macOS, and BSD.[6] It is most popular on Linux, followed by Windows.[7] &#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;毕竟树大招风，现在越来越多的流量审计，IDS等设备都已经将Nmap的流量特征列入了重点监测对象。因此对流量的改造问题亟待解决，其中互联网上就有一份公开的流量特征检测规则样例，地址为：https://doc.emergingthreats.net/&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
