<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>蓝队技术 on Y4ph3tS blog</title>
    <link>https://yaphetszz.github.io/tags/%E8%93%9D%E9%98%9F%E6%8A%80%E6%9C%AF/</link>
    <description>Recent content in 蓝队技术 on Y4ph3tS blog</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Tue, 06 Dec 2022 02:13:01 +0800</lastBuildDate>
    <atom:link href="https://yaphetszz.github.io/tags/%E8%93%9D%E9%98%9F%E6%8A%80%E6%9C%AF/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>CS反制浅析——从伪装上线到RCE</title>
      <link>https://yaphetszz.github.io/posts/cs%E5%8F%8D%E5%88%B6%E6%B5%85%E6%9E%90%E4%BB%8E%E4%BC%AA%E8%A3%85%E4%B8%8A%E7%BA%BF%E5%88%B0rce/</link>
      <pubDate>Tue, 06 Dec 2022 02:13:01 +0800</pubDate>
      <guid>https://yaphetszz.github.io/posts/cs%E5%8F%8D%E5%88%B6%E6%B5%85%E6%9E%90%E4%BB%8E%E4%BC%AA%E8%A3%85%E4%B8%8A%E7%BA%BF%E5%88%B0rce/</guid>
      <description>&lt;h1 id=&#34;cs反制浅析从伪装上线到rce&#34;&gt;CS反制浅析——从伪装上线到RCE&lt;/h1&gt;&#xA;&lt;p&gt;文章不是一个时间段写的（主要内容都是好多年前写的，用的版本比较旧，后面一部分代码截图分析用的新版本，看核心逻辑一样就懒得找老版本了），截图使用的版本有些乱，因为现在准备发的时候发现之前的图有点问题，重新复现或者分析截一下，反正原理是一样的，核心没有变，不要在意细节。本文仅用作安全技术研究。&lt;/p&gt;&#xA;&lt;h2 id=&#34;cs流量分析&#34;&gt;CS流量分析&lt;/h2&gt;&#xA;&lt;p&gt;通过CS上线，抓包并筛选HTTP流量&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../fakecs/AI13EcDdLlElcfSviBXNooiZkJbJJasiKdqn-2HoTRU.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;定位到上线的包，里面包含cookie，cookie即为加密字段&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../fakecs/1HXst4CcPDxnU6oqd4Wd-M4Dtj1wcRAWDk3eCKA4m6I.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;分析逆向后的CobaltStrike源码，定位到BeaconHTTP类中的Beacon Entry&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../fakecs/skB0MMvnnIK4Hph5Ijv7A-7AB5hsYd4OHqpaND8gB8s.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;继续跟进到C2Beacon类，BeaconEntry入口点在此处进行定义&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../fakecs/BAT6eLZ2kG7wA-971kccfMEnVRCDX_d7l02dVAI_cFc.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;继续跟进AsymmetricCrypto方法后进入AsymmetricCrypto类，其中是一个明显的RSA加密，模式未ECB，填充方式为PKCS1&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../fakecs/l8TljA7bgkhS2Myu4n4tpU1PnQF1Pg5JuOAwp-WnDIQ.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;继续往下跟到decrypt方法，RSA的解密需要调用私钥&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../fakecs/UeXzc4yjPBaJubWXmOwV23B-aBybT1ZBg-zZGHePSdw.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;回到BeaconC2类，其中对asecurity变量的赋值只有再setCrypto方法中存在&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../fakecs/b-L_P1_7hxEsjsuFefAcNd06zbIzUmmdGVp1iXqCSlo.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;使用IDEA全局搜索功能定位调用的文件，出现在BeaconSetup类中&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../fakecs/yiqaoFiRAr-tsiLrVmSSCotn9gZohWqsAZEybF0_qwU.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../fakecs/QHJj1F5GyqLnL-t4PuYlgKS1SQOZ8WnuQJq3qq9HLqU.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;继续跟传入的参var2，var2的值来自beacon_asymmetric()方法，这个方法在同个类中定义，这其中的关键就是.cobaltstrike.beacon_keys&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../fakecs/mte_kFVY_Bisq2X6ZYuAvhYYzqTDKQQXj5ysAU0Xkrc.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;这个文件在cs运行目录下也能找到，是beacon的key文件，通常情况下通过一些工具就可以解析公钥，比如GitHub上的CobaltStrikeParser能解析默认配置下的stage信息&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../fakecs/oug1LIjpBoKssjcuMO7iw4rfVORZzk8PFb1fYUDuUXE.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;要取得私钥需要通过一些方法，根据上面的代码，编写一个工具类用于提取私钥，这个代码很多人都写过，直接拿大佬写完的也行&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; java.io.File;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; java.util.Base64;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; common.CommonUtils;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; java.security.KeyPair;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;DumpKeys&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{   &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(String&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; args)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            File file &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; File(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.cobaltstrike.beacon_keys&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (file.&lt;span style=&#34;color:#a6e22e&#34;&gt;exists&lt;/span&gt;()) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                KeyPair keyPair &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (KeyPair)CommonUtils.&lt;span style=&#34;color:#a6e22e&#34;&gt;readObject&lt;/span&gt;(file, &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                System.&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Private Key: %s\n\n&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; String(Base64.&lt;span style=&#34;color:#a6e22e&#34;&gt;getEncoder&lt;/span&gt;().&lt;span style=&#34;color:#a6e22e&#34;&gt;encode&lt;/span&gt;(keyPair.&lt;span style=&#34;color:#a6e22e&#34;&gt;getPrivate&lt;/span&gt;().&lt;span style=&#34;color:#a6e22e&#34;&gt;getEncoded&lt;/span&gt;())));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                System.&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Public Key: %s\n\n&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; String(Base64.&lt;span style=&#34;color:#a6e22e&#34;&gt;getEncoder&lt;/span&gt;().&lt;span style=&#34;color:#a6e22e&#34;&gt;encode&lt;/span&gt;(keyPair.&lt;span style=&#34;color:#a6e22e&#34;&gt;getPublic&lt;/span&gt;().&lt;span style=&#34;color:#a6e22e&#34;&gt;getEncoded&lt;/span&gt;())));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                System.&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Could not find .cobaltstrike.beacon_keys file&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;catch&lt;/span&gt; (Exception exception) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           System.&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Could not read asymmetric keys&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;使用此代码读取beacon_keys即可进行解密，运行前需设置classpath为cs的jar包文件&lt;/p&gt;</description>
    </item>
    <item>
      <title>浅析红蓝对抗中的蜜罐与虚拟机识别技术</title>
      <link>https://yaphetszz.github.io/posts/%E6%B5%85%E6%9E%90%E7%BA%A2%E8%93%9D%E5%AF%B9%E6%8A%97%E4%B8%AD%E7%9A%84%E8%9C%9C%E7%BD%90%E4%B8%8E%E8%99%9A%E6%8B%9F%E6%9C%BA%E8%AF%86%E5%88%AB%E6%8A%80%E6%9C%AF/</link>
      <pubDate>Mon, 15 Mar 2021 09:08:11 +0800</pubDate>
      <guid>https://yaphetszz.github.io/posts/%E6%B5%85%E6%9E%90%E7%BA%A2%E8%93%9D%E5%AF%B9%E6%8A%97%E4%B8%AD%E7%9A%84%E8%9C%9C%E7%BD%90%E4%B8%8E%E8%99%9A%E6%8B%9F%E6%9C%BA%E8%AF%86%E5%88%AB%E6%8A%80%E6%9C%AF/</guid>
      <description>&lt;p&gt;&lt;strong&gt;本文所述的一切技术仅供网络安全研究学习之用，请勿用于任何的违法用途，否则由此所产生的一切后果自负！&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;蜜罐简介&#34;&gt;蜜罐简介&lt;/h2&gt;&#xA;&lt;p&gt;在以前，蜜罐是用来抓熊的。通过伪装成“食物”引诱熊前来享用，最后猎人再将熊一举拿下。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../img/a1.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;到了今天，蜜罐技术已经成为网络安全中的一种入侵诱饵，目的是引诱黑客前来攻击，并收集黑客相关的证据和信息。所以蜜罐存在的意义就是——被攻击、被探测、被攻陷&amp;hellip;&lt;/p&gt;&#xA;&lt;p&gt;根据部署方式，蜜罐可能被归类为：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;**生产蜜罐：**易于使用，仅捕获有限的信息，主要由公司使用。生产蜜罐被组织放置在生产网络内与其他生产服务器一起，以改善其整体安全状态。通常生产蜜罐是低交互蜜罐，更易于部署。与研究蜜罐相比，它们提供的攻击或攻击者信息较少。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;**研究蜜罐：**是为了收集有关针对不同网络的黑客社区的动机和策略的信息。这些蜜罐不会为特定组织增加直接价值; 相反，它们用于研究组织面临的威胁，并学习如何更好地防范这些威胁。研究蜜罐的部署和维护非常复杂，可以捕获大量信息，主要用于研究、军事或政府组织。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;目前红蓝对抗中使用的研究型蜜罐偏多，可以记录详细的信息以用于溯源&lt;/p&gt;&#xA;&lt;p&gt;蜜罐产品分类多样，功能也是各不相同，目前市场上常见的蜜罐非常多，商用成型的蜜罐产品随便一搜都有几十款之多。蜜罐从设计标准上来说分为纯蜜罐，高交互蜜罐，低交互蜜罐&lt;/p&gt;&#xA;&lt;p&gt;目前来看多数蜜罐为低交互蜜罐，优秀的产品均向高交互蜜罐方向发展，但是由于一些原因导致部分高交互蜜罐容易出现问题，可以被非常方便地检测出来。&lt;/p&gt;&#xA;&lt;p&gt;纯蜜罐通常来说只存在大量特征，用于单纯地应对扫描器的扫描，这种蜜罐的特征非常明显，访问时通常是空白页，但是在源码中可以看到为隐藏属性的大量关键字，通常用于应对扫描器的识别&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../img/a2.png&#34; alt=&#34;image-20210315174111636&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;在常见的识别工具例如Wappalyzer中也显示出了大量的识别结果（这是新版本的wappalyzer中的显示结果，低置信度的结果会在新版本中根据相应选择算法被丢弃，而在旧版本中会把所有触发检测规则的框架等全部包含，可能显示的数字高达数百至数千）&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../img/a3.png&#34; alt=&#34;image-20210315174341524&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;另一款主流蜜罐kippo，在Github上是一款评分相对非常高的蜜罐，遗憾的是已经很多年没有更新了，曾经作为一款蜜罐还是非常火热的，虽然最后一个release版本是14年发布的，但是去年仍有文章在写这款蜜罐&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../1.assets/image-20210401110005363.png&#34; alt=&#34;image-20210401110005363&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;作为较老的蜜罐，其实通过shodan和fofa等网络空间资产搜索引擎还是发现了大量部署了该蜜罐的服务器和设备。根据分析提取特征后发现，这款蜜罐虽然当时比较优秀，但是特征还是很明显的。分析后总结如下：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;SSH版本固定，返回的banner信息为SSH-2.0-OpenSSH_5.1p1 Debian-5&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;构造畸形包来尝试请求连接，由于kippo协议实现的原因不会像正常的连接一样返回Protocol mismatch，可以作为另一点&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;基于以上两点就可以快速分辨出目标是否为kippo蜜罐，当然hvv的目标里应该见不太到这类古董了&lt;/p&gt;&#xA;&lt;p&gt;同样，还有一些低交互蜜罐则可以返回一些简单的命令，以互联网上一款非常热门的开源蜜罐Hfish为例，由于某些原因，我在本地搭建测试的为2020年12月发布的版本，在官方文档中看到的Hifish的描述如下：&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../img/a4.png&#34; alt=&#34;image-20210317102603325&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;定制蜜罐需要用户自行配置，例如我们在配置文件中可以看到相关服务的启停情况&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../img/a5.png&#34; alt=&#34;image-20210317113955629&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;通过nmap扫描已经开启蜜罐的机器，通过服务识别时给我们的反馈如下：&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../img/a6.png&#34; alt=&#34;image-20210317114623361&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;可以看到启动的服务非常之多，常规机器上开启如此多服务的并不常见，开放大量端口的极有可能是蜜罐，另外在做信息收集时肯定会扫描网段，通常蜜罐不会只放置一台，在同一个C段搭数台蜜罐机器是很常见的，&lt;strong&gt;如果在同网段发现多数机器开放大量端口且端口相同，请求后的返回相似，有可能部署了一系列的蜜罐。&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;另外一点检测蜜罐的方式就是通过命令交互&lt;/strong&gt;，Hfish的规则需要用户自己定义，以ssh为例，通过SSH登录蜜罐&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../img/a7.png&#34; alt=&#34;image-20210317115146380&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;第一个问题就是命令需要自己配置，在ls命令时并没有看出什么明显的问题，但执行whoami和id时无法返回正确的结果，需要我们在配置文件中进行配置，配置文件中默认支持的指令写的非常少&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../img/a8.png&#34; alt=&#34;image-20210317115611917&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;当输入除此以外的命令时，即使输入为空也会返回test&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../img/a9.png&#34; alt=&#34;image-20210317115812675&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;此外，根据其默认提供的ls -all命令，我们也可以尝试一下，可以看到返回的时间均为2017年，明显早于现在，这也是其中一个较为明显的发现点。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../img/a12.png&#34; alt=&#34;image-20210317180648863&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;同样再来看一下我们在日常使用的kali上的执行结果，差别很明显就出来了&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../img/a13.png&#34; alt=&#34;image-20210317180800906&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;在没有一定基础的用户使用的时候，通过该种类型的配置漏洞可以很方便地发现问题。不过此时的Hfish配置启用的是高交互ssh蜜罐（也是Hfish的默认配置选项），还可以被配置成低交互状态，此时不能执行命令可以使上述判断无效化，所有的登录请求都会被拒绝&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../img/a10.png&#34; alt=&#34;image-20210317120245794&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;这时候可以避免很多问题，但是经过扫描你会发现开放的端口中会有一些WEB服务，有可能目标机器是真实环境，并且部署了Hfish来捕获攻击，并且相关服务拟真，你无法判断目标服务的真实有效性。如果是蜜罐构造的WEB环境，很有可能存在纰漏，例如HFish的蜜罐构造的假WEB页面，其中只有两个js，并且x.js可以很明显的发现蜜罐特征，并且在溯源反制上，你可以直接通过泄露出的seckey给目标填塞大量的垃圾数据影响蓝队的判断&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../1.assets/image-20210409182544926.png&#34; alt=&#34;image-20210409182544926&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;在真实的wordpress中可以则看到大量js，这也可以用于判断&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../1.assets/image-20210409183309237.png&#34; alt=&#34;image-20210409183309237&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;同时还可以根据浏览器的发包请求来判断包内容，包中的钓鱼很明显就告诉攻击者这是个蜜罐&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../1.assets/image-20210409190726775.png&#34; alt=&#34;image-20210409190726775&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;延续上文中讲的C段蜜罐，根据测试结果发现，大部分蜜罐的回应和发包的时间戳都是相对固定的，而物理服务器则会有偏差，通常物理服务器返回的时间戳会存在一定的偏差，我们通过抓包来复现了一下返回过程&lt;/p&gt;&#xA;&lt;p&gt;首先通过ssh连接机器并且执行了一些命令&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../img/a14.png&#34; alt=&#34;image-20210318112534739&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;至所有命令执行结束时我们一共获取到了129个数据包，分析发出命令的包到收到回包的时间&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../img/a15.png&#34; alt=&#34;image-20210318112706170&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../img/a16.png&#34; alt=&#34;image-20210318113200808&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;执行前几条命令时响应时间为0.000148s,0.000105s,0.000132s&amp;hellip;&lt;/p&gt;&#xA;&lt;p&gt;我们再开启蜜罐，为了防止其他因素影响，将返回值设置成与之前正常请求kali时相同，但是测试时发生了一个非常尴尬的情况，开启这款蜜罐后所有的传输都是TCP，并没有SSH&amp;hellip;又直接暴露了一个问题&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../img/a17.png&#34; alt=&#34;image-20210318115157300&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../img/a18.png&#34; alt=&#34;image-20210318115219075&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;所以根据协议进行识别是一个较为有效的方式，360Quake研究过不少蜜罐的协议实现，以下引用当时的研究结果：拿Dionaea 的Memcached协议举例，在实现Memcached协议时Dionaea把很多参数做了随机化，但是在一些参数如：version、libevent和rusage_user等都是固定的。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../1.assets/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20210409175349.jpg&#34; alt=&#34;微信图片_20210409175349&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;总结表如下：&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../1.assets/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20210409175630.jpg&#34; alt=&#34;微信图片_20210409175630&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;相对其他协议的实现也可以进行深入研究，例如Mysql协议，近期在hvv前夕也涌现出了非常多的开源或闭源的Mysql蜜罐，检测此类蜜罐的步骤可分为如下几步：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;伪造客户端连接蜜罐mysql服务&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;连接成功发送mysql查询请求&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;接受mysql服务器响应，通过分析伪造的mysql客户端读取文件的数据包得到的报文结构：文件名长度+1 + \x00\x00\x01\xfb + 文件名&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
