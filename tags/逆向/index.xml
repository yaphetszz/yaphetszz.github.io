<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>逆向 on Y4ph3tS blog</title>
    <link>http://localhost:1313/tags/%E9%80%86%E5%90%91/</link>
    <description>Recent content in 逆向 on Y4ph3tS blog</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Wed, 08 Apr 2020 09:14:00 +0800</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/%E9%80%86%E5%90%91/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>APK重打包与smali修改</title>
      <link>http://localhost:1313/posts/apk%E9%87%8D%E6%89%93%E5%8C%85%E4%B8%8Esmali%E4%BF%AE%E6%94%B9/</link>
      <pubDate>Wed, 08 Apr 2020 09:14:00 +0800</pubDate>
      <guid>http://localhost:1313/posts/apk%E9%87%8D%E6%89%93%E5%8C%85%E4%B8%8Esmali%E4%BF%AE%E6%94%B9/</guid>
      <description>&lt;p&gt;&lt;strong&gt;本文所述的一切技术仅供网络安全研究学习之用，请勿用于任何的违法用途，否则由此所产生的一切后果自负！&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;APK重打包漏洞是安卓应用开发中一个较为常见的安全问题，主要是指攻击者通过反编译（Reverse  Engineering）获取应用的源代码或资源文件，对其进行恶意修改（如嵌入恶意代码或广告模块）后重新打包并发布。这种行为会导致原应用的完整性和安全性被破坏，从而威胁用户和开发者的利益。&lt;/p&gt;&#xA;&lt;p&gt;使用工具查壳&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../imgs/6b355b58-90ca-4303-97fd-8f7e827ebe24.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;未加壳后用apktools进行反编译&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;java -jar apktool_2.9.3.jar d hello_world.apk&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;反编译后定位到主方法的smali&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../imgs/aed333bb-6467-41d6-a0f8-a08625a9b63b.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;在smali中插入弹窗代码&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../imgs/da19b082-ace1-408a-a071-8e744fa3de3e.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;使用apktool重新编译&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;java -jar apktool.jar b hello_world -o unsigned.apk&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;../imgs/25c573f7-c474-4b8e-aca7-0a4b9b93baef.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;此时如果直接安装是无法成功的，因为APP未经过签名&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../imgs/c3351e21-959e-40bd-9c41-183ffaec352f.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;使用命令进行签名，签名先需要先生成jks证书文件&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;keytool -genkeypair -v -keystore test.jks -storepass 123456 -keyalg RSA -keysize 2048 -validity 10000 -alias test&#xD;&#xA;&amp;#34;C:\Program Files\Java\jdk1.8\bin\java.exe&amp;#34; -jar apksigner.jar sign -verbose --ks test.jks --v1-signing-enabled true --v2-signing-enabled true --ks-pass pass:123456 --ks-k ey-alias test --out signed.apk unsigned.apk&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;../imgs/5c4b5c06-cc90-4afe-b60a-66a9d9a13deb.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;重打包后可以看到之前修改smali弹窗已经成功&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../imgs/ada17813-2a42-4020-a22e-13eac976a046.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;常见问题解决：&lt;/p&gt;&#xA;&lt;p&gt;\1. Failed to load signer &amp;ldquo;signer #1&amp;rdquo; java.io.IOException: Keystore was tampered with, or password was incorrect&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
